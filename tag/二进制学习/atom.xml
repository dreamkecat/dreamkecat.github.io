<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>我他喵的 • Posts by &#34;二进制学习&#34; tag</title>
    <link href="http://example.com" />
    <updated>2022-06-27T13:06:06.000Z</updated>
    <category term="writeup" />
    <category term="learning" />
    <category term="pwn" />
    <category term="Hello World" />
    <category term="二进制学习" />
    <category term="Learning" />
    <category term="逆向" />
    <category term="reverse" />
    <entry>
        <id>http://example.com/2022/06/27/%E5%AD%A6%E4%B9%A0%E5%91%A8%E8%AE%B0-%E2%80%94%E2%80%94%E4%B8%80/</id>
        <title>学习周记 ——一</title>
        <link rel="alternate" href="http://example.com/2022/06/27/%E5%AD%A6%E4%B9%A0%E5%91%A8%E8%AE%B0-%E2%80%94%E2%80%94%E4%B8%80/"/>
        <content type="html">&lt;h1 id=&#34;task&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#task&#34;&gt;#&lt;/a&gt; TASK:&lt;/h1&gt;
&lt;p&gt;​		编写 IDA 脚本，不依赖版本号的条件下，利用二进制特征，在 openssl 的 libssl.so 中检查 CVE-2015-0207 和 CVE-2014-3507 是否被修补&lt;/p&gt;
&lt;p&gt;要求：idc 和 python 两个版本都写一下，这个就是把 libssl.so 拖进 ida，然后运行你的脚本，然后弹窗或者输出有没有那两个 cve 存在&lt;/p&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaGV4LXJheXMuY29tL3Byb2R1Y3RzL2lkYS9zdXBwb3J0L2lkYWRvYy8xNjIuc2h0bWw=&#34;&gt;https://www.hex-rays.com/products/ida/support/idadoc/162.shtml&lt;/span&gt;				按字母顺序排列的 IDC 函数列表&lt;/p&gt;
&lt;p&gt;不依赖版本号，就是使用 ida 通用的函数，&lt;/p&gt;
&lt;h2 id=&#34;前置diff-dapatch&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前置diff-dapatch&#34;&gt;#&lt;/a&gt; 前置：diff dapatch&lt;/h2&gt;
&lt;h2 id=&#34;对于数据的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对于数据的定义&#34;&gt;#&lt;/a&gt; 对于数据的定义&lt;/h2&gt;
&lt;p&gt;ida 各版本通用的是划分为，整数 long，字符串 string，以及浮点数，而不做具体的划分。或者使用无定形的关键字 auto，定义一个变量。但是在模块中，我们还是要局部变量先声明。可以在任何地方都可以定义定义一个全局变量，关键字为 extern，但是不能在声明的同时，进行赋值。&lt;/p&gt;
&lt;h2 id=&#34;运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运算&#34;&gt;#&lt;/a&gt; 运算&lt;/h2&gt;
&lt;p&gt;idc 不支持复合赋值运算，比如 i+=2 这样，但是支持三元运算符（？：）。&lt;/p&gt;
&lt;h2 id=&#34;数据处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据处理&#34;&gt;#&lt;/a&gt; 数据处理：&lt;/h2&gt;
&lt;p&gt;idc 这种脚本程序，最重要的就是数据的获取以及处理，idc 库提供了相关的数据获取与处理的函数&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;读取内存数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Byte&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; addr)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Word&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; addr)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Dword&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; addr)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;修改内存数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Patchbyte&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; addr)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Patchword&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; addr)&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;PatchDword&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(longword)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//修改数据的时候，如果提供的数据长度不匹配，从低地址开始有效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isLoaded&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; addr)&lt;/span&gt;;	&lt;span class=&#34;comment&#34;&gt;//地址是否包含有效数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;用户交互输入输出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用户交互输入输出&#34;&gt;#&lt;/a&gt; 用户交互 —— 输入输出&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/dreamkecat/blog_img/master/blog_img/image-20220922122729965.png&#34; alt=&#34;image-20220922122729965&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以物品们尽量使用 Message 函数进行输出 ma ?&lt;/p&gt;
&lt;h2 id=&#34;处理函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理函数&#34;&gt;#&lt;/a&gt; 处理函数&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//获取目标地址 *所在* 函数的名字&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string	GetFunctionName(long addr);	//如果addr不属于一个函数，则返回一个空字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;long	NextFunction(long addr);	//返回addr的下一函数的起始地址，失败返回-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;long	PrevFunction(long addr);	//返回addr的之前距离最近的函数的起始地址，失败返回-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;long	LocByName(string name);	//根据名字查找函数的起始地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//宏定义，非法地址   BADADDR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//交叉引用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;task1cve-2015-0207&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#task1cve-2015-0207&#34;&gt;#&lt;/a&gt; task1:CVE-2015-0207&lt;/h2&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;-- a/ssl/d1_lib.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+++ b/ssl/d1_lib.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dtls1_listen&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(SSL *s, &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; sockaddr *client)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+    &lt;span class=&#34;comment&#34;&gt;/* Ensure there is no state left over from a previous invocation */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+    SSL_clear(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     SSL_set_options(s, SSL_OP_COOKIE_EXCHANGE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     s-&amp;gt;d1-&amp;gt;listen = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;检测是否修复漏洞，就是看看 dtls1_listen 函数是否调用了 SSL_clear 函数。&lt;/p&gt;
&lt;p&gt;定位到 dtls1_listen 函数的位置，遍历他的每一条指令，筛选出函数调用指令的交叉引用，所以我们需要便利的同时进行排除选择，检查交叉引用的返回值，筛选出 fl_CN 或者 fl_CF 类型的交叉引用。然后判断，调用函数的名称是否为 SSL_clear.&lt;/p&gt;
&lt;p&gt;idc 脚本&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;idc.idc&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; func,end,target,inst,name,flags,xref;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    flags = SEARCH_DOWN | SEARCH_NEXT;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;now ,let&amp;#x27;s begin!\n\n\n*********************\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    func = LocByName(&lt;span class=&#34;string&#34;&gt;&amp;quot;dtls1_listen&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(func == BADADDR)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Warning(&lt;span class=&#34;string&#34;&gt;&amp;quot;Sorry we cannnot find dtls1_listen in the database!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end = GetFunctionAttr(func,FUNCATTR_END);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        name = Name(func)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(inst = func; inst &amp;lt;end;inst = FindCode(inst,flags))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (target = Rfirst(inst);target != BADADDR;target = Rnext(inst,target))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			  xref = XrefType();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(xref == fl_CN || xref == fl_CF)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s calls %s from 0x%x\n&amp;quot;&lt;/span&gt;,name ,Name(target),inst);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(target == LocByName(&lt;span class=&#34;string&#34;&gt;&amp;quot;SSL_clear&amp;quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       Message(&lt;span class=&#34;string&#34;&gt;&amp;quot;this database hax beens patched!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                       &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;task2cve-2014-3507&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#task2cve-2014-3507&#34;&gt;#&lt;/a&gt; task2:CVE-2014-3507&lt;/h2&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;--- a/ssl/d1_both.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+++ b/ssl/d1_both.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@@ &lt;span class=&#34;number&#34;&gt;-616&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; +&lt;span class=&#34;number&#34;&gt;616&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt; @@ dtls1_reassemble_fragment(SSL *s, &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; hm_header_st* msg_hdr, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; *ok)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            msg_hdr-&amp;gt;msg_len &amp;gt; dtls1_max_handshake_message_len(s))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+       &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (frag_len == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+               &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; DTLS1_HM_FRAGMENT_RETRY;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;/* Try to find item in queue */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;memset&lt;/span&gt;(seq64be,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(seq64be));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        seq64be[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;] = (&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;) (msg_hdr-&amp;gt;seq&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@@ &lt;span class=&#34;number&#34;&gt;-693&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; +&lt;span class=&#34;number&#34;&gt;696&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; @@ dtls1_reassemble_fragment(SSL *s, &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; hm_header_st* msg_hdr, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; *ok)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-               pqueue_insert(s-&amp;gt;d1-&amp;gt;buffered_messages, item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+               item = pqueue_insert(s-&amp;gt;d1-&amp;gt;buffered_messages, item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+               &lt;span class=&#34;comment&#34;&gt;/* pqueue_insert fails iff a duplicate item is inserted.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;+                * However, |item| cannot be a duplicate. If it were,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;+                * |pqueue_find|, above, would have returned it and control&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;+                * would never have reached this branch. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+               OPENSSL_assert(item != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; DTLS1_HM_FRAGMENT_RETRY;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@@ &lt;span class=&#34;number&#34;&gt;-751&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; +&lt;span class=&#34;number&#34;&gt;759&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; @@ dtls1_process_out_of_seq_message(SSL *s, &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; hm_header_st* msg_hdr, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; *ok)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-               &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (frag_len &amp;amp;&amp;amp; frag_len &amp;lt; msg_hdr-&amp;gt;msg_len)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+               &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (frag_len &amp;lt; msg_hdr-&amp;gt;msg_len)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dtls1_reassemble_fragment(s, msg_hdr, ok);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (frag_len &amp;gt; dtls1_max_handshake_message_len(s))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@@ &lt;span class=&#34;number&#34;&gt;-780&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; +&lt;span class=&#34;number&#34;&gt;788&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt; @@ dtls1_process_out_of_seq_message(SSL *s, &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; hm_header_st* msg_hdr, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; *ok)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( item == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-               pqueue_insert(s-&amp;gt;d1-&amp;gt;buffered_messages, item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+               item = pqueue_insert(s-&amp;gt;d1-&amp;gt;buffered_messages, item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+               &lt;span class=&#34;comment&#34;&gt;/* pqueue_insert fails iff a duplicate item is inserted.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;+                * However, |item| cannot be a duplicate. If it were,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;+                * |pqueue_find|, above, would have returned it. Then, either&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;+                * |frag_len| != |msg_hdr-&amp;gt;msg_len| in which case |item| is set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;+                * to NULL and it will have been processed with&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;+                * |dtls1_reassemble_fragment|, above, or the record will have&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;+                * been discarded. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+               OPENSSL_assert(item != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; DTLS1_HM_FRAGMENT_RETRY;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个相比较第一个就复杂一些，影响版本为小于 1.0.1&lt;/p&gt;
</content>
        <category term="二进制学习" />
        <updated>2022-06-27T13:06:06.000Z</updated>
    </entry>
</feed>
